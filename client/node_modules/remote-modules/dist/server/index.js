"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Server;

var _http = _interopRequireDefault(require("http"));

var _url = _interopRequireDefault(require("url"));

var _path = _interopRequireDefault(require("path"));

var _koa = _interopRequireDefault(require("koa"));

var _koaRouter = _interopRequireDefault(require("koa-router"));

var _koaEtag = _interopRequireDefault(require("koa-etag"));

var _koaConditionalGet = _interopRequireDefault(require("koa-conditional-get"));

var _logger = _interopRequireDefault(require("../lib/logger"));

var _escapeRegExp = _interopRequireDefault(require("../lib/helpers/escapeRegExp"));

var _once = _interopRequireDefault(require("../lib/helpers/once"));

var _pick = _interopRequireDefault(require("../lib/helpers/pick"));

var _fs = require("../lib/helpers/fs");

var _manifest = _interopRequireDefault(require("../lib/manifest"));

var _configStore = _interopRequireDefault(require("../lib/config-store"));

var _urlBuilder = require("../lib/url-builder");

var _context = require("./installer/context");

var _resource = _interopRequireDefault(require("./installer/resource"));

var _installer = _interopRequireDefault(require("./installer"));

var _watcher = _interopRequireDefault(require("./installer/watcher"));

var _timing = _interopRequireDefault(require("./middleware/timing"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// eslint-disable-next-line no-process-env
const ENV = process.env.BUILD_ENV || process.env.NODE_ENV || process.env.BABEL_ENV;

function getResponseBody(path) {
  return (0, _fs.readFileAsync)(path, null);
}

function generateTag(_ref) {
  let {
    type,
    target
  } = _ref,
      other = _objectWithoutProperties(_ref, ["type", "target"]);

  const attributes = Object.entries(other).map(([key, value]) => value === true ? key : `${key}="${value}"`).join(' ');

  switch (type) {
    case 'css':
      return `<link href="${target}" rel="stylesheet" ${attributes} />`;

    case 'js':
      return `<script src="${target}" ${attributes}></script>`;

    case 'json':
      return `<script type="application/json" ${attributes}>${target}</script>`;

    default:
      return '';
  }
}

function createScopeRouter(C, watcher) {
  const router = new _koaRouter.default();
  const {
    contextFactory,
    outputPath
  } = new _resource.default(C);
  const getModuleMap = (0, _once.default)(() => {
    // eslint-disable-next-line global-require, import/no-dynamic-require
    const {
      modules
    } = require(outputPath);

    if (ENV === 'test') {
      setImmediate(() => {
        delete require.cache[outputPath];
        getModuleMap.clear();
      });
    } else if (C.watch) {
      watcher.once('beforeupdate', () => {
        delete require.cache[outputPath];
        getModuleMap.clear();
      });
    }

    return modules;
  });
  const getAssetMap = (0, _once.default)(() => {
    // eslint-disable-next-line global-require, import/no-dynamic-require
    const {
      assets
    } = require(outputPath);

    if (ENV === 'test') {
      setImmediate(() => {
        delete require.cache[outputPath];
        getAssetMap.clear();
      });
    } else if (C.watch) {
      watcher.once('beforeupdate', () => {
        delete require.cache[outputPath];
        getAssetMap.clear();
      });
    }

    return assets;
  });

  const basePathname = _url.default.parse(C.server.uri).pathname;

  const staticFiles = C.server.static;

  function getManifestJSON(path, opts) {
    // eslint-disable-next-line global-require, import/no-dynamic-require
    const json = require(path)(_objectSpread({
      assetMap: getAssetMap()
    }, opts));

    if (ENV === 'test') {
      delete require.cache[path];
    } else if (C.watch) {
      watcher.once('beforeupdate', () => {
        delete require.cache[path];
      });
    }

    return json;
  }

  function scopeResolver(request, safe) {
    const ctx = contextFactory((request || C.entry).replace(/^:|(:\d+){1,2}$/g, ''));

    if (ctx.error && !safe) {
      throw ctx.error;
    }

    const mappedSlug = getModuleMap()[ctx.slug] || ctx.slug;
    const manifestPath = (0, _context.getManifestPath)((0, _context.slugToAbsolutePath)(C.outputDir, mappedSlug));
    const resolved = (0, _context.slugToAbsolutePath)(C.outputDir, getAssetMap()[mappedSlug] || mappedSlug);
    const sourceMap = (0, _context.slugToAbsolutePath)(C.outputDir, `${ctx.slug}.map`);
    return _objectSpread({}, (0, _pick.default)(ctx, ['error', 'moduleId', 'origin', 'pid']), {
      manifestPath,
      resolved,
      sourceMap
    });
  }

  function getResourceType(resolved) {
    const type = _path.default.extname(resolved).replace(/^\./, '');

    return type === 'css' || type === 'js' ? type : 'raw';
  }

  function getResourcePath(moduleId, query) {
    return (0, _urlBuilder.assembleResourceURL)({
      pathname: basePathname
    }, moduleId, query);
  }

  function renderStaticTags(request, type) {
    const ctx = scopeResolver(request);

    const manifest = _manifest.default.load(getManifestJSON(ctx.manifestPath, {
      dependencyFilter: meta => !type || type === meta.type
    }));

    const tags = manifest.list().reduce((acc, moduleId) => {
      const assetId = manifest.getAssetId(moduleId);

      if (!acc.has(assetId) && assetId !== manifest.meta('assetId')) {
        acc.set(assetId, generateTag({
          target: getResourcePath(assetId),
          type: manifest.getType(moduleId),
          'data-pid': manifest.getPid(moduleId),
          'data-remote-modules': true
        }));
      }

      return acc;
    }, new Map());

    if (!type || type === manifest.meta('type')) {
      tags.set(manifest.meta('assetId'), generateTag({
        type: manifest.meta('type'),
        target: getResourcePath(manifest.meta('assetId')),
        'data-module-id': manifest.meta('moduleId'),
        'data-pid': manifest.meta('pid'),
        'data-main': true,
        'data-remote-modules': true
      }));
    }

    if (!type || type === 'js') {
      tags.set(ctx.manifestPath, generateTag({
        type: 'json',
        target: JSON.stringify(getManifestJSON(ctx.manifestPath, {
          dependencyFilter: meta => meta.type !== 'raw'
        })),
        'data-module-id': manifest.meta('moduleId'),
        'data-pid': manifest.meta('pid'),
        'data-remote-modules': true
      }));
    }

    return [...tags.values()].join('\n');
  } // FOR DEVELOPMENT ONLY!!! REMOVE!!!


  if (ENV !== 'production') {
    router.get('/browser(/)?:request(.*)', async ctx =>
    /* istanbul ignore next */
    {
      const {
        request
      } = ctx.params;
      const {
        moduleId
      } = scopeResolver(request);
      const auto = ctx.query.auto !== 'false';
      const dynamic = Boolean(ctx.query.dynamic);
      ctx.body = `
				<html>
					<head>
						${dynamic ? '' : renderStaticTags(request, 'css')}
					</head>
					<body>
						<script>
							window.IMPORT_SCOPE = '${C.scopeKey}';
							window.IMPORT_REQUEST = '${ctx.query.import || `<${C.scopeKey}>/${(0, _urlBuilder.getResourcePathFromID)(moduleId)}`}';
							console.time('client:import');
						</script>
						${dynamic ? '' : renderStaticTags(request, 'js')}
						<script src="${basePathname}/static/dist/client.browser.js"></script>
						<script>
							window.client = new ImportClient({
								uri: '${C.getRoot().server.uri}'
							});
							if (${auto}) {
								client
									.import(window.IMPORT_REQUEST)
									.then(result => console.log(result))
									.catch(err => console.error(err.stack))
									.then(() => console.timeEnd('client:import'));
							}
						</script>
					</body>
				</html>
			`;
    });
  }
  /**
   * FIXME: This is weird, but it's presumably common for
   * static assets to live in '<root>/static', which means
   * their paths would be of the form '/static/static/<asset>'.
   */


  router.get('/static(/static)?/:path(.*)', async ctx => {
    const {
      path
    } = ctx.params;

    if (staticFiles.has(path)) {
      ctx.body = await getResponseBody(path);
      ctx.type = _path.default.extname(path);
    }
  });
  router.get('/manifest(/)?:request(.*)', async (ctx, next) => {
    try {
      const types = new Set((ctx.query.types || 'js').split(','));
      const {
        manifestPath,
        moduleId,
        pid,
        resolved
      } = scopeResolver(ctx.params.request);
      ctx.set('x-module-id', moduleId);
      ctx.set('x-pointer-id', pid);
      ctx.set('x-resource-type', getResourceType(resolved));
      ctx.body = getManifestJSON(manifestPath, {
        dependencyFilter: meta => types.has(meta.type)
      });
      ctx.type = '.json';
    } catch (err) {
      if (err.code !== 'ENOENT' && err.code !== 'MODULE_NOT_FOUND') {
        throw err;
      }

      await next();
    }
  });
  router.get('/render(/)?:request(.*)', ctx => {
    ctx.body = renderStaticTags(ctx.params.request, ctx.query.type);
  });
  router.get('/_/~/:request(.*)', async (ctx, next) => {
    try {
      const resolved = _path.default.join(C.outputDir, ctx.params.request);

      ctx.set('x-resource-type', getResourceType(resolved));
      ctx.body = await getResponseBody(resolved);
      ctx.type = _path.default.extname(resolved);
    } catch (err) {
      if (err.code !== 'ENOENT') {
        throw err;
      }

      await next();
    }
  });
  router.get('/_(/)?:request(.*)', async (ctx, next) => {
    try {
      const {
        resolved,
        moduleId,
        pid
      } = scopeResolver(ctx.params.request);
      ctx.set('x-module-id', moduleId);
      ctx.set('x-pointer-id', pid);
      ctx.set('x-resource-type', getResourceType(resolved));

      if (ctx.method === 'HEAD') {
        // fast return for resolve calls
        ctx.status = 204;
      } else {
        ctx.body = await getResponseBody(resolved);
        ctx.type = _path.default.extname(resolved);
      } // FOR DEVELOPMENT ONLY!!! REMOVE!!!

      /* istanbul ignore next */


      if (ENV !== 'production' && ctx.query.eval) {
        // eslint-disable-next-line global-require
        const {
          default: Client
        } = require('../client');

        const client = new Client({
          uri: C.server.uri
        });

        const profileEnd = _logger.default.profile();

        client.import(moduleId).then(result => {
          _logger.default.info(result);

          profileEnd(`import ${moduleId}`);
        }).catch(err => _logger.default.error(err));
      }
    } catch (err) {
      if (err.code !== 'ENOENT' && err.code !== 'MODULE_NOT_FOUND') {
        throw err;
      }

      await next();
    }
  });
  router.get('/_(/)?:request(.*).map', async (ctx, next) => {
    try {
      const {
        sourceMap
      } = scopeResolver(ctx.params.request);
      ctx.body = await getResponseBody(sourceMap);
      ctx.type = _path.default.extname(sourceMap);
    } catch (err) {
      if (err.code !== 'ENOENT' && err.code !== 'MODULE_NOT_FOUND') {
        throw err;
      }

      await next();
    }
  });

  if (C.server.redirects) {
    router.get('(.*)', ctx => {
      const regexp = new RegExp(`${(0, _escapeRegExp.default)(basePathname)}/?`);
      const request = ctx.path.replace(regexp, '');
      let location;

      try {
        const {
          moduleId
        } = scopeResolver(request);
        location = getResourcePath(moduleId, ctx.query);
      } catch (err) {
        if (err.code !== 'MODULE_NOT_FOUND') {
          throw err;
        }

        location = _path.default.join(basePathname, '/_', request);
      }

      ctx.redirect(location);
    });
  }

  router.use(ctx => {
    ctx.status = 404;
    ctx.body = {
      message: `Cannot find module '${ctx.path}'`,
      status: 404,
      code: 'MODULE_NOT_FOUND',
      path: ctx.path
    };
  });
  return new _koaRouter.default().use(`/${C.scopeKey}`, router.routes(), router.allowedMethods());
}

function createServer(C, watcher) {
  const app = new _koa.default();
  const appRouter = new _koaRouter.default();
  const basePublicPath = C.getRoot().get(['server', 'publicPath']);
  let statusCounts;

  if (ENV === 'test') {
    statusCounts = new Map();
    appRouter.use(async (ctx, next) => {
      await next();

      if (!statusCounts.get(ctx.status)) {
        statusCounts.set(ctx.status, 0);
      }

      statusCounts.set(ctx.status, statusCounts.get(ctx.status) + 1);
    });
  }

  appRouter.get('/up/', ctx => {
    ctx.state.noLog = true;
    ctx.body = 'OK';
  });
  C.scopes().forEach(scope => {
    const c = C.use(scope);
    const publicPath = c.get(['server', 'publicPath']);
    const scopeRouter = createScopeRouter(c, watcher);
    appRouter.get(_path.default.join(basePublicPath, '/@static/:request(.*)'), async (ctx, next) => {
      ctx.path = (0, _urlBuilder.assembleResourceURL)({
        pathname: publicPath
      }, ctx.params.request);
      await scopeRouter.routes()(ctx, next);

      if (ctx.status === 404) {
        ctx.url = ctx.originalUrl;
        await next();
      }
    });
    appRouter.use('(.*)', scopeRouter.routes(), scopeRouter.allowedMethods());
  });
  app.use((0, _timing.default)()).use((0, _koaConditionalGet.default)()).use((0, _koaEtag.default)()).use(appRouter.routes()).use(appRouter.allowedMethods()).use(ctx => {
    ctx.status = 404;
    ctx.body = {
      message: 'Not Found'
    };
  });
  app.on('error', err => {
    _logger.default.error(err);
  });

  const server = _http.default.createServer(app.callback());

  return {
    app,
    server,
    statusCounts
  };
}

function Server(options) {
  const C = _configStore.default.from(options);

  const watcher = new _watcher.default();
  const installers = C.scopes().map(scope => {
    const c = C.use(scope);

    const scopeLogger = _logger.default.child({
      name: c.scopeKey
    });

    const install = new _installer.default(c);
    return async (force, ...other) => {
      const {
        resourceFactory
      } = await install(force, ...other);

      if (c.watch) {
        watcher.subscribe(resourceFactory, async events => {
          events.forEach(([, resource]) => resource.markDirty());
          await install(false, ...other);
        });
        watcher.on('error', err => {
          scopeLogger.error(err.frame || err);
        });
        watcher.once('ready', () => {
          scopeLogger.info(`Watching '${_path.default.relative(process.cwd(), c.entryDir) || '.'}' for changes`);
        });
      }

      return resourceFactory();
    };
  });
  let app;
  let server;
  let statusCounts;

  function listen(port = C.server.port) {
    if (!server) {
      ({
        app,
        server,
        statusCounts
      } = createServer(C, watcher));
    }

    return new Promise(resolve => {
      server.listen(port, resolve);
    }).then(() => {
      _logger.default.info(`Listening on ${server.address().port}`);
    });
  }

  async function close() {
    watcher.close();

    if (server) {
      await server.close();
    }
  }

  return Object.freeze({
    install: async (...args) => {
      watcher.reset();
      const result = await Promise.all(installers.map(install => install(...args)));
      await watcher.start();
      return result;
    },
    watcher,
    listen,
    close,

    get app() {
      return app;
    },

    get server() {
      return server;
    },

    get statusCounts() {
      return statusCounts;
    }

  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,