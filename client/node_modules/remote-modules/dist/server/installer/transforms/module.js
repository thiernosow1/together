"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var t = _interopRequireWildcard(require("@babel/types"));

var _template = _interopRequireDefault(require("@babel/template"));

var _generator = _interopRequireDefault(require("@babel/generator"));

var _codeFrame = require("@babel/code-frame");

var _resourceRequest = _interopRequireDefault(require("../generators/resource-request"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const moduleNotFoundTemplate = (0, _template.default)(`
	MODULE._throwNotFound(REQUEST);
`);

function isRequireResolve(path) {
  return path.isCallExpression() && path.get('callee.property').isIdentifier({
    name: 'resolve'
  }) && path.get('callee.object').isIdentifier({
    name: 'require'
  });
}

function isRequire(path) {
  return path.node.callee.name === 'require' && !isRequireResolve(path.get('arguments.0'));
}

var _default = (api, {
  logger,
  resource
}) => {
  const moduleIdentifier = t.Identifier('module');
  const requireIdentifier = t.Identifier('$require');
  const importIdentifier = t.MemberExpression(moduleIdentifier, t.Identifier('import'));

  const buildQuery = (...args) => resource.adapter.parser.buildQuery(...args);

  function printRequestWarning(path) {
    const program = path.scope.getProgramParent();
    const {
      code
    } = (0, _generator.default)(program.block, {
      retainLines: true
    });
    const location = path.node.loc;
    const frame = (0, _codeFrame.codeFrameColumns)(code, location, {
      message: 'Cannot statically determine request value',
      highlightCode: true
    });
    logger.warn(`${resource.moduleId}:\n\n${frame}\n`);
  }

  function replaceDefault(path, request) {
    const ctx = resource.contextFactory(request, resource.getResolverPaths());

    switch (true) {
      case Boolean(ctx.error):
        path.replaceWith(moduleNotFoundTemplate({
          MODULE: moduleIdentifier,
          REQUEST: request.node
        }));
        break;

      case ctx.isExternal():
        path.replaceWith(t.CallExpression(requireIdentifier, [t.StringLiteral(ctx.moduleId)]));
        break;

      case ctx.isNull():
        {
          const declaratorPath = path.findParent(p => p.isVariableDeclarator());
          const targetPath = declaratorPath ? declaratorPath.get('init') : path;
          targetPath.replaceWith(t.Identifier('null'));
          targetPath.addComment('leading', request.value);
          break;
        }

      default:
        path.replaceWith(t.CallExpression(requireIdentifier, [t.NumericLiteral(ctx.pid)]));
        path.addComment('leading', request.value);
        break;
    }
  }

  function replaceRequest(path) {
    const request = (0, _resourceRequest.default)(path.node, buildQuery);

    switch (true) {
      case isRequireResolve(path):
        if (request.dynamic) {
          path.replaceWith(t.CallExpression(t.MemberExpression(moduleIdentifier, t.Identifier('resolveDynamic')), [request.node]));
        } else {
          const ctx = resource.contextFactory(request, resource.getResolverPaths());

          if (ctx.isNull()) {
            path.replaceWith(moduleNotFoundTemplate({
              MODULE: moduleIdentifier,
              REQUEST: request.node
            }));
          } else {
            path.replaceWith(t.StringLiteral(ctx.moduleId));
          }
        }

        break;

      case request.async:
        if (request.dynamic) {
          path.replaceWith(t.CallExpression(importIdentifier, [t.CallExpression(t.MemberExpression(moduleIdentifier, t.Identifier('resolveDynamic')), [request.node])]));
        } else {
          const ctx = resource.contextFactory(request, resource.getResolverPaths());
          path.replaceWith(t.CallExpression(importIdentifier, [t.StringLiteral(ctx.moduleId)]));
        }

        break;

      case request.href:
        {
          if (request.dynamic) {
            printRequestWarning(path);
            path.replaceWith(t.CallExpression(t.MemberExpression(moduleIdentifier, t.Identifier('resolveURL')), [t.CallExpression(t.MemberExpression(moduleIdentifier, t.Identifier('resolveDynamic')), [request.node])]));
          } else {
            const ctx = resource.contextFactory(request, resource.getResolverPaths());
            path.replaceWith(t.StringLiteral(ctx.url));
          }

          break;
        }

      case request.dynamic:
        printRequestWarning(path);
        path.replaceWith(t.CallExpression(requireIdentifier, [t.CallExpression(t.MemberExpression(moduleIdentifier, t.Identifier('resolveDynamic')), [request.node])]));
        break;

      default:
        replaceDefault(path, request);
        break;
    }
  }

  return {
    visitor: {
      MemberExpression(path) {
        const {
          object,
          property
        } = path.node;

        if (object.name === 'System' && property.name === 'import') {
          // FIXME: Move this to a CallExpression visitor?
          replaceRequest(path.parentPath);
        } else if (object.name === 'require' && property.name === 'cache') {
          // FIXME: Move this to an Identifier visitor?
          const registryIdentifier = t.MemberExpression(moduleIdentifier, t.Identifier('registry'));

          if (t.isMemberExpression(path.parent)) {
            path.parentPath.replaceWith(t.CallExpression(t.MemberExpression(registryIdentifier, t.Identifier('get')), [path.parent.property]));
          } else {
            path.replaceWith(registryIdentifier);
          }
        }
      },

      CallExpression(path) {
        if (t.isImport(path.node.callee) || isRequire(path) || isRequireResolve(path)) {
          replaceRequest(path);
        }
      }

    }
  };
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,