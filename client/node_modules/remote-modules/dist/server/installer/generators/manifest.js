"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var babylon = _interopRequireWildcard(require("@babel/parser"));

var babel = _interopRequireWildcard(require("@babel/core"));

var t = _interopRequireWildcard(require("@babel/types"));

var _generator = _interopRequireDefault(require("@babel/generator"));

var _template = _interopRequireDefault(require("@babel/template"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const manifestTemplate = (0, _template.default)(`
	const IDENTITY = value => value;

	const PICK = (target, keys) =>
		keys.reduce((acc, key) => {
			acc[key] = target[key];
			return acc;
		}, {});

	module.exports = ({
		KEYS = ['assetId', 'moduleId', 'pid', 'type'],
		FILTER = DEFAULT_FILTER,
		ASSET_MAP = {}
	} = {}) => MANIFEST;
`);

var _default = manifest => {
  const _manifest$toJSON = manifest.toJSON(),
        {
    dependencies,
    meta
  } = _manifest$toJSON,
        other = _objectWithoutProperties(_manifest$toJSON, ["dependencies", "meta"]);

  const keysIdentifier = t.Identifier('keys');
  const pickIdentifier = t.Identifier('pick');
  const identityIdentifier = t.Identifier('identity');
  const filterIdentifier = t.Identifier('dependencyFilter');
  const assetMapIdentifier = t.Identifier('assetMap');

  function buildMetaObjectExpression(value) {
    const metaObjectExpression = babylon.parseExpression(JSON.stringify(value));
    const assetMetaExpression = t.MemberExpression(assetMapIdentifier, t.StringLiteral(value.outputSlug), true);
    metaObjectExpression.properties.push(t.ObjectProperty(t.StringLiteral('assetId'), t.ConditionalExpression(assetMetaExpression, t.BinaryExpression('+', t.StringLiteral('~/'), assetMetaExpression), t.StringLiteral(value.moduleId))));
    return metaObjectExpression;
  }

  function buildPickExpression(value) {
    return t.CallExpression(t.ConditionalExpression(keysIdentifier, pickIdentifier, identityIdentifier), [t.isIdentifier(value) ? value : buildMetaObjectExpression(value), keysIdentifier]);
  }

  function buildDependenciesCallExpression(filterNode) {
    return t.CallExpression(t.MemberExpression(t.ArrayExpression(dependencies.map(value => buildMetaObjectExpression(value))), t.Identifier('filter')), [filterNode]);
  }

  let ast = t.Program(manifestTemplate({
    PICK: pickIdentifier,
    IDENTITY: identityIdentifier,
    KEYS: keysIdentifier,
    FILTER: filterIdentifier,
    DEFAULT_FILTER: t.ArrowFunctionExpression([t.Identifier('meta')], t.BinaryExpression('===', t.Identifier('meta.type'), t.StringLiteral(meta.type))),
    MANIFEST: t.ObjectExpression([t.ObjectProperty(t.StringLiteral('meta'), buildPickExpression(meta)), ...Object.entries(other).map(([key, value]) => t.ObjectProperty(t.StringLiteral(key), babylon.parseExpression(JSON.stringify(value)))), t.ObjectProperty(t.StringLiteral('dependencies'), t.CallExpression(t.MemberExpression(buildDependenciesCallExpression(filterIdentifier), t.Identifier('map')), [t.ArrowFunctionExpression([t.Identifier('meta')], buildPickExpression(t.Identifier('meta')))]))]),
    ASSET_MAP: assetMapIdentifier
  }));
  ({
    ast
  } = babel.transformFromAst(ast, null, {
    ast: true,
    babelrc: false,
    presets: [['@babel/env', {
      targets: {
        node: 'current'
      }
    }]]
  }));
  return (0, _generator.default)(ast).code;
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,