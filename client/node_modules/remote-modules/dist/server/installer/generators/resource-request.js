"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var t = _interopRequireWildcard(require("@babel/types"));

var _traverse = _interopRequireDefault(require("@babel/traverse"));

var _requestAttributes = require("../../../lib/request-attributes");

var _defineProperties = _interopRequireDefault(require("../../../lib/helpers/defineProperties"));

var _get = _interopRequireDefault(require("../../../lib/helpers/get"));

var _once = _interopRequireDefault(require("../../../lib/helpers/once"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function isImport(path) {
  if (path.findParent(({
    node
  }) => t.isImport(node.callee))) {
    return true;
  }

  const callee = (0, _get.default)(path.findParent(p => p.isCallExpression()), ['node', 'callee']);
  return (0, _get.default)(callee, ['object', 'name']) === 'System' && (0, _get.default)(callee, ['property', 'name']) === 'import';
}

function parseRequestPath(path) {
  const {
    value
  } = path.node;
  const {
    list,
    attributes
  } = (0, _requestAttributes.parseAttributes)(value);

  if (list) {
    path.replaceWith(t.StringLiteral((0, _requestAttributes.stripAttributes)(value)));
  }

  return _objectSpread({}, attributes, {
    async: isImport(path) && !list || attributes.async
  });
}

function createRootNode(requestNode) {
  return t.File(t.Program([t.isExpression(requestNode) ? t.ExpressionStatement(requestNode) : requestNode]));
}

function getValueNode({
  program
}) {
  return (// ImportDeclaration
    program.body[0].source || // CallExpression
    program.body[0].expression.arguments[0]
  );
}

function getValue(valueNode) {
  return t.isStringLiteral(valueNode) ? valueNode.value : undefined;
}

function replaceVariableNode(variables, path) {
  if (variables.has(path.node)) {
    path.replaceWith(t.StringLiteral('*'));
  }
}

function requestToGlob(requestNode, variables) {
  if (variables.size === 0) {
    return undefined;
  }

  const rootNode = createRootNode(requestNode);
  (0, _traverse.default)(rootNode, {
    StringLiteral: (0, _once.default)(path => {
      parseRequestPath(path);
    }),

    Expression(path) {
      if (!t.isLiteral(path.node)) {
        replaceVariableNode(variables, path);
      }
    },

    exit(path) {
      if (!t.isLiteral(path.node)) {
        const {
          confident,
          value
        } = path.evaluate();

        if (confident) {
          path.replaceWith(t.StringLiteral(value));
          path.skip();
        }
      }
    }

  });
  return getValue(getValueNode(rootNode));
}

var _default = (originalRequestNode, buildQuery) => {
  class VariableStore extends Set {
    add(node) {
      return super.add(buildQuery(node));
    }

    has(node) {
      return super.has(buildQuery(node));
    }

  }

  const requestNode = t.cloneDeep(originalRequestNode);
  const requestNodeCopy = t.cloneDeep(requestNode);
  const rootNode = createRootNode(requestNode);
  const variables = new VariableStore();
  const attributes = {};
  (0, _traverse.default)(rootNode, {
    StringLiteral: (0, _once.default)(path => {
      Object.assign(attributes, parseRequestPath(path));
    }),

    Expression(path) {
      if (!t.isLiteral(path.node) && !t.isBinaryExpression(path.node) && path.node !== requestNode && path.parent !== requestNode) {
        if (t.isMemberExpression(path.node)) {
          if (!t.isLiteral(path.node.object)) {
            variables.add(path.node);
            path.skip();
          }
        } else if (t.isCallExpression(path.node) || t.isIdentifier(path.node)) {
          variables.add(path.node);
          path.skip();
        }
      }
    },

    exit(path) {
      if (!t.isLiteral(path.node)) {
        const {
          confident,
          value
        } = path.evaluate();

        if (confident) {
          path.replaceWith(t.StringLiteral(value));
          path.skip();
        }
      }
    }

  });
  const pattern = requestToGlob(requestNodeCopy, variables);
  const valueNode = getValueNode(rootNode);
  const value = getValue(valueNode);
  const attributesString = (0, _requestAttributes.formatAttributes)(attributes);
  const dynamic = typeof value !== 'string' || undefined;
  const requestObject = (0, _defineProperties.default)(_objectSpread({}, attributes, {
    attributes: attributesString,
    dynamic,
    pattern,
    value
  }), {
    getKey: (string = value) => [attributesString, string].join(''),
    node: {
      value: valueNode
    }
  });
  return requestObject;
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,