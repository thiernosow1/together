"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Installer;

var _path = _interopRequireDefault(require("path"));

var _noop = _interopRequireDefault(require("../../lib/helpers/noop"));

var _logger = _interopRequireDefault(require("../../lib/logger"));

var _configStore = _interopRequireDefault(require("../../lib/config-store"));

var _resource = _interopRequireDefault(require("./resource"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Installer(options) {
  const C = _configStore.default.from(options);

  const scopeLogger = _logger.default.child({
    name: C.scopeKey
  });

  const factory = new _resource.default(Object.assign(C, {
    logger: scopeLogger
  }));
  return async function install(force, interceptor = _noop.default) {
    const profileEnd = scopeLogger.profile();

    const label = _path.default.basename(_path.default.resolve(C.entry));

    let entrypoint;
    scopeLogger.info(`Installing '${label}'...`);
    factory.failed = false;

    try {
      if (force) {
        await factory.reset();
      }

      entrypoint = await factory.load();
      const changedResources = [];
      await entrypoint.traverse(async resource => {
        const result = (await interceptor(resource)) !== false;

        if (result) {
          changedResources.push(resource);
        }

        return result;
      });

      if (!/node_modules\//.test(__dirname)) {
        const resourceIndices = new Map();
        [entrypoint, ...entrypoint.getDeepDependencySet()].forEach(resource => {
          if (resourceIndices.has(resource.index) && resourceIndices.get(resource.index) !== resource) {
            const err = new Error(`Index collision (${resource.index}): '${resourceIndices.get(resource.index).moduleId}' and '${resource.moduleId}'`);

            if (C.env === 'test') {
              throw err;
            } else {
              scopeLogger.warn(err);
            }
          }

          resourceIndices.set(resource.index, resource);
        });
      }

      await Promise.all([...changedResources.map(resource => resource.runVisitor('Complete')), factory.save()]);
      profileEnd(`Sucessfully installed '${label}'`);
    } catch (err) {
      if (!force && !err.frame) {
        err.message = ['\n\nAn error occurred while installing from cache.', '\nTry re-running your command with the --force flag.', `\n\n${err.message}`].join('');
      }

      throw err;
    } finally {// cleanup?
    }

    return entrypoint;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZXJ2ZXIvaW5zdGFsbGVyL2luZGV4LmpzIl0sIm5hbWVzIjpbIkluc3RhbGxlciIsIm9wdGlvbnMiLCJDIiwiQ29uZmlnU3RvcmUiLCJmcm9tIiwic2NvcGVMb2dnZXIiLCJsb2dnZXIiLCJjaGlsZCIsIm5hbWUiLCJzY29wZUtleSIsImZhY3RvcnkiLCJSZXNvdXJjZUZhY3RvcnkiLCJPYmplY3QiLCJhc3NpZ24iLCJpbnN0YWxsIiwiZm9yY2UiLCJpbnRlcmNlcHRvciIsIm5vb3AiLCJwcm9maWxlRW5kIiwicHJvZmlsZSIsImxhYmVsIiwiUGF0aCIsImJhc2VuYW1lIiwicmVzb2x2ZSIsImVudHJ5IiwiZW50cnlwb2ludCIsImluZm8iLCJmYWlsZWQiLCJyZXNldCIsImxvYWQiLCJjaGFuZ2VkUmVzb3VyY2VzIiwidHJhdmVyc2UiLCJyZXNvdXJjZSIsInJlc3VsdCIsInB1c2giLCJ0ZXN0IiwiX19kaXJuYW1lIiwicmVzb3VyY2VJbmRpY2VzIiwiTWFwIiwiZ2V0RGVlcERlcGVuZGVuY3lTZXQiLCJmb3JFYWNoIiwiaGFzIiwiaW5kZXgiLCJnZXQiLCJlcnIiLCJFcnJvciIsIm1vZHVsZUlkIiwiZW52Iiwid2FybiIsInNldCIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJydW5WaXNpdG9yIiwic2F2ZSIsImZyYW1lIiwibWVzc2FnZSIsImpvaW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVlLFNBQVNBLFNBQVQsQ0FBbUJDLE9BQW5CLEVBQTRCO0FBQzFDLFFBQU1DLENBQUMsR0FBR0MscUJBQVlDLElBQVosQ0FBaUJILE9BQWpCLENBQVY7O0FBQ0EsUUFBTUksV0FBVyxHQUFHQyxnQkFBT0MsS0FBUCxDQUFhO0FBQUVDLElBQUFBLElBQUksRUFBRU4sQ0FBQyxDQUFDTztBQUFWLEdBQWIsQ0FBcEI7O0FBQ0EsUUFBTUMsT0FBTyxHQUFHLElBQUlDLGlCQUFKLENBQW9C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LENBQUNZLE9BQVEsRUFITixFQUlaQyxJQUpZLENBSVAsRUFKTyxDQUFkO0FBS0E7O0FBQ0QsWUFBTWIsR0FBTjtBQUNBLEtBdERELFNBc0RVLENBQ1Q7QUFDQTs7QUFFRCxXQUFPbkIsVUFBUDtBQUNBLEdBcEVEO0FBcUVBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCBub29wIGZyb20gJy4uLy4uL2xpYi9oZWxwZXJzL25vb3AnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuLi8uLi9saWIvbG9nZ2VyJztcbmltcG9ydCBDb25maWdTdG9yZSBmcm9tICcuLi8uLi9saWIvY29uZmlnLXN0b3JlJztcbmltcG9ydCBSZXNvdXJjZUZhY3RvcnkgZnJvbSAnLi9yZXNvdXJjZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEluc3RhbGxlcihvcHRpb25zKSB7XG5cdGNvbnN0IEMgPSBDb25maWdTdG9yZS5mcm9tKG9wdGlvbnMpO1xuXHRjb25zdCBzY29wZUxvZ2dlciA9IGxvZ2dlci5jaGlsZCh7IG5hbWU6IEMuc2NvcGVLZXkgfSk7XG5cdGNvbnN0IGZhY3RvcnkgPSBuZXcgUmVzb3VyY2VGYWN0b3J5KE9iamVjdC5hc3NpZ24oQywgeyBsb2dnZXI6IHNjb3BlTG9nZ2VyIH0pKTtcblxuXHRyZXR1cm4gYXN5bmMgZnVuY3Rpb24gaW5zdGFsbChmb3JjZSwgaW50ZXJjZXB0b3IgPSBub29wKSB7XG5cdFx0Y29uc3QgcHJvZmlsZUVuZCA9IHNjb3BlTG9nZ2VyLnByb2ZpbGUoKTtcblx0XHRjb25zdCBsYWJlbCA9IFBhdGguYmFzZW5hbWUoUGF0aC5yZXNvbHZlKEMuZW50cnkpKTtcblx0XHRsZXQgZW50cnlwb2ludDtcblxuXHRcdHNjb3BlTG9nZ2VyLmluZm8oYEluc3RhbGxpbmcgJyR7bGFiZWx9Jy4uLmApO1xuXG5cdFx0ZmFjdG9yeS5mYWlsZWQgPSBmYWxzZTtcblxuXHRcdHRyeSB7XG5cdFx0XHRpZiAoZm9yY2UpIHtcblx0XHRcdFx0YXdhaXQgZmFjdG9yeS5yZXNldCgpO1xuXHRcdFx0fVxuXG5cdFx0XHRlbnRyeXBvaW50ID0gYXdhaXQgZmFjdG9yeS5sb2FkKCk7XG5cblx0XHRcdGNvbnN0IGNoYW5nZWRSZXNvdXJjZXMgPSBbXTtcblxuXHRcdFx0YXdhaXQgZW50cnlwb2ludC50cmF2ZXJzZShhc3luYyByZXNvdXJjZSA9PiB7XG5cdFx0XHRcdGNvbnN0IHJlc3VsdCA9IChhd2FpdCBpbnRlcmNlcHRvcihyZXNvdXJjZSkpICE9PSBmYWxzZTtcblx0XHRcdFx0aWYgKHJlc3VsdCkge1xuXHRcdFx0XHRcdGNoYW5nZWRSZXNvdXJjZXMucHVzaChyZXNvdXJjZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdH0pO1xuXG5cdFx0XHRpZiAoIS9ub2RlX21vZHVsZXNcXC8vLnRlc3QoX19kaXJuYW1lKSkge1xuXHRcdFx0XHRjb25zdCByZXNvdXJjZUluZGljZXMgPSBuZXcgTWFwKCk7XG5cdFx0XHRcdFtlbnRyeXBvaW50LCAuLi5lbnRyeXBvaW50LmdldERlZXBEZXBlbmRlbmN5U2V0KCldLmZvckVhY2gocmVzb3VyY2UgPT4ge1xuXHRcdFx0XHRcdGlmIChcblx0XHRcdFx0XHRcdHJlc291cmNlSW5kaWNlcy5oYXMocmVzb3VyY2UuaW5kZXgpICYmXG5cdFx0XHRcdFx0XHRyZXNvdXJjZUluZGljZXMuZ2V0KHJlc291cmNlLmluZGV4KSAhPT0gcmVzb3VyY2Vcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdGNvbnN0IGVyciA9IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0YEluZGV4IGNvbGxpc2lvbiAoJHtyZXNvdXJjZS5pbmRleH0pOiAnJHtcblx0XHRcdFx0XHRcdFx0XHRyZXNvdXJjZUluZGljZXMuZ2V0KHJlc291cmNlLmluZGV4KS5tb2R1bGVJZFxuXHRcdFx0XHRcdFx0XHR9JyBhbmQgJyR7cmVzb3VyY2UubW9kdWxlSWR9J2Bcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRpZiAoQy5lbnYgPT09ICd0ZXN0Jykge1xuXHRcdFx0XHRcdFx0XHR0aHJvdyBlcnI7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRzY29wZUxvZ2dlci53YXJuKGVycik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJlc291cmNlSW5kaWNlcy5zZXQocmVzb3VyY2UuaW5kZXgsIHJlc291cmNlKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdGF3YWl0IFByb21pc2UuYWxsKFtcblx0XHRcdFx0Li4uY2hhbmdlZFJlc291cmNlcy5tYXAocmVzb3VyY2UgPT4gcmVzb3VyY2UucnVuVmlzaXRvcignQ29tcGxldGUnKSksXG5cdFx0XHRcdGZhY3Rvcnkuc2F2ZSgpXG5cdFx0XHRdKTtcblxuXHRcdFx0cHJvZmlsZUVuZChgU3VjZXNzZnVsbHkgaW5zdGFsbGVkICcke2xhYmVsfSdgKTtcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdGlmICghZm9yY2UgJiYgIWVyci5mcmFtZSkge1xuXHRcdFx0XHRlcnIubWVzc2FnZSA9IFtcblx0XHRcdFx0XHQnXFxuXFxuQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgaW5zdGFsbGluZyBmcm9tIGNhY2hlLicsXG5cdFx0XHRcdFx0J1xcblRyeSByZS1ydW5uaW5nIHlvdXIgY29tbWFuZCB3aXRoIHRoZSAtLWZvcmNlIGZsYWcuJyxcblx0XHRcdFx0XHRgXFxuXFxuJHtlcnIubWVzc2FnZX1gXG5cdFx0XHRcdF0uam9pbignJyk7XG5cdFx0XHR9XG5cdFx0XHR0aHJvdyBlcnI7XG5cdFx0fSBmaW5hbGx5IHtcblx0XHRcdC8vIGNsZWFudXA/XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVudHJ5cG9pbnQ7XG5cdH07XG59XG4iXX0=