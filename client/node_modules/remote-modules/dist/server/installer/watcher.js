"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _chokidar = require("chokidar");

var _defineProperties = _interopRequireDefault(require("../../lib/helpers/defineProperties"));

var _identity = _interopRequireDefault(require("../../lib/helpers/identity"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function aggregate(fn, combiner = _identity.default, delay) {
  const calls = new Map();
  let timerId;
  return (...args) => {
    clearTimeout(timerId);
    timerId = setTimeout(() => {
      fn([...calls.values()]);
      calls.clear();
    }, delay);
    calls.set(combiner(...args), args);
  };
}

class Watcher extends _chokidar.FSWatcher {
  constructor(opts) {
    super(_objectSpread({
      ignoreInitial: true,
      persistent: true
    }, opts));

    _defineProperty(this, "scopes", new Map());

    (0, _defineProperties.default)(this, {
      ready: {
        value: false,
        writable: true
      },
      size: {
        get: () => [...this.scopes.values()].reduce((acc, {
          size
        }) => acc + size, 0)
      }
    });
    this.reset();
    this.setMaxListeners(100);
    this.once('ready', () => {
      this.ready = true;
    });
  }

  getPaths() {
    const paths = new Set();

    for (const [, scopePaths] of this.scopes) {
      for (const path of scopePaths) {
        paths.add(path);
      }
    }

    return paths;
  }

  getWatched() {
    return new Set(Object.entries(super.getWatched()).reduce((acc, [base, files]) => {
      files.forEach(file => {
        acc.push(_path.default.join(base, file));
      });
      return acc;
    }, []));
  }

  addUnwatched() {
    const watched = this.getWatched();
    this.add([...this.getPaths()].filter(path => !watched.has(path)));
  }

  start() {
    return new Promise(resolve => {
      this.addUnwatched();

      if (this.ready || this.size === 0) {
        resolve(this);
      } else {
        this.once('ready', () => resolve(this));
      }
    });
  }

  register(resource) {
    const {
      scopeKey
    } = resource.options;

    if (!this.scopes.has(scopeKey)) {
      this.scopes.set(scopeKey, new Set());
    }

    const scopePaths = this.scopes.get(scopeKey);
    [resource, ...resource.getDeepDependencySet(r => r.isNormal())].forEach(r => {
      scopePaths.add(r.origin);
    });

    if (resource.options.rcpath) {
      scopePaths.add(resource.options.rcpath);
    }
  }

  subscribe(resourceFactory, fn) {
    const wrappedFn = async events => {
      let mainResource = resourceFactory();
      const pickedEvents = [];

      for (const [type, path] of events) {
        if (path === mainResource.options.rcpath) {
          // eslint-disable-next-line no-await-in-loop
          await resourceFactory.reset();
          resourceFactory.uncache();
          mainResource = resourceFactory();
          pickedEvents.push([type, mainResource]);
        } else {
          // unwatch deleted resources
          if (type === 'unlink') {
            this.unwatch(path);
          }

          const resource = resourceFactory(path);

          if (resource && (resource.sameAs(mainResource) || resource.dependencyOf(mainResource))) {
            pickedEvents.push([type, resource]);
          }
        }
      }

      if (pickedEvents.length) {
        try {
          this.emit('beforeupdate', mainResource);
          await fn(pickedEvents);
          this.register(mainResource);
          this.addUnwatched();
          this.emit('update', mainResource);
        } catch (err) {
          if (this.listenerCount('error')) {
            this.emit('error', err);
          } else {
            throw err;
          }
        }
      }
    };

    this.register(resourceFactory());
    this.on('all:aggregated', wrappedFn);
    return () => this.removeListener('all:aggregated', wrappedFn);
  }

  close() {
    super.close();
    this.scopes.clear();
    this.removeAllListeners();
    return this;
  }

  reset() {
    this.close();
    this.subscribeAggregator = aggregate(events => this.emit('all:aggregated', events), (type, path) => `${type}:${path}`, this.options.interval);
    this.on('all', this.subscribeAggregator);
  }

}

exports.default = Watcher;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,