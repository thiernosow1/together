"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _util = require("util");

var _defineProperties = _interopRequireDefault(require("../../../../lib/helpers/defineProperties"));

var _helpers = require("../../../../lib/helpers");

var _urlBuilder = require("../../../../lib/url-builder");

var _resolver = require("../../../../lib/resolver");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class SourceContext extends Map {
  constructor(requestObject, baseDir, factory, C) {
    const {
      value: originalRequest
    } = requestObject;
    super([['dirty', false], ['error', undefined], ['external', undefined], ['force', undefined], ['request', undefined], ['resolved', undefined]]);
    (0, _defineProperties.default)(this, {
      baseDir,
      C,
      factory,
      originalRequest
    });
    this.request = requestObject.value;
    this.requestObject = requestObject;
  }

  get async() {
    return Boolean(this.requestObject.async);
  }

  get dirty() {
    return this.get('dirty');
  }

  get error() {
    return this.get('error');
  }

  get extension() {
    return this.resolved && _path.default.extname(this.origin);
  }

  get force() {
    return this.get('force');
  }

  get moduleId() {
    if (this.force !== undefined) {
      return this.force;
    }

    const {
      factory,
      origin,
      resolved,
      slug
    } = this;
    return resolved ? factory.getModuleId(slug) : origin;
  }

  get origin() {
    return this.resolved || this.originalRequest;
  }

  get packageId() {
    const {
      factory,
      moduleId,
      resolved
    } = this;
    return resolved && factory.getPackageId(moduleId);
  }

  get pid() {
    return this.factory.getPid(this.moduleId);
  }

  get request() {
    return this.get('request');
  }

  get resolved() {
    return this.get('resolved') || null;
  }

  get slug() {
    const {
      factory,
      origin,
      resolved
    } = this;
    return resolved ? factory.getSlug(origin) : origin;
  }

  get url() {
    const {
      C,
      moduleId,
      requestObject
    } = this;

    switch (true) {
      case this.isExternal():
        return moduleId;

      case requestObject.static:
        return _path.default.join(C.getRoot().server.publicPath, '@static', moduleId);

      default:
        return (0, _urlBuilder.assembleResourceURL)(C.server.publicPath, moduleId);
    }
  }

  set external(value) {
    if (this.get('external') !== value) {
      this.set('external', value);
    }
  }

  set force(value) {
    if (this.get('force') !== value) {
      this.set('force', value);
      this.request = value;
    }
  }

  set request(value) {
    if (this.get('request') !== value) {
      this.set('request', value);
      this.resolved = value;
    }
  }

  set resolved(value) {
    if (this.get('force') === undefined && this.get('resolved') !== value) {
      try {
        this.set('resolved', this.factory.resolve(value, this.baseDir));
        this.set('error', null);
      } catch (err) {
        this.set('resolved', undefined);
        this.set('error', err);
      }
    }
  }

  digest() {
    const dirty = this.get('dirty');
    this.set('dirty', false);
    return dirty;
  }

  set(key, value) {
    super.set('dirty', true);
    super.set(key, value);
  }

  isExternal() {
    return this.get('external') !== undefined ? this.get('external') : (0, _resolver.isCore)(this.resolved) || (0, _helpers.isAbsoluteURL)(this.resolved);
  }

  isNull() {
    return this.resolved === null;
  }

  isNormal() {
    return !this.isExternal() && !this.isNull();
  }

  inspect() {
    const descriptors = _objectSpread({}, Object.getOwnPropertyDescriptors(SourceContext.prototype), Object.getOwnPropertyDescriptors(this));

    const result = {};

    for (const [key, {
      value
    }] of Object.entries(descriptors)) {
      switch (true) {
        case key === 'C':
          // noop
          break;

        case key === 'error':
          result.error = this.error && this.error.message;
          break;

        case typeof value !== 'function':
          try {
            result[key] = this[key];
          } catch (err) {
            result[key] = err;
          }

          break;

        default:
          // noop
          break;
      }
    }

    return (0, _util.inspect)(result, {
      colors: true
    });
  }

}

exports.default = SourceContext;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,