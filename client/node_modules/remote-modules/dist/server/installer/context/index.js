"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isInstalledPackage = isInstalledPackage;
exports.getSlug = getSlug;
exports.getModuleId = getModuleId;
exports.getPackageId = getPackageId;
exports.getPid = getPid;
exports.getManifestPath = getManifestPath;
exports.slugToAbsolutePath = slugToAbsolutePath;
exports.default = ContextFactory;

var _path = _interopRequireDefault(require("path"));

var _url = _interopRequireDefault(require("url"));

var _util = require("util");

var _resolver = require("../../../lib/resolver");

var _helpers = require("../../../lib/helpers");

var _defineProperties = _interopRequireDefault(require("../../../lib/helpers/defineProperties"));

var _escapeRegExp = _interopRequireDefault(require("../../../lib/helpers/escapeRegExp"));

var _get = _interopRequireDefault(require("../../../lib/helpers/get"));

var _last = _interopRequireDefault(require("../../../lib/helpers/last"));

var _memoize = _interopRequireDefault(require("../../../lib/helpers/memoize"));

var _configStore = _interopRequireDefault(require("../../../lib/config-store"));

var _pid = _interopRequireDefault(require("../../../lib/helpers/pid"));

var _source = _interopRequireDefault(require("./types/source"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function isInstalledPackage(slug, moduleDirs) {
  return moduleDirs.some(dir => slug.includes(`${dir}/`));
}

function getSlug(origin, relativeTo) {
  return origin && (0, _helpers.isAbsolutePath)(origin) ? _path.default.relative(relativeTo, origin) : origin;
}

function getModuleId(slug, moduleDirs) {
  const isRelative = !(0, _resolver.isCore)(slug) && !moduleDirs.some(dir => slug.includes(`${dir}/`));

  const normalized = _path.default.relative('/', _path.default.normalize(`/${slug}`));

  const moduleDirsRegExp = new RegExp(`^(${moduleDirs.map(_escapeRegExp.default).join('|')})/`);
  return `${isRelative ? './' : ''}${normalized.replace(moduleDirsRegExp, '')}`;
}

function getPackageId(moduleId, moduleDirs) {
  if ((0, _helpers.isAbsoluteURL)(moduleId)) {
    return null;
  }

  const packageSegment = moduleDirs.reduce((result, dir) => (0, _last.default)(result.split(`${dir}/`)), moduleId);
  return packageSegment.match(/^(\.|(?:@[^/]+\/)?[^/]+)(?:\/|$)/)[1];
}

function getPid(moduleId) {
  return (0, _pid.default)(moduleId);
}

function getManifestPath(resolved) {
  return `${resolved}.manifest.js`;
}

function slugToAbsolutePath(baseDir, slug) {
  return _path.default.join(baseDir, _path.default.normalize(`/${slug}`));
}

function ContextFactory(options) {
  const C = _configStore.default.from(options);

  const cacheKeyResolver = (request, baseDir) => [(0, _get.default)(request, ['attributes']), (0, _get.default)(request, ['value']) || request, baseDir].join(':');

  const contextualResolve = (0, _memoize.default)((request, baseDir) => {
    let resolved;

    if (typeof request === 'string' && !(0, _helpers.isAbsolutePath)(request) && !(0, _helpers.isAbsoluteURL)(request)) {
      resolved = (0, _resolver.resolveSync)(_url.default.parse(request).pathname, _objectSpread({}, C.pick(['core', 'extensions', 'mainFields', 'moduleDirs', 'rootDir']), {
        baseDir: typeof baseDir === 'string' ? baseDir : C.rootDir
      }));
    } else {
      resolved = request;
    }

    return resolved;
  }, cacheKeyResolver);
  const createContext = (0, _memoize.default)((request, baseDir) => {
    // eslint-disable-next-line no-use-before-define
    const ctx = new _source.default(request, baseDir, factory, options);
    let iterations = 0;

    while (ctx.digest()) {
      C.runMiddleware('context', [ctx]);

      if (iterations > 1000) {
        throw new Error(`Exceeded max middleware iterations for '${ctx.moduleId}'`);
      }

      iterations += 1;
    }

    if (C.strict && ctx.error) {
      throw ctx.error;
    }

    return ctx;
  }, cacheKeyResolver);

  function factory(request, resolverPaths = [undefined]) {
    const requestObject = typeof request === 'string' ? {
      value: request
    } : request;

    if (!requestObject || !requestObject.value) {
      throw new Error(`Expected String or Object({ value: String }) but got '${(0, _util.inspect)(request)}'`);
    }

    if (!Array.isArray(resolverPaths)) {
      throw new Error(`Expected an array but got '${(0, _util.inspect)(resolverPaths)}'`);
    }

    let ctx;

    for (const baseDir of resolverPaths) {
      ctx = createContext(requestObject, baseDir);

      if (ctx.resolved) {
        break;
      }
    }

    if (ctx.error) {
      // Don't cache unresolvable requests
      factory.uncache({
        pid: ctx.pid
      });
    }

    return ctx;
  }

  return (0, _defineProperties.default)(factory, {
    name: 'ContextFactory',
    resolve: contextualResolve,

    safeResolve(...args) {
      try {
        return contextualResolve(...args);
      } catch (_err) {
        return null;
      }
    },

    getPid,

    getSlug(origin) {
      return getSlug(origin, C.rootDir);
    },

    getModuleId(slug, moduleDirs = C.moduleDirs) {
      return getModuleId(slug, moduleDirs);
    },

    getPackageId(moduleId, moduleDirs = C.moduleDirs) {
      return getPackageId(moduleId, moduleDirs);
    },

    isInstalledPackage(slug, moduleDirs = C.moduleDirs) {
      return isInstalledPackage(slug, moduleDirs);
    },

    uncache(query) {
      if (query) {
        for (const [key, ctx] of createContext.cache) {
          if ((0, _helpers.matches)(ctx, query)) {
            contextualResolve.cache.delete(key);
            createContext.cache.delete(key);
          }
        }
      } else {
        contextualResolve.cache.clear();
        createContext.cache.clear();
      }
    }

  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zZXJ2ZXIvaW5zdGFsbGVyL2NvbnRleHQvaW5kZXguanMiXSwibmFtZXMiOlsiaXNJbnN0YWxsZWRQYWNrYWdlIiwic2x1ZyIsIm1vZHVsZURpcnMiLCJzb21lIiwiZGlyIiwiaW5jbHVkZXMiLCJnZXRTbHVnIiwib3JpZ2luIiwicmVsYXRpdmVUbyIsIlBhdGgiLCJyZWxhdGl2ZSIsImdldE1vZHVsZUlkIiwiaXNSZWxhdGl2ZSIsIm5vcm1hbGl6ZWQiLCJub3JtYWxpemUiLCJtb2R1bGVEaXJzUmVnRXhwIiwiUmVnRXhwIiwibWFwIiwiZXNjYXBlUmVnRXhwIiwiam9pbiIsInJlcGxhY2UiLCJnZXRQYWNrYWdlSWQiLCJtb2R1bGVJZCIsInBhY2thZ2VTZWdtZW50IiwicmVkdWNlIiwicmVzdWx0Iiwic3BsaXQiLCJtYXRjaCIsImdldFBpZCIsImdldE1hbmlmZXN0UGF0aCIsInJlc29sdmVkIiwic2x1Z1RvQWJzb2x1dGVQYXRoIiwiYmFzZURpciIsIkNvbnRleHRGYWN0b3J5Iiwib3B0aW9ucyIsIkMiLCJDb25maWdTdG9yZSIsImZyb20iLCJjYWNoZUtleVJlc29sdmVyIiwicmVxdWVzdCIsImNvbnRleHR1YWxSZXNvbHZlIiwiVXJsIiwicGFyc2UiLCJwYXRobmFtZSIsInBpY2siLCJyb290RGlyIiwiY3JlYXRlQ29udGV4dCIsImN0eCIsIlNvdXJjZUNvbnRleHQiLCJmYWN0b3J5IiwiaXRlcmF0aW9ucyIsImRpZ2VzdCIsInJ1bk1pZGRsZXdhcmUiLCJFcnJvciIsInN0cmljdCIsImVycm9yIiwicmVzb2x2ZXJQYXRocyIsInVuZGVmaW5lZCIsInJlcXVlc3RPYmplY3QiLCJ2YWx1ZSIsIkFycmF5IiwiaXNBcnJheSIsInVuY2FjaGUiLCJwaWQiLCJuYW1lIiwicmVzb2x2ZSIsInNhZmVSZXNvbHZlIiwiYXJncyIsIl9lcnIiLCJxdWVyeSIsImtleSIsImNhY2hlIiwiZGVsZXRlIiwiY2xlYXIiXSwibWFwcGluZ3Mi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LEtBQXZDLEVBQThDO0FBQzdDLGNBQUksc0JBQVF4QixHQUFSLEVBQWFzQixLQUFiLENBQUosRUFBeUI7QUFDeEI3QixZQUFBQSxpQkFBaUIsQ0FBQytCLEtBQWxCLENBQXdCQyxNQUF4QixDQUErQkYsR0FBL0I7QUFDQXhCLFlBQUFBLGFBQWEsQ0FBQ3lCLEtBQWQsQ0FBb0JDLE1BQXBCLENBQTJCRixHQUEzQjtBQUNBO0FBQ0Q7QUFDRCxPQVBELE1BT087QUFDTjlCLFFBQUFBLGlCQUFpQixDQUFDK0IsS0FBbEIsQ0FBd0JFLEtBQXhCO0FBQ0EzQixRQUFBQSxhQUFhLENBQUN5QixLQUFkLENBQW9CRSxLQUFwQjtBQUNBO0FBQ0Q7O0FBbkMrQixHQUExQixDQUFQO0FBcUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgVXJsIGZyb20gJ3VybCc7XG5pbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSAndXRpbCc7XG5cbmltcG9ydCB7IGlzQ29yZSwgcmVzb2x2ZVN5bmMgfSBmcm9tICcuLi8uLi8uLi9saWIvcmVzb2x2ZXInO1xuaW1wb3J0IHsgaXNBYnNvbHV0ZVBhdGgsIGlzQWJzb2x1dGVVUkwsIG1hdGNoZXMgfSBmcm9tICcuLi8uLi8uLi9saWIvaGVscGVycyc7XG5pbXBvcnQgZGVmaW5lUHJvcGVydGllcyBmcm9tICcuLi8uLi8uLi9saWIvaGVscGVycy9kZWZpbmVQcm9wZXJ0aWVzJztcbmltcG9ydCBlc2NhcGVSZWdFeHAgZnJvbSAnLi4vLi4vLi4vbGliL2hlbHBlcnMvZXNjYXBlUmVnRXhwJztcbmltcG9ydCBnZXQgZnJvbSAnLi4vLi4vLi4vbGliL2hlbHBlcnMvZ2V0JztcbmltcG9ydCBsYXN0IGZyb20gJy4uLy4uLy4uL2xpYi9oZWxwZXJzL2xhc3QnO1xuaW1wb3J0IG1lbW9pemUgZnJvbSAnLi4vLi4vLi4vbGliL2hlbHBlcnMvbWVtb2l6ZSc7XG5pbXBvcnQgQ29uZmlnU3RvcmUgZnJvbSAnLi4vLi4vLi4vbGliL2NvbmZpZy1zdG9yZSc7XG5pbXBvcnQgY2FsY3VsYXRlUElEIGZyb20gJy4uLy4uLy4uL2xpYi9oZWxwZXJzL3BpZCc7XG5pbXBvcnQgU291cmNlQ29udGV4dCBmcm9tICcuL3R5cGVzL3NvdXJjZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0luc3RhbGxlZFBhY2thZ2Uoc2x1ZywgbW9kdWxlRGlycykge1xuXHRyZXR1cm4gbW9kdWxlRGlycy5zb21lKGRpciA9PiBzbHVnLmluY2x1ZGVzKGAke2Rpcn0vYCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2x1ZyhvcmlnaW4sIHJlbGF0aXZlVG8pIHtcblx0cmV0dXJuIG9yaWdpbiAmJiBpc0Fic29sdXRlUGF0aChvcmlnaW4pID8gUGF0aC5yZWxhdGl2ZShyZWxhdGl2ZVRvLCBvcmlnaW4pIDogb3JpZ2luO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9kdWxlSWQoc2x1ZywgbW9kdWxlRGlycykge1xuXHRjb25zdCBpc1JlbGF0aXZlID0gIWlzQ29yZShzbHVnKSAmJiAhbW9kdWxlRGlycy5zb21lKGRpciA9PiBzbHVnLmluY2x1ZGVzKGAke2Rpcn0vYCkpO1xuXHRjb25zdCBub3JtYWxpemVkID0gUGF0aC5yZWxhdGl2ZSgnLycsIFBhdGgubm9ybWFsaXplKGAvJHtzbHVnfWApKTtcblx0Y29uc3QgbW9kdWxlRGlyc1JlZ0V4cCA9IG5ldyBSZWdFeHAoYF4oJHttb2R1bGVEaXJzLm1hcChlc2NhcGVSZWdFeHApLmpvaW4oJ3wnKX0pL2ApO1xuXHRyZXR1cm4gYCR7aXNSZWxhdGl2ZSA/ICcuLycgOiAnJ30ke25vcm1hbGl6ZWQucmVwbGFjZShtb2R1bGVEaXJzUmVnRXhwLCAnJyl9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFBhY2thZ2VJZChtb2R1bGVJZCwgbW9kdWxlRGlycykge1xuXHRpZiAoaXNBYnNvbHV0ZVVSTChtb2R1bGVJZCkpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXHRjb25zdCBwYWNrYWdlU2VnbWVudCA9IG1vZHVsZURpcnMucmVkdWNlKFxuXHRcdChyZXN1bHQsIGRpcikgPT4gbGFzdChyZXN1bHQuc3BsaXQoYCR7ZGlyfS9gKSksXG5cdFx0bW9kdWxlSWRcblx0KTtcblx0cmV0dXJuIHBhY2thZ2VTZWdtZW50Lm1hdGNoKC9eKFxcLnwoPzpAW14vXStcXC8pP1teL10rKSg/OlxcL3wkKS8pWzFdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGlkKG1vZHVsZUlkKSB7XG5cdHJldHVybiBjYWxjdWxhdGVQSUQobW9kdWxlSWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWFuaWZlc3RQYXRoKHJlc29sdmVkKSB7XG5cdHJldHVybiBgJHtyZXNvbHZlZH0ubWFuaWZlc3QuanNgO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2x1Z1RvQWJzb2x1dGVQYXRoKGJhc2VEaXIsIHNsdWcpIHtcblx0cmV0dXJuIFBhdGguam9pbihiYXNlRGlyLCBQYXRoLm5vcm1hbGl6ZShgLyR7c2x1Z31gKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENvbnRleHRGYWN0b3J5KG9wdGlvbnMpIHtcblx0Y29uc3QgQyA9IENvbmZpZ1N0b3JlLmZyb20ob3B0aW9ucyk7XG5cdGNvbnN0IGNhY2hlS2V5UmVzb2x2ZXIgPSAocmVxdWVzdCwgYmFzZURpcikgPT5cblx0XHRbZ2V0KHJlcXVlc3QsIFsnYXR0cmlidXRlcyddKSwgZ2V0KHJlcXVlc3QsIFsndmFsdWUnXSkgfHwgcmVxdWVzdCwgYmFzZURpcl0uam9pbignOicpO1xuXG5cdGNvbnN0IGNvbnRleHR1YWxSZXNvbHZlID0gbWVtb2l6ZSgocmVxdWVzdCwgYmFzZURpcikgPT4ge1xuXHRcdGxldCByZXNvbHZlZDtcblx0XHRpZiAodHlwZW9mIHJlcXVlc3QgPT09ICdzdHJpbmcnICYmICFpc0Fic29sdXRlUGF0aChyZXF1ZXN0KSAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0KSkge1xuXHRcdFx0cmVzb2x2ZWQgPSByZXNvbHZlU3luYyhVcmwucGFyc2UocmVxdWVzdCkucGF0aG5hbWUsIHtcblx0XHRcdFx0Li4uQy5waWNrKFsnY29yZScsICdleHRlbnNpb25zJywgJ21haW5GaWVsZHMnLCAnbW9kdWxlRGlycycsICdyb290RGlyJ10pLFxuXHRcdFx0XHRiYXNlRGlyOiB0eXBlb2YgYmFzZURpciA9PT0gJ3N0cmluZycgPyBiYXNlRGlyIDogQy5yb290RGlyXG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzb2x2ZWQgPSByZXF1ZXN0O1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzb2x2ZWQ7XG5cdH0sIGNhY2hlS2V5UmVzb2x2ZXIpO1xuXG5cdGNvbnN0IGNyZWF0ZUNvbnRleHQgPSBtZW1vaXplKChyZXF1ZXN0LCBiYXNlRGlyKSA9PiB7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG5cdFx0Y29uc3QgY3R4ID0gbmV3IFNvdXJjZUNvbnRleHQocmVxdWVzdCwgYmFzZURpciwgZmFjdG9yeSwgb3B0aW9ucyk7XG5cblx0XHRsZXQgaXRlcmF0aW9ucyA9IDA7XG5cdFx0d2hpbGUgKGN0eC5kaWdlc3QoKSkge1xuXHRcdFx0Qy5ydW5NaWRkbGV3YXJlKCdjb250ZXh0JywgW2N0eF0pO1xuXHRcdFx0aWYgKGl0ZXJhdGlvbnMgPiAxMDAwKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgRXhjZWVkZWQgbWF4IG1pZGRsZXdhcmUgaXRlcmF0aW9ucyBmb3IgJyR7Y3R4Lm1vZHVsZUlkfSdgKTtcblx0XHRcdH1cblx0XHRcdGl0ZXJhdGlvbnMgKz0gMTtcblx0XHR9XG5cblx0XHRpZiAoQy5zdHJpY3QgJiYgY3R4LmVycm9yKSB7XG5cdFx0XHR0aHJvdyBjdHguZXJyb3I7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGN0eDtcblx0fSwgY2FjaGVLZXlSZXNvbHZlcik7XG5cblx0ZnVuY3Rpb24gZmFjdG9yeShyZXF1ZXN0LCByZXNvbHZlclBhdGhzID0gW3VuZGVmaW5lZF0pIHtcblx0XHRjb25zdCByZXF1ZXN0T2JqZWN0ID0gdHlwZW9mIHJlcXVlc3QgPT09ICdzdHJpbmcnID8geyB2YWx1ZTogcmVxdWVzdCB9IDogcmVxdWVzdDtcblx0XHRpZiAoIXJlcXVlc3RPYmplY3QgfHwgIXJlcXVlc3RPYmplY3QudmFsdWUpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgU3RyaW5nIG9yIE9iamVjdCh7IHZhbHVlOiBTdHJpbmcgfSkgYnV0IGdvdCAnJHtpbnNwZWN0KHJlcXVlc3QpfSdgKTtcblx0XHR9XG5cdFx0aWYgKCFBcnJheS5pc0FycmF5KHJlc29sdmVyUGF0aHMpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGFuIGFycmF5IGJ1dCBnb3QgJyR7aW5zcGVjdChyZXNvbHZlclBhdGhzKX0nYCk7XG5cdFx0fVxuXHRcdGxldCBjdHg7XG5cdFx0Zm9yIChjb25zdCBiYXNlRGlyIG9mIHJlc29sdmVyUGF0aHMpIHtcblx0XHRcdGN0eCA9IGNyZWF0ZUNvbnRleHQocmVxdWVzdE9iamVjdCwgYmFzZURpcik7XG5cdFx0XHRpZiAoY3R4LnJlc29sdmVkKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoY3R4LmVycm9yKSB7XG5cdFx0XHQvLyBEb24ndCBjYWNoZSB1bnJlc29sdmFibGUgcmVxdWVzdHNcblx0XHRcdGZhY3RvcnkudW5jYWNoZSh7IHBpZDogY3R4LnBpZCB9KTtcblx0XHR9XG5cdFx0cmV0dXJuIGN0eDtcblx0fVxuXG5cdHJldHVybiBkZWZpbmVQcm9wZXJ0aWVzKGZhY3RvcnksIHtcblx0XHRuYW1lOiAnQ29udGV4dEZhY3RvcnknLFxuXHRcdHJlc29sdmU6IGNvbnRleHR1YWxSZXNvbHZlLFxuXHRcdHNhZmVSZXNvbHZlKC4uLmFyZ3MpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0dWFsUmVzb2x2ZSguLi5hcmdzKTtcblx0XHRcdH0gY2F0Y2ggKF9lcnIpIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRnZXRQaWQsXG5cdFx0Z2V0U2x1ZyhvcmlnaW4pIHtcblx0XHRcdHJldHVybiBnZXRTbHVnKG9yaWdpbiwgQy5yb290RGlyKTtcblx0XHR9LFxuXHRcdGdldE1vZHVsZUlkKHNsdWcsIG1vZHVsZURpcnMgPSBDLm1vZHVsZURpcnMpIHtcblx0XHRcdHJldHVybiBnZXRNb2R1bGVJZChzbHVnLCBtb2R1bGVEaXJzKTtcblx0XHR9LFxuXHRcdGdldFBhY2thZ2VJZChtb2R1bGVJZCwgbW9kdWxlRGlycyA9IEMubW9kdWxlRGlycykge1xuXHRcdFx0cmV0dXJuIGdldFBhY2thZ2VJZChtb2R1bGVJZCwgbW9kdWxlRGlycyk7XG5cdFx0fSxcblx0XHRpc0luc3RhbGxlZFBhY2thZ2Uoc2x1ZywgbW9kdWxlRGlycyA9IEMubW9kdWxlRGlycykge1xuXHRcdFx0cmV0dXJuIGlzSW5zdGFsbGVkUGFja2FnZShzbHVnLCBtb2R1bGVEaXJzKTtcblx0XHR9LFxuXHRcdHVuY2FjaGUocXVlcnkpIHtcblx0XHRcdGlmIChxdWVyeSkge1xuXHRcdFx0XHRmb3IgKGNvbnN0IFtrZXksIGN0eF0gb2YgY3JlYXRlQ29udGV4dC5jYWNoZSkge1xuXHRcdFx0XHRcdGlmIChtYXRjaGVzKGN0eCwgcXVlcnkpKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0dWFsUmVzb2x2ZS5jYWNoZS5kZWxldGUoa2V5KTtcblx0XHRcdFx0XHRcdGNyZWF0ZUNvbnRleHQuY2FjaGUuZGVsZXRlKGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb250ZXh0dWFsUmVzb2x2ZS5jYWNoZS5jbGVhcigpO1xuXHRcdFx0XHRjcmVhdGVDb250ZXh0LmNhY2hlLmNsZWFyKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn1cbiJdfQ==