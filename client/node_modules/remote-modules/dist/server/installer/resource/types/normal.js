"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _url = _interopRequireDefault(require("url"));

var _objectHash = _interopRequireDefault(require("object-hash"));

var _context = require("../../context");

var _helpers = require("../../../../lib/helpers");

var _fs = require("../../../../lib/helpers/fs");

var _defineProperties = _interopRequireDefault(require("../../../../lib/helpers/defineProperties"));

var _get = _interopRequireDefault(require("../../../../lib/helpers/get"));

var _noop = _interopRequireDefault(require("../../../../lib/helpers/noop"));

var _once = _interopRequireDefault(require("../../../../lib/helpers/once"));

var _pick = _interopRequireDefault(require("../../../../lib/helpers/pick"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class NormalResource {
  constructor({
    ctx,
    adapter,
    resourceFactory,
    contextFactory,
    unionFactory,
    logger,
    options: _options
  }) {
    _defineProperty(this, "size", -1);

    _defineProperty(this, "sourceChecksum", null);

    _defineProperty(this, "optionsChecksum", null);

    _defineProperty(this, "getOptionsChecksum", (0, _once.default)(() => {
      const {
        define,
        provide
      } = this.mutations;

      const summableOptions = _objectSpread({}, (0, _helpers.omit)(this.options, ['watch']), {
        define: (0, _helpers.mapObject)(define, (_, key) => this.options.define[key]),
        provide: (0, _helpers.mapObject)(provide, (_, key) => this.options.provide[key])
      });

      return (0, _objectHash.default)(summableOptions, {
        algorithm: 'md5'
      });
    }));

    _defineProperty(this, "getSourceChecksum", (0, _once.default)(async () => {
      const stats = await (0, _fs.statAsync)(this.origin);
      const pickedStats = (0, _pick.default)(stats, ['ctime', 'mtime', 'ino', 'size']);
      return (0, _objectHash.default)(pickedStats, {
        algorithm: 'md5'
      });
    }));

    _defineProperty(this, "getBabelrc", (0, _once.default)(() => {
      let babelrc = (0, _get.default)(this, ['options', 'babel', 'babelrc']);

      if (babelrc !== false && !this.isInstalledPackage()) {
        babelrc = this.contextFactory.safeResolve('.babelrc', this.getOriginDir());
      }

      return babelrc || undefined;
    }));

    _defineProperty(this, "getBabelOptions", (() => {
      let called;
      return (0, _defineProperties.default)(() => {
        // Make sure babel options are only applied once
        const options = called ? {} : _objectSpread({
          extends: this.getBabelrc()
        }, this.options.babel);
        called = true;
        return options;
      }, {
        clear: () => {
          called = false;
        }
      });
    })());

    _defineProperty(this, "hydrate", (0, _once.default)((_ref) => {
      let {
        resolverPaths
      } = _ref,
          other = _objectWithoutProperties(_ref, ["resolverPaths"]);

      const source = Array.isArray(other.source) ? Buffer.from(other.source) : other.source;
      const output = (Array.isArray(other.output) ? Buffer.from(other.output) : other.output) || source;
      Object.assign(this, (0, _helpers.omit)(other, ['output', 'source', 'requests']), {
        output,
        source
      });
      resolverPaths.forEach(rel => {
        this.resolverPaths.add(_path.default.join(this.options.rootDir, rel));
      });
      return this;
    }));

    let _source;

    (0, _defineProperties.default)(this, {
      resourceFactory,
      contextFactory,
      unionFactory,
      logger,
      options: _options,
      adapter,
      dependencies: new Map(),
      dependents: new Map(),
      requests: new Map(),
      resolverPaths: new Set(),
      async: {
        enumerable: true,
        writable: true
      },
      union: {
        writable: true
      },
      dirty: {
        value: false,
        writable: true
      },
      error: {
        writable: true
      },
      getBabelrc: {
        writable: true
      },
      getSourceChecksum: {
        writable: true
      },
      getOptionsChecksum: {
        writable: true
      },
      hydrate: {
        writable: true
      },
      index: {
        enumerable: true,
        writable: true
      },
      loaded: {
        value: false,
        writable: true
      },
      mutations: {
        value: {
          define: {},
          provide: {}
        },
        writable: true
      },
      output: {
        writable: true
      },
      failed: {
        get: () => resourceFactory.failed,
        set: value => {
          // eslint-disable-next-line no-param-reassign
          resourceFactory.failed = value;
        }
      },
      source: {
        get: () => _source,
        set: value => {
          if (value !== undefined) {
            _source = value;
            this.size = Buffer.byteLength(value);
          }
        }
      },
      isNormal: () => resourceFactory.isNormal(this),
      isExternal: () => resourceFactory.isExternal(this),
      isNull: () => resourceFactory.isNull(this),
      isInstalledPackage: () => contextFactory.isInstalledPackage(this.slug)
    });
    Object.assign(this, (0, _pick.default)(ctx, ['error', 'moduleId', 'origin', 'packageId', 'pid', 'slug']));
  }

  isOrphaned() {
    return this.dependents.size === 0 && !this.sameAs(this.resourceFactory());
  }
  /**
   * Sets whether the resource was requested asynchronously.
   * True if ALL requests are async, false otherwise.
   * Can only change from:
   *	1. undefined => true
   *	2. undefined => false
   *	3. true => false
   */


  setAsync(value) {
    if (this.async === undefined || this.async && !value) {
      this.async = Boolean(value);
    }
  }

  addToUnion(id, options) {
    if ((0, _get.default)(this, ['union', 'id']) !== id) {
      this.removeFromUnion();
      this.union = this.unionFactory(id, {
        options: _objectSpread({}, this.options, options),
        writer: this.adapter.writer
      });
      this.union.add(this);
    }
  }

  removeFromUnion() {
    if (this.union) {
      this.union.delete(this);
      this.union = null;
    }
  }

  markDirty(history = new Set([this.pid])) {
    this.dirty = true;
    this.loaded = false;
    this.sourceChecksum = null;
    this.getSourceChecksum.clear();
    this.getBabelOptions.clear();
    this.dependents.forEach(resource => {
      if (!history.has(resource.pid)) {
        history.add(resource.pid);
        resource.markDirty(history);
      }
    });
    this.dependencies.forEach(resource => {
      // eslint-disable-next-line no-param-reassign
      resource.index = undefined;
    });
    this.contextFactory.uncache({
      origin: this.origin
    });

    if (this.union) {
      this.union.reset(this);
    }
  }

  getResolverPaths() {
    return [this.getOriginDir(), ...this.resolverPaths];
  }

  getMeta() {
    return _objectSpread({}, (0, _pick.default)(this, ['index', 'moduleId', 'pid']), {
      outputSlug: this.getOutputSlug(),
      type: this.adapter.outputType
    });
  }

  getOriginDir() {
    return _path.default.dirname(this.origin);
  }

  getAssetId() {
    return this.union ? this.union.getAssetId(this) : this.getOutputSlug();
  }

  getOutputSlug() {
    const {
      adapter,
      slug
    } = this;
    const {
      extension
    } = adapter.writer;

    const ext = _path.default.extname(slug);

    return ext && extension && !slug.endsWith(extension) ? `${slug}${extension}` : slug;
  }

  getOutputPath() {
    return (0, _context.slugToAbsolutePath)(this.options.outputDir, this.getOutputSlug());
  }

  getOutputDir() {
    return _path.default.dirname(this.getOutputPath());
  }

  isPristineOptions() {
    return this.optionsChecksum === this.getOptionsChecksum();
  }

  async isPristineSource() {
    return this.sourceChecksum === (await this.getSourceChecksum());
  }

  isPristineSelf() {
    return !this.dirty && this.isPristineOptions() && this.isPristineSource();
  }

  async isPristine() {
    let result;

    for (const resource of [this, ...this.getDeepDependencySet(undefined, true)]) {
      // It turns out this is ~2x faster than Promise.all
      // eslint-disable-next-line no-await-in-loop
      result = await resource.isPristineSelf();

      if (!result) {
        break;
      }
    }

    return result;
  }

  async read() {
    if (!(await this.isPristineSource())) {
      this.source = await this.adapter.reader.apply(this);
    }

    this.sourceChecksum = await this.getSourceChecksum();
  }

  write() {
    return this.union.write();
  }

  async runVisitor(name, fn = _noop.default) {
    if (!this.failed) {
      try {
        await this.adapter.runVisitor(this, [name, 'pre']);
        await fn();
        await this.adapter.runVisitor(this, [name, 'post']);
      } catch (err) {
        this.failed = true;
        this.logger.error(`Resource '${this.moduleId}' failed on visitor '${name}'`);
        throw err;
      }
    }
  }

  async traverse(interceptor, history = new Set([this.pid])) {
    const requestProcessors = [];
    let shouldWrite;

    if (!this.union) {
      this.addToUnion(this.slug);
    }

    if (await this.isPristine()) {
      this.logger.debug(`Loaded '${this.moduleId}' from cache`);
      this.dependencies.forEach(resource => {
        if (!history.has(resource.pid)) {
          history.add(resource.pid);
          requestProcessors.push(() => resource.traverse(interceptor, history));
        }
      }); // eslint-disable-next-line no-cond-assign
    } else if (shouldWrite = await interceptor(this)) {
      const {
        adapter
      } = this;
      this.logger.info(`Traverse '${this.moduleId}'`);
      this.optionsChecksum = this.getOptionsChecksum();
      adapter.parser.init(this.slug, this.origin, _url.default.resolve(`${this.options.server.uri}/`, '_/'));
      await this.runVisitor('Read', () => this.read());
      this.output = this.source;
      await this.runVisitor('Parse', () => {
        adapter.parser.load(this.output);
      });
      await this.runVisitor('Requests', async () => {
        const removedDependencies = new Map([...this.dependencies]);
        this.dependencies.clear();
        this.requests.clear();
        adapter.parser.getRequests();
        adapter.parser.requests.forEach(requestObject => {
          const resource = this.resourceFactory(requestObject, this);
          this.addDependency(requestObject, resource);

          if (!history.has(resource.pid)) {
            history.add(resource.pid);
            requestProcessors.push(() => resource.traverse(interceptor, history));
          }

          removedDependencies.delete(resource.pid);
        }); // Clean up removed resource dependents

        removedDependencies.forEach(resource => {
          this.removeDependency(resource);
        });
      });
      await this.runVisitor('Generate', () => {
        this.generate();
      });
      this.output = adapter.parser.output;
    }

    if (requestProcessors.length) {
      await Promise.all(requestProcessors.map(fn => fn()));
    }

    this.loaded = true;
    this.dirty = false;

    if (shouldWrite) {
      await this.runVisitor('Write', () => this.write());
    }
  }

  applyMutations() {
    // Reset mutations objects
    this.mutations.define = {};
    this.mutations.provide = {};
    Object.entries(this.options.define).forEach(([key, value]) => {
      this.define(key, value);
    });
    Object.entries(this.options.provide).forEach(([key, value]) => {
      this.provide(key, value);
    });
    this.getOptionsChecksum.clear();
    this.optionsChecksum = this.getOptionsChecksum();
  }

  define(key, value) {
    const query = `
			// Program [(
				// ${this.adapter.parser.buildQuery(key)}
			) && !((
				// AssignmentExpression [
					/:left ${this.adapter.parser.buildQuery(key)}
				]
			) || (
				// ImportDeclaration // ${this.adapter.parser.buildQuery(key)}
			) || ${// FIXME: why doesn't this work without '... || false'?
    false})]
		`;

    if (this.adapter.parser.hasNode(query)) {
      this.mutations.define[key] = value;
    }
  }

  provide(key, value) {
    const {
      adapter,
      mutations
    } = this; // Make sure the provide key is referenced but not declared or assigned

    const query = `
			// Program [(
				// ${adapter.parser.buildQuery(key)}
			) && !((
				// VariableDeclarator [
					/:id ${adapter.parser.buildQuery(key)}
				]
			) || (
				// FunctionDeclaration [
					/:id ${adapter.parser.buildQuery(key)}
				]
			) || (
				// AssignmentExpression [
					/:left ${adapter.parser.buildQuery(key)}
				]
			) || (
				// ImportDeclaration // ${adapter.parser.buildQuery(key)}
			))]
		`;

    if (adapter.parser.hasNode(query)) {
      const ast = adapter.parser.parse(String(value), {
        allowImportExportEverywhere: true,
        allowReturnOutsideFunction: true,
        allowSuperOutsideMethod: true
      });
      const [importDeclaration] = adapter.parser.runQuery('// ImportDeclaration', ast);

      if (importDeclaration && !this.sameAs(importDeclaration.source.value)) {
        mutations.provide[key] = (0, _defineProperties.default)(importDeclaration, {
          toJSON: () => value
        });
      } else {
        mutations.provide[key] = String(value);
      }
    }
  }

  transform(options) {
    return this.adapter.parser.transform(this, options);
  }

  generate(options) {
    return this.adapter.parser.generate(this, options);
  }

  compress(options) {
    return this.adapter.parser.compress(this, options);
  }

  addDependency(requestObject, resource) {
    const {
      dependencies,
      requests
    } = this;

    if (!requests.has(requestObject.key)) {
      requests.set(requestObject.key, _objectSpread({}, requestObject, {
        pid: resource.pid
      }));
    }

    if (!dependencies.has(resource.pid)) {
      dependencies.set(resource.pid, resource);
    }

    if (!resource.dependents.has(this.pid)) {
      resource.dependents.set(this.pid, this);
    }
  }

  removeDependency(resource) {
    resource.dependents.delete(this.pid);

    if (resource.isOrphaned()) {
      if (this.union) {
        this.union.delete(resource);
      }

      resource.dependencies.forEach(dependency => {
        resource.removeDependency(dependency);
      });
    }
  }

  sameAs(request) {
    return Boolean(request && this.resourceFactory(request, this).pid === this.pid);
  }

  dependencyOf(request, history = new Set([this.pid])) {
    const resource = this.resourceFactory(request, this);
    let result = this.dependents.has(resource.pid);

    if (!result) {
      for (const [, dependent] of this.dependents) {
        if (!history.has(dependent.pid)) {
          history.add(dependent.pid);
          result = dependent.dependencyOf(resource, history);

          if (result) {
            break;
          }
        }
      }
    }

    return result;
  }

  getDeepDependencySet(filter, dangerous, acc = new Set()) {
    if (!dangerous && !this.loaded) {
      throw new Error('Cannot guarantee a full dependency set before the entire tree is loaded');
    }

    const childDependencyGetters = [];

    for (const [, request] of this.requests) {
      const resource = this.dependencies.get(request.pid);

      if (!filter || filter(resource, request)) {
        if (acc.has(resource)) {
          acc.delete(resource);
        } else {
          childDependencyGetters.push(() => resource.getDeepDependencySet(filter, dangerous, acc));
        }

        acc.add(resource);
      }
    }

    for (const fn of childDependencyGetters) {
      fn();
    }

    return acc;
  }

  getDependenciesByRequest(filter = () => true) {
    const resources = new Map();

    for (const [, request] of this.requests) {
      const resource = this.dependencies.get(request.pid);

      if (filter(resource)) {
        resources.set(request.value, resource);
      }
    }

    return resources;
  }

  getRequestMap(filter) {
    const requestMap = this.getDependenciesByRequest(filter);

    for (const [key, resource] of requestMap) {
      switch (true) {
        case resource.isExternal():
          requestMap.set(key, resource.moduleId);
          break;

        case resource.isNull():
          requestMap.set(key, null);
          break;

        default:
          requestMap.set(key, resource.pid);
          break;
      }
    }

    return requestMap;
  }

  toJSON() {
    const {
      contextFactory,
      mutations,
      resolverPaths
    } = this;
    const requests = [...this.requests.values()].map(req => (0, _helpers.omit)(req, ['pid']));
    const source = Buffer.isBuffer(this.source) ? Array.from(this.source) : this.source;
    const output = this.output !== this.source && (Buffer.isBuffer(this.output) ? Array.from(this.output) : this.output) || undefined;
    return _objectSpread({}, (0, _helpers.pickBy)(this, _helpers.isPrimitive), {
      origin: undefined,
      resolverPaths: [...resolverPaths].map(dir => contextFactory.getSlug(dir)),
      mutations,
      requests,
      source,
      output
    });
  }

}

exports.default = NormalResource;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,