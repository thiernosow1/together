"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _parser = _interopRequireDefault(require("./parser"));

var _ = require("../");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = C => (0, _.createAdapter)({
  outputType: 'js',
  parser: (0, _parser.default)(C),
  visitors: {
    Requests: {
      pre: resource => {
        const {
          logger
        } = C;
        const {
          moduleId
        } = resource;
        resource.applyMutations();
        resource.transform({
          plugins: [[require.resolve('../../../transforms/define'), resource.mutations], [require.resolve('../../../transforms/provide'), resource.mutations], C.get(['optimize', 'deadCode']) && 'babel-plugin-minify-dead-code-elimination', C.get(['optimize', 'constantFolding']) && 'babel-plugin-minify-constant-folding', C.get(['optimize', 'unreferenced']) && [require.resolve('../../../transforms/unreferenced'), {
            logger,
            moduleId
          }], '@babel/plugin-transform-template-literals', '@babel/plugin-transform-modules-commonjs'].filter(Boolean)
        });
      },
      post: resource => {
        const meta = resource.getMeta();
        const {
          logger,
          outputTarget
        } = C;
        resource.transform({
          plugins: [[require.resolve('../../../transforms/module'), {
            logger,
            resource
          }], [require.resolve('../../../transforms/wrap'), {
            outputTarget,
            meta
          }]]
        });
      }
    },
    Generate: {
      post: resource => {
        if (C.uglify) {
          resource.compress();
        }
      }
    },
    Complete: {
      post: resource => {
        const {
          logger
        } = C;
        logger.debug(`Generate manifest for '${resource.moduleId}'`);
        return resource.resourceFactory.generateManifest(resource);
      }
    }
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9zZXJ2ZXIvaW5zdGFsbGVyL3Jlc291cmNlL2FkYXB0ZXJzL2RlZmF1bHQvaW5kZXguanMiXSwibmFtZXMiOlsiQyIsIm91dHB1dFR5cGUiLCJwYXJzZXIiLCJ2aXNpdG9ycyIsIlJlcXVlc3RzIiwicHJlIiwicmVzb3VyY2UiLCJsb2dnZXIiLCJtb2R1bGVJZCIsImFwcGx5TXV0YXRpb25zIiwidHJhbnNmb3JtIiwicGx1Z2lucyIsInJlcXVpcmUiLCJyZXNvbHZlIiwibXV0YXRpb25zIiwiZ2V0IiwiZmlsdGVyIiwiQm9vbGVhbiIsInBvc3QiLCJtZXRhIiwiZ2V0TWV0YSIsIm91dHB1dFRhcmdldCIsIkdlbmVyYXRlIiwidWdsaWZ5IiwiY29tcHJlc3MiLCJDb21wbGV0ZSIsImRlYnVnIiwicmVzb3VyY2VGYWN0b3J5IiwiZ2VuZXJhdGVNYW5pZmVzdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7O2VBRWVBLENBQUMsSUFDZixxQkFBYztBQUNiQyxFQUFBQSxVQUFVLEVBQUUsSUFEQztBQUViQyxFQUFBQSxNQUFNLEVBQUUscUJBQWFGLENBQWIsQ0FGSztBQUdiRyxFQUFBQSxRQUFRLEVBQUU7QUFDVEMsSUFBQUEsUUFBUSxFQUFFO0FBQ1RDLE1BQUFBLEdBQUcsRUFBRUMsUUFBUSxJQUFJO0FBQ2hCLGNBQU07QUFBRUMsVUFBQUE7QUFBRixZQUFhUCxDQUFuQjtBQUNBLGNBQU07QUFBRVEsVUFBQUE7QUFBRixZQUFlRixRQUFyQjtBQUNBQSxRQUFBQSxRQUFRLENBQUNHLGNBQVQ7QUFDQUgsUUFBQUEsUUFBUSxDQUFDSSxTQUFULENBQW1CO0FBQ2xCQyxVQUFBQSxPQUFPLEVBQUUsQ0FDUixDQUFDQyxPQUFPLENBQUNDLE9BQVIsQ0FBZ0IsNEJBQWhCLENBQUQsRUFBZ0RQLFFBQVEsQ0FBQ1EsU0FBekQsQ0FEUSxFQUVSLENBQUNGLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQiw2QkFBaEIsQ0FBRCxFQUFpRFAsUUFBUSxDQUFDUSxTQUExRCxDQUZRLEVBR1JkLENBQUMsQ0FBQ2UsR0FBRixDQUFNLENBQUMsVUFBRCxFQUFhLFVBQWIsQ0FBTixLQUFtQywyQ0FIM0IsRUFJUmYsQ0FBQyxDQUFDZSxHQUFGLENBQU0sQ0FBQyxVQUFELEVBQWEsaUJBQWIsQ0FBTixLQUEwQyxzQ0FKbEMsRUFLUmYsQ0FBQyxDQUFDZSxHQUFGLENBQU0sQ0FBQyxVQUFELEVBQWEsY0FBYixDQUFOLEtBQXVDLENBQ3RDSCxPQUFPLENBQUNDLE9BQVIsQ0FBZ0Isa0NBQWhCLENBRHNDLEVBRXRDO0FBQUVOLFlBQUFBLE1BQUY7QUFBVUMsWUFBQUE7QUFBVixXQUZzQyxDQUwvQixFQVNSLDJDQVRRLEVBVVIsMENBVlEsRUFXUFEsTUFYTyxDQVdBQyxPQVhBO0FBRFMsU0FBbkI7QUFjQSxPQW5CUTtBQW9CVEMsTUFBQUEsSUFBSSxFQUFFWixRQUFRLElBQUk7QUFDakIsY0FBTWEsSUFBSSxHQUFHYixRQUFRLENBQUNjLE9BQVQsRUFBYjtBQUNBLGNBQU07QUFBRWIsVUFBQUEsTUFBRjtBQUFVYyxVQUFBQTtBQUFWLFlBQTJCckIsQ0FBakM7QUFDQU0sUUFBQUEsUUFBUSxDQUFDSSxTQUFULENBQW1CO0FBQ2xCQyxVQUFBQSxPQUFPLEVBQUUsQ0FDUixDQUFDQyxPQUFPLENBQUNDLE9BQVIsQ0FBZ0IsNEJBQWhCLENBQUQsRUFBZ0Q7QUFBRU4sWUFBQUEsTUFBRjtBQUFVRCxZQUFBQTtBQUFWLFdBQWhELENBRFEsRUFFUixDQUFDTSxPQUFPLENBQUNDLE9BQVIsQ0FBZ0IsMEJBQWhCLENBQUQsRUFBOEM7QUFBRVEsWUFBQUEsWUFBRjtBQUFnQkYsWUFBQUE7QUFBaEIsV0FBOUMsQ0FGUTtBQURTLFNBQW5CO0FBTUE7QUE3QlEsS0FERDtBQWdDVEcsSUFBQUEsUUFBUSxFQUFFO0FBQ1RKLE1BQUFBLElBQUksRUFBRVosUUFBUSxJQUFJO0FBQ2pCLFlBQUlOLENBQUMsQ0FBQ3VCLE1BQU4sRUFBYztBQUNiakIsVUFBQUEsUUFBUSxDQUFDa0IsUUFBVDtBQUNBO0FBQ0Q7QUFMUSxLQWhDRDtBQXVDVEMsSUFBQUEsUUFBUSxFQUFFO0FBQ1RQLE1BQUFBLElBQUksRUFBRVosUUFBUSxJQUFJO0FBQ2pCLGNBQU07QUFBRUMsVUFBQUE7QUFBRixZQUFhUCxDQUFuQjtBQUNBTyxRQUFBQSxNQUFNLENBQUNtQixLQUFQLENBQWMsMEJBQXlCcEIsUUFBUSxDQUFDRSxRQUFTLEdBQXpEO0FBQ0EsZUFBT0YsUUFBUSxDQUFDcUIsZUFBVCxDQUF5QkMsZ0JBQXpCLENBQTBDdEIsUUFBMUMsQ0FBUDtBQUNBO0FBTFE7QUF2Q0Q7QUFIRyxDQUFkLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlUGFyc2VyIGZyb20gJy4vcGFyc2VyJztcbmltcG9ydCB7IGNyZWF0ZUFkYXB0ZXIgfSBmcm9tICcuLi8nO1xuXG5leHBvcnQgZGVmYXVsdCBDID0+XG5cdGNyZWF0ZUFkYXB0ZXIoe1xuXHRcdG91dHB1dFR5cGU6ICdqcycsXG5cdFx0cGFyc2VyOiBjcmVhdGVQYXJzZXIoQyksXG5cdFx0dmlzaXRvcnM6IHtcblx0XHRcdFJlcXVlc3RzOiB7XG5cdFx0XHRcdHByZTogcmVzb3VyY2UgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IHsgbG9nZ2VyIH0gPSBDO1xuXHRcdFx0XHRcdGNvbnN0IHsgbW9kdWxlSWQgfSA9IHJlc291cmNlO1xuXHRcdFx0XHRcdHJlc291cmNlLmFwcGx5TXV0YXRpb25zKCk7XG5cdFx0XHRcdFx0cmVzb3VyY2UudHJhbnNmb3JtKHtcblx0XHRcdFx0XHRcdHBsdWdpbnM6IFtcblx0XHRcdFx0XHRcdFx0W3JlcXVpcmUucmVzb2x2ZSgnLi4vLi4vLi4vdHJhbnNmb3Jtcy9kZWZpbmUnKSwgcmVzb3VyY2UubXV0YXRpb25zXSxcblx0XHRcdFx0XHRcdFx0W3JlcXVpcmUucmVzb2x2ZSgnLi4vLi4vLi4vdHJhbnNmb3Jtcy9wcm92aWRlJyksIHJlc291cmNlLm11dGF0aW9uc10sXG5cdFx0XHRcdFx0XHRcdEMuZ2V0KFsnb3B0aW1pemUnLCAnZGVhZENvZGUnXSkgJiYgJ2JhYmVsLXBsdWdpbi1taW5pZnktZGVhZC1jb2RlLWVsaW1pbmF0aW9uJyxcblx0XHRcdFx0XHRcdFx0Qy5nZXQoWydvcHRpbWl6ZScsICdjb25zdGFudEZvbGRpbmcnXSkgJiYgJ2JhYmVsLXBsdWdpbi1taW5pZnktY29uc3RhbnQtZm9sZGluZycsXG5cdFx0XHRcdFx0XHRcdEMuZ2V0KFsnb3B0aW1pemUnLCAndW5yZWZlcmVuY2VkJ10pICYmIFtcblx0XHRcdFx0XHRcdFx0XHRyZXF1aXJlLnJlc29sdmUoJy4uLy4uLy4uL3RyYW5zZm9ybXMvdW5yZWZlcmVuY2VkJyksXG5cdFx0XHRcdFx0XHRcdFx0eyBsb2dnZXIsIG1vZHVsZUlkIH1cblx0XHRcdFx0XHRcdFx0XSxcblx0XHRcdFx0XHRcdFx0J0BiYWJlbC9wbHVnaW4tdHJhbnNmb3JtLXRlbXBsYXRlLWxpdGVyYWxzJyxcblx0XHRcdFx0XHRcdFx0J0BiYWJlbC9wbHVnaW4tdHJhbnNmb3JtLW1vZHVsZXMtY29tbW9uanMnXG5cdFx0XHRcdFx0XHRdLmZpbHRlcihCb29sZWFuKVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRwb3N0OiByZXNvdXJjZSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgbWV0YSA9IHJlc291cmNlLmdldE1ldGEoKTtcblx0XHRcdFx0XHRjb25zdCB7IGxvZ2dlciwgb3V0cHV0VGFyZ2V0IH0gPSBDO1xuXHRcdFx0XHRcdHJlc291cmNlLnRyYW5zZm9ybSh7XG5cdFx0XHRcdFx0XHRwbHVnaW5zOiBbXG5cdFx0XHRcdFx0XHRcdFtyZXF1aXJlLnJlc29sdmUoJy4uLy4uLy4uL3RyYW5zZm9ybXMvbW9kdWxlJyksIHsgbG9nZ2VyLCByZXNvdXJjZSB9XSxcblx0XHRcdFx0XHRcdFx0W3JlcXVpcmUucmVzb2x2ZSgnLi4vLi4vLi4vdHJhbnNmb3Jtcy93cmFwJyksIHsgb3V0cHV0VGFyZ2V0LCBtZXRhIH1dXG5cdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRHZW5lcmF0ZToge1xuXHRcdFx0XHRwb3N0OiByZXNvdXJjZSA9PiB7XG5cdFx0XHRcdFx0aWYgKEMudWdsaWZ5KSB7XG5cdFx0XHRcdFx0XHRyZXNvdXJjZS5jb21wcmVzcygpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdENvbXBsZXRlOiB7XG5cdFx0XHRcdHBvc3Q6IHJlc291cmNlID0+IHtcblx0XHRcdFx0XHRjb25zdCB7IGxvZ2dlciB9ID0gQztcblx0XHRcdFx0XHRsb2dnZXIuZGVidWcoYEdlbmVyYXRlIG1hbmlmZXN0IGZvciAnJHtyZXNvdXJjZS5tb2R1bGVJZH0nYCk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc291cmNlLnJlc291cmNlRmFjdG9yeS5nZW5lcmF0ZU1hbmlmZXN0KHJlc291cmNlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG4iXX0=