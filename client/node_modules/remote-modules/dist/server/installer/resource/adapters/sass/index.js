"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _nodeSass = _interopRequireDefault(require("node-sass"));

var _css = _interopRequireDefault(require("../css"));

var _promisify = _interopRequireDefault(require("../../../../../lib/helpers/promisify"));

var _fs = require("../../../../../lib/helpers/fs");

var _requestAttributes = require("../../../../../lib/request-attributes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const renderAsync = (0, _promisify.default)(_nodeSass.default.render);

var _default = (C, ctx) => {
  const adapter = (0, _css.default)(C, ctx);
  return _objectSpread({}, adapter, {
    visitors: (0, _deepmerge.default)(adapter.visitors, {
      Parse: {
        pre: async resource => {
          const {
            parser
          } = resource.adapter; // node-sass won't produce source maps if source is passed as
          // options.data and options.sourceMap is not a string, so we
          // just pass an arbitrary path relative to the module root.

          const sourceMap = resource.options.sourceMaps && _path.default.join(resource.options.rootDir, 'sass.map');

          const {
            css,
            map
          } = await renderAsync({
            file: resource.origin,
            data: resource.source,
            importer: (request, prev, done) => {
              const dependency = resource.resourceFactory((0, _requestAttributes.stripAttributes)(request), resource);
              const {
                attributes
              } = (0, _requestAttributes.parseAttributes)(request);

              if (attributes.href) {
                done({
                  contents: `@import url('${request}');`,
                  file: dependency.origin
                });
              } else if (dependency.isNormal()) {
                resource.resolverPaths.add(dependency.getOriginDir());
                Promise.resolve(dependency.source || (0, _fs.readFileAsync)(dependency.origin)).then(contents => {
                  done({
                    contents,
                    file: dependency.origin
                  });
                }).catch(done);
              } else {
                done(null);
              }
            },
            indentedSyntax: _path.default.extname(resource.slug) === '.sass',
            omitSourceMapUrl: true,
            sourceMap,
            sourceMapContents: sourceMap,
            sourceMapRoot: parser.sourceRoot
          });

          if (map) {
            const sourceMapJSON = _objectSpread({}, JSON.parse(map), {
              file: resource.slug
            });

            parser.sourceMapJSON = sourceMapJSON;
          } // eslint-disable-next-line no-param-reassign


          resource.output = css.toString('utf8');
          return adapter.runVisitor(resource, ['Parse', 'pre']);
        }
      }
    })
  });
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9zZXJ2ZXIvaW5zdGFsbGVyL3Jlc291cmNlL2FkYXB0ZXJzL3Nhc3MvaW5kZXguanMiXSwibmFtZXMiOlsicmVuZGVyQXN5bmMiLCJzYXNzIiwicmVuZGVyIiwiQyIsImN0eCIsImFkYXB0ZXIiLCJ2aXNpdG9ycyIsIlBhcnNlIiwicHJlIiwicmVzb3VyY2UiLCJwYXJzZXIiLCJzb3VyY2VNYXAiLCJvcHRpb25zIiwic291cmNlTWFwcyIsIlBhdGgiLCJqb2luIiwicm9vdERpciIsImNzcyIsIm1hcCIsImZpbGUiLCJvcmlnaW4iLCJkYXRhIiwic291cmNlIiwiaW1wb3J0ZXIiLCJyZXF1ZXN0IiwicHJldiIsImRvbmUiLCJkZXBlbmRlbmN5IiwicmVzb3VyY2VGYWN0b3J5IiwiYXR0cmlidXRlcyIsImhyZWYiLCJjb250ZW50cyIsImlzTm9ybWFsIiwicmVzb2x2ZXJQYXRocyIsImFkZCIsImdldE9yaWdpbkRpciIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsImNhdGNoIiwiaW5kZW50ZWRTeW50YXgiLCJleHRuYW1lIiwic2x1ZyIsIm9taXRTb3VyY2VNYXBVcmwiLCJzb3VyY2VNYXBDb250ZW50cyIsInNvdXJjZU1hcFJvb3QiLCJzb3VyY2VSb290Iiwic291cmNlTWFwSlNPTiIsIkpTT04iLCJwYXJzZSIsIm91dHB1dCIsInRvU3RyaW5nIiwicnVuVmlzaXRvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7OztBQUVBLE1BQU1BLFdBQVcsR0FBRyx3QkFBVUMsa0JBQUtDLE1BQWYsQ0FBcEI7O2VBRWUsQ0FBQ0MsQ0FBRCxFQUFJQyxHQUFKLEtBQVk7QUFDMUIsUUFBTUMsT0FBTyxHQUFHLGtCQUFXRixDQUFYLEVBQWNDLEdBQWQsQ0FBaEI7QUFDQSwyQkFDSUMsT0FESjtBQUVDQyxJQUFBQSxRQUFRLEVBQUUsd0JBQU1ELE9BQU8s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RDBCLEtBQXhCO0FBRlg7QUFxREEsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgbWVyZ2UgZnJvbSAnZGVlcG1lcmdlJztcbmltcG9ydCBzYXNzIGZyb20gJ25vZGUtc2Fzcyc7XG5cbmltcG9ydCBDU1NBZGFwdGVyIGZyb20gJy4uL2Nzcyc7XG5pbXBvcnQgcHJvbWlzaWZ5IGZyb20gJy4uLy4uLy4uLy4uLy4uL2xpYi9oZWxwZXJzL3Byb21pc2lmeSc7XG5pbXBvcnQgeyByZWFkRmlsZUFzeW5jIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vbGliL2hlbHBlcnMvZnMnO1xuaW1wb3J0IHsgcGFyc2VBdHRyaWJ1dGVzLCBzdHJpcEF0dHJpYnV0ZXMgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9saWIvcmVxdWVzdC1hdHRyaWJ1dGVzJztcblxuY29uc3QgcmVuZGVyQXN5bmMgPSBwcm9taXNpZnkoc2Fzcy5yZW5kZXIpO1xuXG5leHBvcnQgZGVmYXVsdCAoQywgY3R4KSA9PiB7XG5cdGNvbnN0IGFkYXB0ZXIgPSBDU1NBZGFwdGVyKEMsIGN0eCk7XG5cdHJldHVybiB7XG5cdFx0Li4uYWRhcHRlcixcblx0XHR2aXNpdG9yczogbWVyZ2UoYWRhcHRlci52aXNpdG9ycywge1xuXHRcdFx0UGFyc2U6IHtcblx0XHRcdFx0cHJlOiBhc3luYyByZXNvdXJjZSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgeyBwYXJzZXIgfSA9IHJlc291cmNlLmFkYXB0ZXI7XG5cdFx0XHRcdFx0Ly8gbm9kZS1zYXNzIHdvbid0IHByb2R1Y2Ugc291cmNlIG1hcHMgaWYgc291cmNlIGlzIHBhc3NlZCBhc1xuXHRcdFx0XHRcdC8vIG9wdGlvbnMuZGF0YSBhbmQgb3B0aW9ucy5zb3VyY2VNYXAgaXMgbm90IGEgc3RyaW5nLCBzbyB3ZVxuXHRcdFx0XHRcdC8vIGp1c3QgcGFzcyBhbiBhcmJpdHJhcnkgcGF0aCByZWxhdGl2ZSB0byB0aGUgbW9kdWxlIHJvb3QuXG5cdFx0XHRcdFx0Y29uc3Qgc291cmNlTWFwID1cblx0XHRcdFx0XHRcdHJlc291cmNlLm9wdGlvbnMuc291cmNlTWFwcyAmJiBQYXRoLmpvaW4ocmVzb3VyY2Uub3B0aW9ucy5yb290RGlyLCAnc2Fzcy5tYXAnKTtcblx0XHRcdFx0XHRjb25zdCB7IGNzcywgbWFwIH0gPSBhd2FpdCByZW5kZXJBc3luYyh7XG5cdFx0XHRcdFx0XHRmaWxlOiByZXNvdXJjZS5vcmlnaW4sXG5cdFx0XHRcdFx0XHRkYXRhOiByZXNvdXJjZS5zb3VyY2UsXG5cdFx0XHRcdFx0XHRpbXBvcnRlcjogKHJlcXVlc3QsIHByZXYsIGRvbmUpID0+IHtcblx0XHRcdFx0XHRcdFx0Y29uc3QgZGVwZW5kZW5jeSA9IHJlc291cmNlLnJlc291cmNlRmFjdG9yeShzdHJpcEF0dHJpYnV0ZXMocmVxdWVzdCksIHJlc291cmNlKTtcblx0XHRcdFx0XHRcdFx0Y29uc3QgeyBhdHRyaWJ1dGVzIH0gPSBwYXJzZUF0dHJpYnV0ZXMocmVxdWVzdCk7XG5cdFx0XHRcdFx0XHRcdGlmIChhdHRyaWJ1dGVzLmhyZWYpIHtcblx0XHRcdFx0XHRcdFx0XHRkb25lKHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnRlbnRzOiBgQGltcG9ydCB1cmwoJyR7cmVxdWVzdH0nKTtgLFxuXHRcdFx0XHRcdFx0XHRcdFx0ZmlsZTogZGVwZW5kZW5jeS5vcmlnaW5cblx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmIChkZXBlbmRlbmN5LmlzTm9ybWFsKCkpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNvdXJjZS5yZXNvbHZlclBhdGhzLmFkZChkZXBlbmRlbmN5LmdldE9yaWdpbkRpcigpKTtcblx0XHRcdFx0XHRcdFx0XHRQcm9taXNlLnJlc29sdmUoZGVwZW5kZW5jeS5zb3VyY2UgfHwgcmVhZEZpbGVBc3luYyhkZXBlbmRlbmN5Lm9yaWdpbikpXG5cdFx0XHRcdFx0XHRcdFx0XHQudGhlbihjb250ZW50cyA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGRvbmUoeyBjb250ZW50cywgZmlsZTogZGVwZW5kZW5jeS5vcmlnaW4gfSk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdFx0XHRcdFx0LmNhdGNoKGRvbmUpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGRvbmUobnVsbCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRpbmRlbnRlZFN5bnRheDogUGF0aC5leHRuYW1lKHJlc291cmNlLnNsdWcpID09PSAnLnNhc3MnLFxuXHRcdFx0XHRcdFx0b21pdFNvdXJjZU1hcFVybDogdHJ1ZSxcblx0XHRcdFx0XHRcdHNvdXJjZU1hcCxcblx0XHRcdFx0XHRcdHNvdXJjZU1hcENvbnRlbnRzOiBzb3VyY2VNYXAsXG5cdFx0XHRcdFx0XHRzb3VyY2VNYXBSb290OiBwYXJzZXIuc291cmNlUm9vdFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGlmIChtYXApIHtcblx0XHRcdFx0XHRcdGNvbnN0IHNvdXJjZU1hcEpTT04gPSB7XG5cdFx0XHRcdFx0XHRcdC4uLkpTT04ucGFyc2UobWFwKSxcblx0XHRcdFx0XHRcdFx0ZmlsZTogcmVzb3VyY2Uuc2x1Z1xuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdHBhcnNlci5zb3VyY2VNYXBKU09OID0gc291cmNlTWFwSlNPTjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cdFx0XHRcdFx0cmVzb3VyY2Uub3V0cHV0ID0gY3NzLnRvU3RyaW5nKCd1dGY4Jyk7XG5cdFx0XHRcdFx0cmV0dXJuIGFkYXB0ZXIucnVuVmlzaXRvcihyZXNvdXJjZSwgWydQYXJzZScsICdwcmUnXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KVxuXHR9O1xufTtcbiJdfQ==