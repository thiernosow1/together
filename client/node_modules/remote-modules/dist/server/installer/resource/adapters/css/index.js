"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _parser = _interopRequireDefault(require("./parser"));

var _writer = _interopRequireDefault(require("../writer"));

var _default2 = _interopRequireDefault(require("../default"));

var _ = require("../");

var _escapeRegExp = _interopRequireDefault(require("../../../../../lib/helpers/escapeRegExp"));

var _requestAttributes = require("../../../../../lib/request-attributes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (C, ctx) => {
  const defaultAdapter = (0, _default2.default)(C, ctx);
  return (0, _.createAdapter)({
    outputType: 'css',
    parser: (0, _parser.default)(C),
    visitors: {
      Requests: {
        post: resource => {
          resource.requests.forEach(request => {
            const requestCtx = resource.contextFactory(request, resource.getResolverPaths());
            const {
              attributes,
              type,
              value
            } = request;

            switch (type) {
              case 'import':
                {
                  const nodes = resource.adapter.parser.runQuery(`
									// ${type} [ @import =~ '${(0, _escapeRegExp.default)(value)}' ]
								`);
                  nodes.forEach(node => {
                    if (requestCtx.isNormal()) {
                      // Drop import statements for normal resources
                      const {
                        rules
                      } = node.parent.stylesheet;
                      const index = rules.indexOf(node);
                      rules.splice(index, 1);
                    }
                  });
                  break;
                }

              default:
                {
                  const regexp = new RegExp(`(^|\\([\\'\\"]?)(?:<.+>)?${(0, _escapeRegExp.default)(value)}([\\'\\"]?\\)|$)`);
                  const nodes = resource.adapter.parser.runQuery(`
									// ${type} [ @value =~ '${regexp.source}' ]
								`);
                  nodes.forEach(node => {
                    const {
                      list
                    } = (0, _requestAttributes.parseAttributes)(node.value);

                    if (attributes === list || attributes && attributes.includes(list)) {
                      // eslint-disable-next-line no-param-reassign
                      node.value = node.value.replace(regexp, `$1${requestCtx.url}$2`);
                    }
                  });
                  break;
                }
            }
          });
        }
      },
      Complete: {
        post: resource => defaultAdapter.runVisitor(resource, ['Complete', 'post'])
      }
    },
    writer: new _writer.default({
      extension: '.css'
    })
  });
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9zZXJ2ZXIvaW5zdGFsbGVyL3Jlc291cmNlL2FkYXB0ZXJzL2Nzcy9pbmRleC5qcyJdLCJuYW1lcyI6WyJDIiwiY3R4IiwiZGVmYXVsdEFkYXB0ZXIiLCJvdXRwdXRUeXBlIiwicGFyc2VyIiwidmlzaXRvcnMiLCJSZXF1ZXN0cyIsInBvc3QiLCJyZXNvdXJjZSIsInJlcXVlc3RzIiwiZm9yRWFjaCIsInJlcXVlc3QiLCJyZXF1ZXN0Q3R4IiwiY29udGV4dEZhY3RvcnkiLCJnZXRSZXNvbHZlclBhdGhzIiwiYXR0cmlidXRlcyIsInR5cGUiLCJ2YWx1ZSIsIm5vZGVzIiwiYWRhcHRlciIsInJ1blF1ZXJ5Iiwibm9kZSIsImlzTm9ybWFsIiwicnVsZXMiLCJwYXJlbnQiLCJzdHlsZXNoZWV0IiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwicmVnZXhwIiwiUmVnRXhwIiwic291cmNlIiwibGlzdCIsImluY2x1ZGVzIiwicmVwbGFjZSIsInVybCIsIkNvbXBsZXRlIiwicnVuVmlzaXRvciIsIndyaXRlciIsIldyaXRlciIsImV4dGVuc2lvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O2VBRWUsQ0FBQ0EsQ0FBRCxFQUFJQyxHQUFKLEtBQVk7QUFDMUIsUUFBTUMsY0FBYyxHQUFHLHVCQUFlRixDQUFmLEVBQWtCQyxHQUFsQixDQUF2QjtBQUNBLFNBQU8scUJBQWM7QUFDcEJFLElBQUFBLFVBQVUsRUFBRSxLQURRO0FBRXBCQyxJQUFBQSxNQUFNLEVBQUUscUJBQWFKLENBQWIsQ0FGWTtBQUdwQkssSUFBQUEsUUFBUSxFQUFFO0FBQ1RDLE1BQUFBLFFBQVEsRUFBRTtBQUNUQyxRQUFBQSxJQUFJLEVBQUVDLFFBQVEsSUFBSTtBQUNqQkEsVUFBQUEsUUFBUSxDQUFDQyxRQUFULENBQWtCQyxPQUFsQixDQUEwQkMsT0FBTyxJQUFJO0FBQ3BDLGtCQUFNQyxVQUFVLEdBQUdKLFFBQVEsQ0FBQ0ssY0FBVCxDQUF3QkYsT0FBeEIsRUFBaUNILFFBQVEsQ0FBQ00sZ0JBQVQsRUFBakMsQ0FBbkI7QUFDQSxrQkFBTTtBQUFFQyxjQUFBQSxVQUFGO0FBQWNDLGNBQUFBLElBQWQ7QUFBb0JDLGNBQUFBO0FBQXBCLGdCQUE4Qk4sT0FBcEM7O0FBQ0Esb0JBQVFLLElBQVI7QUFDQyxtQkFBSyxRQUFMO0FBQWU7QUFDZCx3QkFBTUUsS0FBSyxHQUFHVixRQUFRLENBQUNXLE9BQVQsQ0FBaUJmLE1BQWpCLENBQXdCZ0IsUUFBeEIsQ0FBa0M7Y0FDMUNKLElBQUssa0JBQWlCLDJCQUFhQyxLQUFiLENBQW9CO1NBRGxDLENBQWQ7QUFHQUMsa0JBQUFBLEtBQUssQ0FBQ1IsT0FBTixDQUFjVyxJQUFJLElBQUk7QUFDckIsd0JBQUlULFVBQVUsQ0FBQ1UsUUFBWCxFQUFKLEVBQTJCO0FBQzFCO0FBQ0EsNEJBQU07QUFBRUMsd0JBQUFBO0FBQUYsMEJBQVlGLElBQUksQ0FBQ0csTUFBTCxDQUFZQyxVQUE5QjtBQUNBLDRCQUFNQyxLQUFLLEdBQUdILEtBQUssQ0FBQ0ksT0FBTixDQUFjTixJQUFkLENBQWQ7QUFDQUUsc0JBQUFBLEtBQUssQ0FBQ0ssTUFBTixDQUFhRixLQUFiLEVBQW9CLENBQXBCO0FBQ0E7QUFDRCxtQkFQRDtBQVFBO0FBQ0E7O0FBQ0Q7QUFBUztBQUNSLHdCQUFNRyxNQUFNLEdBQUcsSUFBSUMsTUFBSixDQUNiLDRCQUEyQiwyQkFBYWIsS0FBYixDQUFvQixrQkFEbEMsQ0FBZjtBQUdBLHdCQUFNQyxLQUFLLEdBQUdWLFFBQVEsQ0FBQ1csT0FBVCxDQUFpQmYsTUFBakIsQ0FBd0JnQixRQUF4QixDQUFrQztjQUMxQ0osSUFBSyxpQkFBZ0JhLE1BQU0sQ0FBQ0UsTUFBTztTQUQzQixDQUFkO0FBR0FiLGtCQUFBQSxLQUFLLENBQUNSLE9BQU4sQ0FBY1csSUFBSSxJQUFJO0FBQ3JCLDBCQUFNO0FBQUVXLHNCQUFBQTtBQUFGLHdCQUFXLHdDQUFnQlgsSUFBSSxDQUFDSixLQUFyQixDQUFqQjs7QUFDQSx3QkFBSUYsVUFBVSxLQUFLaUIsSUFBZixJQUF3QmpCLFVBQVUsSUFBSUEsVUFBVSxDQUFDa0IsUUFBWCxDQUFvQkQsSUFBcEIsQ0FBMUMsRUFBc0U7QUFDckU7QUFDQVgsc0JBQUFBLElBQUksQ0FBQ0osS0FBTCxHQUFhSSxJQUFJLENBQUNKLEtBQUwsQ0FBV2lCLE9BQVgsQ0FBbUJMLE1BQW5CLEVBQTRCLEtBQUlqQixVQUFVLENBQUN1QixHQUFJLElBQS9DLENBQWI7QUFDQTtBQUNELG1CQU5EO0FBT0E7QUFDQTtBQTlCRjtBQWdDQSxXQW5DRDtBQW9DQTtBQXRDUSxPQUREO0FBeUNUQyxNQUFBQSxRQUFRLEVBQUU7QUFDVDdCLFFBQUFBLElBQUksRUFBRUMsUUFBUSxJQUFJTixjQUFjLENBQUNtQyxVQUFmLENBQTBCN0IsUUFBMUIsRUFBb0MsQ0FBQyxVQUFELEVBQWEsTUFBYixDQUFwQztBQURUO0FBekNELEtBSFU7QUFnRHBCOEIsSUFBQUEsTUFBTSxFQUFFLElBQUlDLGVBQUosQ0FBVztBQUFFQyxNQUFBQSxTQUFTLEVBQUU7QUFBYixLQUFYO0FBaERZLEdBQWQsQ0FBUDtBQWtEQSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZVBhcnNlciBmcm9tICcuL3BhcnNlcic7XG5pbXBvcnQgV3JpdGVyIGZyb20gJy4uL3dyaXRlcic7XG5pbXBvcnQgRGVmYXVsdEFkYXB0ZXIgZnJvbSAnLi4vZGVmYXVsdCc7XG5pbXBvcnQgeyBjcmVhdGVBZGFwdGVyIH0gZnJvbSAnLi4vJztcbmltcG9ydCBlc2NhcGVSZWdFeHAgZnJvbSAnLi4vLi4vLi4vLi4vLi4vbGliL2hlbHBlcnMvZXNjYXBlUmVnRXhwJztcbmltcG9ydCB7IHBhcnNlQXR0cmlidXRlcyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2xpYi9yZXF1ZXN0LWF0dHJpYnV0ZXMnO1xuXG5leHBvcnQgZGVmYXVsdCAoQywgY3R4KSA9PiB7XG5cdGNvbnN0IGRlZmF1bHRBZGFwdGVyID0gRGVmYXVsdEFkYXB0ZXIoQywgY3R4KTtcblx0cmV0dXJuIGNyZWF0ZUFkYXB0ZXIoe1xuXHRcdG91dHB1dFR5cGU6ICdjc3MnLFxuXHRcdHBhcnNlcjogY3JlYXRlUGFyc2VyKEMpLFxuXHRcdHZpc2l0b3JzOiB7XG5cdFx0XHRSZXF1ZXN0czoge1xuXHRcdFx0XHRwb3N0OiByZXNvdXJjZSA9PiB7XG5cdFx0XHRcdFx0cmVzb3VyY2UucmVxdWVzdHMuZm9yRWFjaChyZXF1ZXN0ID0+IHtcblx0XHRcdFx0XHRcdGNvbnN0IHJlcXVlc3RDdHggPSByZXNvdXJjZS5jb250ZXh0RmFjdG9yeShyZXF1ZXN0LCByZXNvdXJjZS5nZXRSZXNvbHZlclBhdGhzKCkpO1xuXHRcdFx0XHRcdFx0Y29uc3QgeyBhdHRyaWJ1dGVzLCB0eXBlLCB2YWx1ZSB9ID0gcmVxdWVzdDtcblx0XHRcdFx0XHRcdHN3aXRjaCAodHlwZSkge1xuXHRcdFx0XHRcdFx0XHRjYXNlICdpbXBvcnQnOiB7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc3Qgbm9kZXMgPSByZXNvdXJjZS5hZGFwdGVyLnBhcnNlci5ydW5RdWVyeShgXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyAke3R5cGV9IFsgQGltcG9ydCA9fiAnJHtlc2NhcGVSZWdFeHAodmFsdWUpfScgXVxuXHRcdFx0XHRcdFx0XHRcdGApO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVzLmZvckVhY2gobm9kZSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAocmVxdWVzdEN0eC5pc05vcm1hbCgpKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERyb3AgaW1wb3J0IHN0YXRlbWVudHMgZm9yIG5vcm1hbCByZXNvdXJjZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29uc3QgeyBydWxlcyB9ID0gbm9kZS5wYXJlbnQuc3R5bGVzaGVldDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29uc3QgaW5kZXggPSBydWxlcy5pbmRleE9mKG5vZGUpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRydWxlcy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGRlZmF1bHQ6IHtcblx0XHRcdFx0XHRcdFx0XHRjb25zdCByZWdleHAgPSBuZXcgUmVnRXhwKFxuXHRcdFx0XHRcdFx0XHRcdFx0YChefFxcXFwoW1xcXFwnXFxcXFwiXT8pKD86PC4rPik/JHtlc2NhcGVSZWdFeHAodmFsdWUpfShbXFxcXCdcXFxcXCJdP1xcXFwpfCQpYFxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc3Qgbm9kZXMgPSByZXNvdXJjZS5hZGFwdGVyLnBhcnNlci5ydW5RdWVyeShgXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyAke3R5cGV9IFsgQHZhbHVlID1+ICcke3JlZ2V4cC5zb3VyY2V9JyBdXG5cdFx0XHRcdFx0XHRcdFx0YCk7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZXMuZm9yRWFjaChub2RlID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IHsgbGlzdCB9ID0gcGFyc2VBdHRyaWJ1dGVzKG5vZGUudmFsdWUpO1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGF0dHJpYnV0ZXMgPT09IGxpc3QgfHwgKGF0dHJpYnV0ZXMgJiYgYXR0cmlidXRlcy5pbmNsdWRlcyhsaXN0KSkpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUudmFsdWUgPSBub2RlLnZhbHVlLnJlcGxhY2UocmVnZXhwLCBgJDEke3JlcXVlc3RDdHgudXJsfSQyYCk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdENvbXBsZXRlOiB7XG5cdFx0XHRcdHBvc3Q6IHJlc291cmNlID0+IGRlZmF1bHRBZGFwdGVyLnJ1blZpc2l0b3IocmVzb3VyY2UsIFsnQ29tcGxldGUnLCAncG9zdCddKVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0d3JpdGVyOiBuZXcgV3JpdGVyKHsgZXh0ZW5zaW9uOiAnLmNzcycgfSlcblx0fSk7XG59O1xuIl19