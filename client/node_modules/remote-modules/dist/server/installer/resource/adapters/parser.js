"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _url = _interopRequireDefault(require("url"));

var _stripBom = _interopRequireDefault(require("strip-bom"));

var _memoize = _interopRequireDefault(require("../../../../lib/helpers/memoize"));

var _logger = _interopRequireDefault(require("../../../../lib/logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const warnMissingMethod = (0, _memoize.default)(name => {
  _logger.default.warn(`Parser should implement a '${name}' method`);
});

class Parser {
  constructor(methods) {
    _defineProperty(this, "requests", []);

    _defineProperty(this, "sourceMapJSON", null);

    ['buildQuery', 'generate', 'getRequests', 'parse', 'runQuery'].forEach(key => {
      if (typeof methods[key] !== 'function') {
        throw new TypeError(`Parser must implement a '${key}' method`);
      }
    });
    ['compress', 'formatError'].forEach(key => {
      if (typeof methods[key] !== 'function') {
        warnMissingMethod(key);
      }
    });
    this.methods = _objectSpread({
      compress: output => output,
      transform: () => this.ast,
      sourceMappingURL: content => `//# sourceMappingURL=${content}`
    }, methods);
  }

  get resourceURL() {
    return _url.default.resolve(this.sourceRoot, this.sourceFilename);
  }

  getSourceMappingURL(resource) {
    const {
      methods,
      sourceMapJSON,
      resourceURL
    } = this;
    const {
      sourceMaps
    } = resource.options;
    let result = '';

    if (sourceMapJSON && sourceMapJSON.version) {
      if (sourceMaps === 'inline') {
        const base64 = Buffer.from(JSON.stringify(sourceMapJSON)).toString('base64');
        result = `data:application/json;charset=utf-8;base64,${base64}`;
      } else if (sourceMaps !== 'hidden') {
        result = `${resourceURL}.map`;
      }
    }

    return result && `\n${methods.sourceMappingURL(result)}`;
  }

  init(slug, origin, sourceRoot) {
    this.filename = origin;
    this.sourceFilename = slug;
    this.sourceRoot = sourceRoot;
  }

  load(source) {
    const cleanSource = typeof source === 'string' ? (0, _stripBom.default)(source) : source;
    this.source = cleanSource;
    this.output = cleanSource;
    this.ast = this.parse(cleanSource);
  }

  parse(...args) {
    try {
      return this.methods.parse.apply(this, args);
    } catch (err) {
      if (err.name !== 'SyntaxError' || !this.methods.formatError) {
        throw err;
      }

      const formatted = this.methods.formatError.call(this, err);
      throw Object.assign(err, {
        frame: formatted,
        message: formatted,
        originalMessage: err.message
      });
    }
  }

  buildQuery(input) {
    return this.methods.buildQuery.call(this, input);
  }

  runQuery(...args) {
    return this.methods.runQuery.apply(this, args);
  }

  hasNode(...args) {
    return this.runQuery(...args).length > 0;
  }

  getRequests() {
    this.requests = this.methods.getRequests.call(this);
  }

  transform(...args) {
    this.ast = this.methods.transform.apply(this, args);
  }

  generate(...args) {
    this.output = this.methods.generate.apply(this, args);
  }

  compress(...args) {
    this.output = this.methods.compress.apply(this, args);
  }

}

exports.default = Parser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,