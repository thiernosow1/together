"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var babylon = _interopRequireWildcard(require("@babel/parser"));

var babel = _interopRequireWildcard(require("@babel/core"));

var _codeFrame = require("@babel/code-frame");

var _astq = _interopRequireDefault(require("astq"));

var _glob = _interopRequireDefault(require("glob"));

var _uglifyEs = _interopRequireDefault(require("uglify-es"));

var _cloneDeep = _interopRequireDefault(require("clone-deep"));

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _babelMerge = _interopRequireDefault(require("babel-merge"));

var _parser2 = _interopRequireDefault(require("../parser"));

var _resourceRequest = _interopRequireDefault(require("../../../generators/resource-request"));

var _memoize = _interopRequireDefault(require("../../../../../lib/helpers/memoize"));

var _pick = _interopRequireDefault(require("../../../../../lib/helpers/pick"));

var _helpers = require("../../../../../lib/helpers");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const astq = new _astq.default();
const excludeFromQuery = new Set(['start', 'end', 'computed']);
const buildQuery = (0, _memoize.default)(input => {
  let brackets;
  const node = typeof input === 'string' ? babylon.parseExpression(input) : input;
  return `${Object.entries(node).reduce((acc, [key, value]) => {
    switch (true) {
      case excludeFromQuery.has(key):
        // noop
        break;

      case key === 'type':
        // eslint-disable-next-line no-param-reassign
        acc = `${acc}${value}`;
        break;

      case Boolean(value && value.type):
        // nodes
        // eslint-disable-next-line no-param-reassign
        acc = `${acc} ${brackets ? '&&' : '['} /:${key} ${buildQuery(value)}`;
        brackets = true;
        break;

      case (0, _helpers.isPrimitive)(value):
        // primitive attributes
        // eslint-disable-next-line no-param-reassign
        acc = `${acc} ${brackets ? '&&' : '['} @${key} == ${typeof value === 'string' ? `'${value}'` : value}`;
        brackets = true;
        break;

      default:
        // noop
        break;
    }

    return acc;
  }, '')}${brackets ? ' ]' : ''}`;
});

function getBabelOpts(parser, resource, options) {
  const sourceMaps = Boolean(resource.options.sourceMaps);
  const retainLines = sourceMaps && resource.options.preset === 'node';
  return _babelMerge.default.all([_objectSpread({
    /**
     * IMPORTANT: babelrc is false so babel doesn't
     * attempt a babrlrc lookup on every transform
     */
    babelrc: false,
    filenameRelative: parser.sourceFilename,
    retainLines,
    sourceMaps,
    shouldPrintComment: content => parser.requests.some(({
      value
    }) => value === content)
  }, (0, _helpers.pickDefined)((0, _pick.default)(parser, ['filename', 'shouldPrintComment', 'sourceRoot']))), resource.isInstalledPackage() ? null : resource.getBabelOptions(), options]);
}

var _default = C => new _parser2.default({
  formatError(err) {
    const location = {
      start: err.loc,
      end: err.loc,
      filename: this.sourceFilename
    };
    const options = {
      message: err.message,
      highlightCode: true
    };
    const frame = (0, _codeFrame.codeFrameColumns)(this.source, location, options);
    return `${this.sourceFilename}:\n\n${frame}\n`;
  },

  parse(source, options) {
    return babylon.parse(source, _objectSpread({}, C.babylon, {
      sourceFilename: this.sourceFilename
    }, options));
  },

  buildQuery(input) {
    return buildQuery(input);
  },

  runQuery(query, ast = this.ast) {
    return astq.query(ast, query);
  },

  getRequests() {
    return Array.from([...this.runQuery(`
						// ImportDeclaration
					`), ...this.runQuery(`
						// CallExpression [
							/:callee ${buildQuery('require')}
						]
					`), ...this.runQuery(`
						// CallExpression [(
							/ ${buildQuery('System.import')}
						) || (
							/:callee Import
						)]
					`)].reduce((acc, node) => {
      const request = (0, _resourceRequest.default)(node, buildQuery);

      if (request.value && !acc.has(request.getKey())) {
        const key = request.getKey();
        acc.set(key, _objectSpread({}, request, {
          key
        }));
      } else if (request.pattern) {
        const cwd = _path.default.dirname(this.filename);

        _glob.default.sync(request.pattern, {
          cwd
        }).forEach(value => {
          const key = request.getKey(value);
          acc.set(key, _objectSpread({}, request, {
            key,
            value
          }));
        });
      }

      return acc;
    }, new Map()).values()).filter(request => request.value);
  },

  transform(resource, options) {
    const opts = getBabelOpts(this, resource, _objectSpread({}, options, {
      ast: true,
      code: false
    }));
    const {
      ast
    } = babel.transformFromAstSync(this.ast, null, opts);
    return ast;
  },

  generate(resource, options) {
    const opts = getBabelOpts(this, resource, options);
    const {
      code,
      map
    } = babel.transformFromAstSync(this.ast, this.source, opts);
    this.sourceMapJSON = _objectSpread({}, map, {
      sourcesContent: [this.source]
    });
    return `${code}${this.getSourceMappingURL(resource)}`;
  },

  compress(resource, options) {
    // FIXME: Uglify directly from AST before generate?
    // https://github.com/mishoo/UglifyJS2/tree/v3.3.12#using-native-uglify-ast-with-minify
    const opts = _deepmerge.default.all([resource.options.uglify, (0, _cloneDeep.default)(options)].filter(Boolean));

    const {
      code,
      error,
      map = '{}'
    } = _uglifyEs.default.minify({
      [this.resourceURL]: this.output
    }, opts);

    if (error) {
      throw error;
    }

    this.sourceMapJSON = _objectSpread({}, JSON.parse(map), {
      sourcesContent: [this.source]
    });
    return `${code}${this.getSourceMappingURL(resource)}`;
  }

});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,