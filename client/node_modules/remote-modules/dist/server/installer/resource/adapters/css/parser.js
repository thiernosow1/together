"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var css = _interopRequireWildcard(require("css"));

var _astq = _interopRequireDefault(require("astq"));

var _parser = _interopRequireDefault(require("../parser"));

var _get = _interopRequireDefault(require("../../../../../lib/helpers/get"));

var _requestAttributes = require("../../../../../lib/request-attributes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const astq = new _astq.default();
astq.adapter({
  getNodeType: node => node.type,
  getParentNode: node => node.parent,
  getChildNodes: (node, type) => {
    let children;

    if (type === '*') {
      children = [].concat((0, _get.default)(node, ['stylesheet', 'rules']), node.rules, node.declarations, node.keyframes).filter(Boolean);
    } else if (node[type]) {
      children = [].concat(node[type]);
    } else {
      throw new Error(`No such axis '${type}' for walking child nodes`);
    }

    return children;
  },
  getNodeAttrNames: node => {
    const names = [];

    for (const [key, value] of Object.entries(node)) {
      if (key !== 'type' && key !== 'position' && (value === null || typeof value !== 'object')) {
        names.push(key);
      }
    }

    return names;
  },
  getNodeAttrValue: (node, key) => node[key]
}, true);

var _default = () => new _parser.default({
  parse(source, options) {
    return css.parse(source, _objectSpread({
      source: this.sourceFilename
    }, options));
  },

  buildQuery() {
    return '';
  },

  runQuery(query, ast = this.ast) {
    return astq.query(ast, query);
  },

  getRequests() {
    return Array.from([...this.runQuery('// import').map(node => {
      const [, value] = /^(?:url\()?["']?([^\s"')]+)["']?\)?$/i.exec(node.import);
      return {
        type: node.type,
        value
      };
    }), ...this.runQuery('// declaration').reduce((acc, node) => {
      const urlRegExp = /url\(["']?([^\s"']+)["']?\)/gi;
      let value; // eslint-disable-next-line no-cond-assign, no-sequences

      while ([, value] = urlRegExp.exec(node.value) || [], value) {
        acc.push({
          type: node.type,
          value
        });
      }

      return acc;
    }, [])].reduce((acc, request) => {
      if (request.value) {
        const {
          attributes
        } = (0, _requestAttributes.parseAttributes)(request.value);
        const value = (0, _requestAttributes.stripAttributes)(request.value.replace(/["']/g, ''));
        const attributesString = (0, _requestAttributes.formatAttributes)(attributes);
        const key = [attributesString, value].join('');

        if (value && !acc.has(key)) {
          acc.set(key, _objectSpread({}, request, attributes, {
            attributes: attributesString,
            value,
            key
          }));
        }
      }

      return acc;
    }, new Map()).values());
  },

  generate(resource, options) {
    const result = css.stringify(this.ast, _objectSpread({
      inputSourcemaps: true,
      sourcemap: Boolean(resource.options.sourceMaps && !this.sourceMapJSON)
    }, options));

    if (result.map) {
      this.sourceMapJSON = _objectSpread({}, result.map, {
        sourceRoot: this.sourceRoot
      });
    }

    return `${result.code || result}${this.getSourceMappingURL(resource)}`;
  },

  sourceMappingURL: content => `/*# sourceMappingURL=${content} */`
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,