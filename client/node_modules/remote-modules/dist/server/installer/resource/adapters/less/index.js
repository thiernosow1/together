"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _less = _interopRequireDefault(require("less"));

var _css = _interopRequireDefault(require("../css"));

var _helpers = require("../../../../../lib/helpers");

var _fs = require("../../../../../lib/helpers/fs");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ImportManager extends _less.default.FileManager {
  constructor(resource) {
    super();
    this.resource = resource;
  } // eslint-disable-next-line class-methods-use-this


  supports(filename) {
    return !(0, _helpers.isAbsoluteURL)(filename);
  } // eslint-disable-next-line class-methods-use-this


  supportsSync() {
    return false;
  }

  async loadFile(request) {
    const {
      resource
    } = this;
    const dependency = resource.resourceFactory(request, resource);

    if (dependency.error) {
      throw dependency.error;
    }

    resource.resolverPaths.add(dependency.getOriginDir());
    return {
      contents: dependency.source || (await (0, _fs.readFileAsync)(dependency.origin)),
      filename: dependency.slug
    };
  }

}

var _default = (C, ctx) => {
  const adapter = (0, _css.default)(C, ctx);
  return _objectSpread({}, adapter, {
    visitors: (0, _deepmerge.default)(adapter.visitors, {
      Parse: {
        pre: async resource => {
          const {
            parser
          } = resource.adapter;
          const {
            css,
            map
          } = await _less.default.render(resource.output, {
            filename: resource.slug,
            javascriptEnabled: true,
            sourceMap: Boolean(resource.options.sourceMaps) && {
              outputSourceFiles: true
            },
            relativeUrls: true,
            plugins: [{
              install(_, pluginManager) {
                pluginManager.addFileManager(new ImportManager(resource));
              },

              minVersion: [2, 3, 1]
            }]
          });

          if (map) {
            const sourceMapJSON = _objectSpread({}, JSON.parse(map), {
              sourceRoot: parser.sourceRoot
            });

            parser.sourceMapJSON = sourceMapJSON;
          } // eslint-disable-next-line no-param-reassign


          resource.output = css;
          return adapter.runVisitor(resource, ['Parse', 'pre']);
        }
      }
    })
  });
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9zZXJ2ZXIvaW5zdGFsbGVyL3Jlc291cmNlL2FkYXB0ZXJzL2xlc3MvaW5kZXguanMiXSwibmFtZXMiOlsiSW1wb3J0TWFuYWdlciIsImxlc3MiLCJGaWxlTWFuYWdlciIsImNvbnN0cnVjdG9yIiwicmVzb3VyY2UiLCJzdXBwb3J0cyIsImZpbGVuYW1lIiwic3VwcG9ydHNTeW5jIiwibG9hZEZpbGUiLCJyZXF1ZXN0IiwiZGVwZW5kZW5jeSIsInJlc291cmNlRmFjdG9yeSIsImVycm9yIiwicmVzb2x2ZXJQYXRocyIsImFkZCIsImdldE9yaWdpbkRpciIsImNvbnRlbnRzIiwic291cmNlIiwib3JpZ2luIiwic2x1ZyIsIkMiLCJjdHgiLCJhZGFwdGVyIiwidmlzaXRvcnMiLCJQYXJzZSIsInByZSIsInBhcnNlciIsImNzcyIsIm1hcCIsInJlbmRlciIsIm91dHB1dCIsImphdmFzY3JpcHRFbmFibGVkIiwic291cmNlTWFwIiwiQm9vbGVhbiIsIm9wdGlvbnMiLCJzb3VyY2VNYXBzIiwib3V0cHV0U291cmNlRmlsZXMiLCJyZWxhdGl2ZVVybHMiLCJwbHVnaW5zIiwiaW5zdGFsbCIsIl8iLCJwbHVnaW5NYW5hZ2VyIiwiYWRkRmlsZU1hbmFnZXIiLCJtaW5WZXJzaW9uIiwic291cmNlTWFwSlNPTiIsIkpTT04iLCJwYXJzZSIsInNvdXJjZVJvb3QiLCJydW5WaXNpdG9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0FBRUEsTUFBTUEsYUFBTixTQUE0QkMsY0FBS0MsV0FBakMsQ0FBNkM7QUFDNUNDLEVBQUFBLFdBQVcsQ0FBQ0MsUUFBRCxFQUFXO0FBQ3JCO0FBQ0EsU0FBS0EsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxHQUoyQyxDQUs1Qzs7O0FBQ0FDLEVBQUFBLFFBQVEsQ0FBQ0MsUUFBRCxFQUFXO0FBQ2xCLFdBQU8sQ0FBQyw0QkFBY0EsUUFBZCxDQUFSO0FBQ0EsR0FSMkMsQ0FTNUM7OztBQUNBQyxFQUFBQSxZQUFZLEdBQUc7QUFDZCxXQUFPLEtBQVA7QUFDQTs7QUFDRCxRQUFNQyxRQUFOLENBQWVDLE9BQWYsRUFBd0I7QUFDdkIsVUFBTTtBQUFFTCxNQUFBQTtBQUFGLFFBQWUsSUFBckI7QUFDQSxVQUFNTSxVQUFVLEdBQUdOLFFBQVEsQ0FBQ08sZUFBVCxDQUF5QkYsT0FBekIsRUFBa0NMLFFBQWxDLENBQW5COztBQUVBLFFBQUlNLFVBQVUsQ0FBQ0UsS0FBZixFQUFzQjtBQUNyQixZQUFNRixVQUFVLENBQUNFLEtBQWpCO0FBQ0E7O0FBRURSLElBQUFBLFFBQVEsQ0FBQ1MsYUFBVCxDQUF1QkMsR0FBdkIsQ0FBMkJKLFVBQVUsQ0FBQ0ssWUFBWCxFQUEzQjtBQUVBLFdBQU87QUFDTkMsTUFBQUEsUUFBUSxFQUFFTixVQUFVLENBQUNPLE1BQVgsS0FBc0IsTUFBTSx1QkFBY1AsVUFBVSxDQUFDUSxNQUF6QixDQUE1QixDQURKO0FBRU5aLE1BQUFBLFFBQVEsRUFBRUksVUFBVSxDQUFDUztBQUZmLEtBQVA7QUFJQTs7QUEzQjJDOztlQThCOUIsQ0FBQ0MsQ0FBRCxFQUFJQyxHQUFKLEtBQVk7QUFDMUIsUUFBTUMsT0FBTyxHQUFHLGtCQUFXRixDQUFYLEVBQWNDLEdBQWQsQ0FBaEI7QUFDQSwyQkFDSUMsT0FESjtBQUVDQyxJQUFBQSxRQUFRLEVBQUUsd0JBQU1ELE9BQU8sQ0FBQ0MsUUFBZCxFQUF3QjtBQUNqQ0MsTUFBQUEsS0FBSyxFQUFFO0FBQ05DLFFBQUFBLEdBQUcsRUFBRSxNQUFNckIsUUFBTixJQUFrQjtBQUN0QixnQkFBTTtBQUFFc0IsWUFBQUE7QUFBRixjQUFhdEIsUUFBUSxDQUFDa0IsT0FBNUI7QUFDQSxnQkFBTTtBQUFFSyxZQUFBQSxHQUFGO0FBQU9DLFlBQUFBO0FBQVAsY0FBZSxNQUFNM0IsY0FBSzRCLE1BQUwsQ0FBWXpCLFFBQVEsQ0FBQzBCLE1BQXJCLEVBQTZCO0FBQ3ZEeEIsWUFBQUEsUUFBUSxFQUFFRixRQUFRLENBQUNlLElBRG9DO0FBRXZEWSxZQUFBQSxpQkFBaUIsRUFBRSxJQUZvQztBQUd2REMsWUFBQUEsU0FBUyxFQUFFQyxPQUFPLENBQUM3QixRQUFRLENBQUM4QixPQUFULENBQWlCQyxVQUFsQixDQUFQLElBQXdDO0FBQ2xEQyxjQUFBQSxpQkFBaUIsRUFBRTtBQUQrQixhQUhJO0FBTXZEQyxZQUFBQSxZQUFZLEVBQUUsSUFOeUM7QUFPdkRDLFlBQUFBLE9BQU8sRUFBRSxDQUNSO0FBQ0NDLGNBQUFBLE9BQU8sQ0FBQ0MsQ0FBRCxFQUFJQyxhQUFKLEVBQW1CO0FBQ3pCQSxnQkFBQUEsYUFBYSxDQUFDQyxjQUFkLENBQTZCLElBQUkxQyxhQUFKLENBQWtCSSxRQUFsQixDQUE3QjtBQUNBLGVBSEY7O0FBSUN1QyxjQUFBQSxVQUFVLEVBQUUsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVA7QUFKYixhQURRO0FBUDhDLFdBQTdCLENBQTNCOztBQWdCQSxjQUFJZixHQUFKLEVBQVM7QUFDUixrQkFBTWdCLGFBQWEscUJBQ2ZDLElBQUksQ0FBQ0MsS0FBTCxDQUFXbEIsR0FBWCxDQURlO0FBRWxCbUIsY0FBQUEsVUFBVSxFQUFFckIsTUFBTSxDQUFDcUI7QUFGRCxjQUFuQjs7QUFJQXJCLFlBQUFBLE1BQU0sQ0FBQ2tCLGFBQVAsR0FBdUJBLGFBQXZCO0FBQ0EsV0F4QnFCLENBeUJ0Qjs7O0FBQ0F4QyxVQUFBQSxRQUFRLENBQUMwQixNQUFULEdBQWtCSCxHQUFsQjtBQUNBLGlCQUFPTCxPQUFPLENBQUMwQixVQUFSLENBQW1CNUMsUUFBbkIsRUFBNkIsQ0FBQyxPQUFELEVBQVUsS0FBVixDQUE3QixDQUFQO0FBQ0E7QUE3Qks7QUFEMEIsS0FBeEI7QUFGWDtBQW9DQSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1lcmdlIGZyb20gJ2RlZXBtZXJnZSc7XG5pbXBvcnQgbGVzcyBmcm9tICdsZXNzJztcblxuaW1wb3J0IENTU0FkYXB0ZXIgZnJvbSAnLi4vY3NzJztcbmltcG9ydCB7IGlzQWJzb2x1dGVVUkwgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9saWIvaGVscGVycyc7XG5pbXBvcnQgeyByZWFkRmlsZUFzeW5jIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vbGliL2hlbHBlcnMvZnMnO1xuXG5jbGFzcyBJbXBvcnRNYW5hZ2VyIGV4dGVuZHMgbGVzcy5GaWxlTWFuYWdlciB7XG5cdGNvbnN0cnVjdG9yKHJlc291cmNlKSB7XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLnJlc291cmNlID0gcmVzb3VyY2U7XG5cdH1cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcblx0c3VwcG9ydHMoZmlsZW5hbWUpIHtcblx0XHRyZXR1cm4gIWlzQWJzb2x1dGVVUkwoZmlsZW5hbWUpO1xuXHR9XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG5cdHN1cHBvcnRzU3luYygpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0YXN5bmMgbG9hZEZpbGUocmVxdWVzdCkge1xuXHRcdGNvbnN0IHsgcmVzb3VyY2UgfSA9IHRoaXM7XG5cdFx0Y29uc3QgZGVwZW5kZW5jeSA9IHJlc291cmNlLnJlc291cmNlRmFjdG9yeShyZXF1ZXN0LCByZXNvdXJjZSk7XG5cblx0XHRpZiAoZGVwZW5kZW5jeS5lcnJvcikge1xuXHRcdFx0dGhyb3cgZGVwZW5kZW5jeS5lcnJvcjtcblx0XHR9XG5cblx0XHRyZXNvdXJjZS5yZXNvbHZlclBhdGhzLmFkZChkZXBlbmRlbmN5LmdldE9yaWdpbkRpcigpKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRjb250ZW50czogZGVwZW5kZW5jeS5zb3VyY2UgfHwgKGF3YWl0IHJlYWRGaWxlQXN5bmMoZGVwZW5kZW5jeS5vcmlnaW4pKSxcblx0XHRcdGZpbGVuYW1lOiBkZXBlbmRlbmN5LnNsdWdcblx0XHR9O1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IChDLCBjdHgpID0+IHtcblx0Y29uc3QgYWRhcHRlciA9IENTU0FkYXB0ZXIoQywgY3R4KTtcblx0cmV0dXJuIHtcblx0XHQuLi5hZGFwdGVyLFxuXHRcdHZpc2l0b3JzOiBtZXJnZShhZGFwdGVyLnZpc2l0b3JzLCB7XG5cdFx0XHRQYXJzZToge1xuXHRcdFx0XHRwcmU6IGFzeW5jIHJlc291cmNlID0+IHtcblx0XHRcdFx0XHRjb25zdCB7IHBhcnNlciB9ID0gcmVzb3VyY2UuYWRhcHRlcjtcblx0XHRcdFx0XHRjb25zdCB7IGNzcywgbWFwIH0gPSBhd2FpdCBsZXNzLnJlbmRlcihyZXNvdXJjZS5vdXRwdXQsIHtcblx0XHRcdFx0XHRcdGZpbGVuYW1lOiByZXNvdXJjZS5zbHVnLFxuXHRcdFx0XHRcdFx0amF2YXNjcmlwdEVuYWJsZWQ6IHRydWUsXG5cdFx0XHRcdFx0XHRzb3VyY2VNYXA6IEJvb2xlYW4ocmVzb3VyY2Uub3B0aW9ucy5zb3VyY2VNYXBzKSAmJiB7XG5cdFx0XHRcdFx0XHRcdG91dHB1dFNvdXJjZUZpbGVzOiB0cnVlXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0cmVsYXRpdmVVcmxzOiB0cnVlLFxuXHRcdFx0XHRcdFx0cGx1Z2luczogW1xuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0aW5zdGFsbChfLCBwbHVnaW5NYW5hZ2VyKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwbHVnaW5NYW5hZ2VyLmFkZEZpbGVNYW5hZ2VyKG5ldyBJbXBvcnRNYW5hZ2VyKHJlc291cmNlKSk7XG5cdFx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0XHRtaW5WZXJzaW9uOiBbMiwgMywgMV1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGlmIChtYXApIHtcblx0XHRcdFx0XHRcdGNvbnN0IHNvdXJjZU1hcEpTT04gPSB7XG5cdFx0XHRcdFx0XHRcdC4uLkpTT04ucGFyc2UobWFwKSxcblx0XHRcdFx0XHRcdFx0c291cmNlUm9vdDogcGFyc2VyLnNvdXJjZVJvb3Rcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRwYXJzZXIuc291cmNlTWFwSlNPTiA9IHNvdXJjZU1hcEpTT047XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXHRcdFx0XHRcdHJlc291cmNlLm91dHB1dCA9IGNzcztcblx0XHRcdFx0XHRyZXR1cm4gYWRhcHRlci5ydW5WaXNpdG9yKHJlc291cmNlLCBbJ1BhcnNlJywgJ3ByZSddKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pXG5cdH07XG59O1xuIl19