"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNormal = isNormal;
exports.isNull = isNull;
exports.isExternal = isExternal;
exports.isResource = isResource;
exports.default = ResourceFactory;

var _path = _interopRequireDefault(require("path"));

var _bigInteger = _interopRequireDefault(require("big-integer"));

var _fs = require("../../../lib/helpers/fs");

var _helpers = require("../../../lib/helpers");

var _defineProperties = _interopRequireDefault(require("../../../lib/helpers/defineProperties"));

var _get = _interopRequireDefault(require("../../../lib/helpers/get"));

var _memoize = _interopRequireDefault(require("../../../lib/helpers/memoize"));

var _once = _interopRequireDefault(require("../../../lib/helpers/once"));

var _pick = _interopRequireDefault(require("../../../lib/helpers/pick"));

var _configStore = _interopRequireDefault(require("../../../lib/config-store"));

var _manifest = _interopRequireDefault(require("../../../lib/manifest"));

var _normal = _interopRequireDefault(require("./types/normal"));

var _null = _interopRequireDefault(require("./types/null"));

var _external = _interopRequireDefault(require("./types/external"));

var _context = _interopRequireWildcard(require("../context"));

var _union = _interopRequireDefault(require("../union"));

var _manifest2 = _interopRequireDefault(require("../generators/manifest"));

var _adapters = require("./adapters");

var _package = require("../../../../package.json");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isNormal(resource) {
  return Boolean(resource) && resource.constructor === _normal.default;
}

function isNull(resource) {
  return Boolean(resource) && resource.constructor === _null.default;
}

function isExternal(resource) {
  return Boolean(resource) && resource.constructor === _external.default;
}

function isResource(value) {
  return isNormal(value) || isNull(value) || isExternal(value);
}

function ResourceFactory(options) {
  const contextFactory = new _context.default(options);
  const unionFactory = new _union.default(options);

  const C = _configStore.default.from(options);

  const outputPath = _path.default.join(C.outputDir, '.__resources__.json');

  const {
    logger
  } = C;
  const readPackage = (0, _memoize.default)(async resource => {
    const {
      resolved
    } = contextFactory('package.json', resource.getResolverPaths());
    const pkg = await (0, _fs.readJSONAsync)(resolved);
    return (0, _pick.default)(pkg, [...C.mainFields, 'version']);
  }, resource => resource.packageId);
  const createResource = (0, _memoize.default)(ctx => {
    const adapter = (0, _adapters.getAdapter)(C, ctx);
    const resourceOpts = {
      ctx,
      adapter,
      logger,
      contextFactory,
      unionFactory,
      // eslint-disable-next-line no-use-before-define
      resourceFactory: factory,
      options: (0, _helpers.omit)(C, ['logger'])
    };
    let resource;

    switch (true) {
      case ctx.isExternal():
        resource = new _external.default(resourceOpts);
        break;

      case ctx.isNull():
        resource = new _null.default(resourceOpts);
        break;

      default:
        resource = new _normal.default(resourceOpts);
        break;
    }

    return resource;
  }, ctx => `${ctx.origin}:${ctx.resolved}`);
  const applyRequestContext = (0, _memoize.default)(({
    ctx,
    parent,
    resource
  }) => {
    // Set async and run resource middleware once per context
    resource.setAsync(ctx.async || parent && parent.async);
    C.runMiddleware('resource', [resource, ctx]);
  }, ({
    ctx
  }) => ctx);

  async function generateManifest(resource) {
    const deepDependencySet = resource.getDeepDependencySet((dependency, request) => !request.async && dependency.isNormal());
    const meta = resource.getMeta();
    const packages = {
      [resource.packageId]: await readPackage(resource)
    };
    const deepDependencyArray = await Promise.all([...deepDependencySet].sort((a, b) => (0, _bigInteger.default)(b.index).compare((0, _bigInteger.default)(a.index))).map(async dependency => {
      if (!packages[dependency.packageId]) {
        packages[dependency.packageId] = await readPackage(dependency);
      }

      return dependency.getMeta();
    })); // Make sure packages are sorted alphabetically

    Object.keys(packages).sort((a, b) => a.localeCompare(b)).forEach(key => {
      const value = packages[key];
      delete packages[key];
      packages[key] = value;
    });
    const manifest = new _manifest.default(deepDependencyArray, {
      meta,
      packages
    });
    const manifestPath = (0, _context.getManifestPath)(resource.getOutputPath());
    await (0, _fs.mkdirpAsync)(resource.getOutputDir());
    return (0, _fs.writeFileAsync)(manifestPath, (0, _manifest2.default)(manifest));
  }

  async function getResourceJSON() {
    let json;

    try {
      json = await (0, _fs.readJSONAsync)(outputPath); // FIXME: Check semver range or use a dedicated cachefile version

      if (json.version !== _package.version) {
        json = null;
      }
    } catch (err) {
      if (err.code !== 'ENOENT') {
        throw err;
      }
    }

    return json || {
      map: {},
      cache: []
    };
  }

  function getResourceIndex(ctx, parent) {
    const requestIndex = parent ? parent.adapter.parser.requests.findIndex(({
      value
    }) => value === ctx.originalRequest) : 0;
    return requestIndex < 0 ? undefined : `${(0, _get.default)(parent, ['index']) || 1}0${requestIndex}`;
  }

  function factory(request = C.entry, parent) {
    let resource;
    let ctx;

    if (isResource(request)) {
      resource = request;
      ctx = contextFactory(resource.origin, parent && parent.getResolverPaths());
    } else {
      ctx = contextFactory(request, parent && parent.getResolverPaths());
      resource = createResource(ctx);
    }

    if (!resource.index) {
      resource.index = getResourceIndex(ctx, parent);
    }

    applyRequestContext({
      ctx,
      parent,
      resource
    });
    return resource;
  }

  return (0, _defineProperties.default)(factory, {
    name: 'ResourceFactory',
    outputPath,
    getResourceIndex,
    getResourceJSON,
    generateManifest,
    readPackage,
    isResource,
    isNormal,
    isNull,
    isExternal,
    contextFactory,
    unionFactory,
    failed: {
      value: false,
      writable: true
    },
    load: (0, _once.default)(async () => {
      const {
        cache
      } = await getResourceJSON();
      return cache.length ? factory.import(cache) : factory();
    }),

    import(exportJSON) {
      const resourceDataByModuleId = new Map();
      const hydratedResources = new Set();
      const missingRequests = new Set();
      const requestProcessors = [];
      exportJSON.forEach(data => {
        const {
          moduleId,
          slug,
          requests
        } = data;
        const origin = contextFactory.safeResolve(slug);
        const baseDir = origin && _path.default.isAbsolute(origin) ? _path.default.dirname(origin) : undefined; // The first element in exportJSON is the entrypoint

        if (data === exportJSON[0]) {
          const ctx = contextFactory(C.entry); // Make sure the cached entrypoint is the same as the resolved entrypoint

          if (moduleId === ctx.moduleId) {
            const resource = createResource(ctx).hydrate(data);
            hydratedResources.add(resource);
          } else {
            exportJSON.forEach(obj => {
              // eslint-disable-next-line no-param-reassign
              obj.index = undefined;
            });
          }
        }

        resourceDataByModuleId.set(moduleId, data);
        requestProcessors.push(() => {
          // Iterate over each resource's requests array
          requests.forEach(requestObject => {
            // Recreate and hydrate each dependency resource using the original request context
            const ctx = contextFactory(requestObject, [baseDir]);
            const resourceJSON = resourceDataByModuleId.get(ctx.moduleId);

            if (resourceJSON) {
              const resource = createResource(ctx).hydrate(resourceJSON);
              hydratedResources.add(resource);
            } else {
              missingRequests.add(requestObject);
            }
          });
        });
      }); // Process the requests for each resource

      requestProcessors.forEach(fn => fn()); // Rebuild the dependency graph

      hydratedResources.forEach(resource => {
        if (resourceDataByModuleId.has(resource.moduleId)) {
          const {
            requests
          } = resourceDataByModuleId.get(resource.moduleId);
          requests.forEach(requestObject => {
            const dependency = factory(requestObject, resource);
            resource.addDependency(requestObject, dependency);

            if (missingRequests.has(requestObject) && dependency.isNull()) {
              resource.removeFromUnion();
              resource.markDirty();
            }
          });
        }
      }); // return the entrypoint

      return factory();
    },

    export() {
      const entrypoint = factory();
      return [entrypoint, ...entrypoint.getDeepDependencySet()].sort((a, b) => (0, _bigInteger.default)(a.index).compare((0, _bigInteger.default)(b.index)));
    },

    uncache(query) {
      if (query) {
        for (const [key, resource] of createResource.cache) {
          if ((0, _helpers.matches)(resource, query)) {
            readPackage.cache.delete(readPackage.resolver(resource));
            createResource.cache.delete(key);
          }
        }
      } else {
        unionFactory.cache.clear();
        contextFactory.uncache();
        readPackage.cache.clear();
        createResource.cache.clear();
        factory.load.clear();
      }
    },

    async save() {
      const resources = factory.export();
      const moduleMap = resources.reduce((acc, resource) => {
        const outputSlug = resource.getOutputSlug();

        if (resource.slug !== outputSlug) {
          acc[resource.slug] = outputSlug;
        }

        return acc;
      }, {});
      const assetMap = resources.reduce((acc, resource) => {
        const outputSlug = resource.getOutputSlug();
        const assetId = resource.getAssetId();

        if (assetId && outputSlug !== assetId) {
          acc[outputSlug] = assetId;
        }

        return acc;
      }, {});
      await (0, _fs.mkdirpAsync)(C.outputDir);
      await (0, _fs.writeJSONAsync)(outputPath, {
        version: _package.version,
        modules: moduleMap,
        assets: assetMap,
        cache: resources
      });
    },

    async reset() {
      factory.uncache();
      await (0, _fs.rimrafAsync)(C.outputDir);
    }

  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,