"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _noop = _interopRequireDefault(require("../../lib/helpers/noop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ModuleTransport {
  constructor(loader) {
    _defineProperty(this, "pending", new Map());

    this.loader = loader;
  }

  // eslint-disable-next-line class-methods-use-this
  getResetPredicate() {// noop
  }

  getManifestJSON(id) {
    return this.loader.fetchManifestJSON(id);
  }

  initialize(request, parent) {
    const {
      loader,
      pending
    } = this;

    if (!pending.has(request)) {
      pending.set(request, new Promise(async (resolve, reject) => {
        try {
          let pid = loader.resolvePid(request, parent);
          let moduleId = loader.resolve(request, parent);
          let module;

          if (loader.getFromContext(pid)) {
            module = loader.register({
              content: 'this;',
              id: moduleId,
              pid,
              parent
            });
          } else {
            const url = loader.resolveURL(request, parent);
            const res = await loader.fetch(url);

            if (res.ok) {
              moduleId = res.headers['x-module-id'];
              pid = Number(res.headers['x-pointer-id']);
              module = loader.register({
                content: await res.text(),
                id: moduleId,
                pid,
                parent
              });
            } else {
              const _ref = await res.json(),
                    {
                message
              } = _ref,
                    other = _objectWithoutProperties(_ref, ["message"]);

              const messageWithContext = parent ? `${message}${parent.trace()}` : message;
              throw Object.assign(new Error(messageWithContext), other);
            }
          }

          resolve(module);
        } catch (err) {
          reject(err);
        }
      }));
      pending.get(request).catch(_noop.default).then(() => {
        pending.delete(request);
      });
    }

    return pending.get(request);
  }

}

exports.default = ModuleTransport;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbGllbnQvbW9kdWxlLXRyYW5zcG9ydC9ub2RlLmpzIl0sIm5hbWVzIjpbIk1vZHVsZVRyYW5zcG9ydCIsImNvbnN0cnVjdG9yIiwibG9hZGVyIiwiTWFwIiwiZ2V0UmVzZXRQcmVkaWNhdGUiLCJnZXRNYW5pZmVzdEpTT04iLCJpZCIsImZldGNoTWFuaWZlc3RKU09OIiwiaW5pdGlhbGl6ZSIsInJlcXVlc3QiLCJwYXJlbnQiLCJwZW5kaW5nIiwiaGFzIiwic2V0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJwaWQiLCJyZXNvbHZlUGlkIiwibW9kdWxlSWQiLCJtb2R1bGUiLCJnZXRGcm9tQ29udGV4dCIsInJlZ2lzdGVyIiwiY29udGVudCIsInVybCIsInJlc29sdmVVUkwiLCJyZXMiLCJmZXRjaCIsIm9rIiwiaGVhZGVycyIsIk51bWJlciIsInRleHQiLCJqc29uIiwibWVzc2FnZSIsIm90aGVyIiwibWVzc2FnZVdpdGhDb250ZXh0IiwidHJhY2UiLCJPYmplY3QiLCJhc3NpZ24iLCJFcnJvciIsImVyciIsImdldCIsImNhdGNoIiwibm9vcCIsInRoZW4iLCJkZWxldGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7Ozs7OztBQUVlLE1BQU1BLGVBQU4sQ0FBc0I7QUFDcENDLEVBQUFBLFdBQVcsQ0FBQ0MsTUFBRCxFQUFTO0FBQUEscUNBSVYsSUFBSUMsR0FBSixFQUpVOztBQUNuQixTQUFLRCxNQUFMLEdBQWNBLE1BQWQ7QUFDQTs7QUFJRDtBQUNBRSxFQUFBQSxpQkFBaUIsR0FBRyxDQUNuQjtBQUNBOztBQUVEQyxFQUFBQSxlQUFlLENBQUNDLEVBQUQsRUFBSztBQUNuQixXQUFPLEtBQUtKLE1BQUwsQ0FBWUssaUJBQVosQ0FBOEJELEVBQTlCLENBQVA7QUFDQTs7QUFFREUsRUFBQUEsVUFBVSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBa0I7QUFDM0IsVUFBTTtBQUFFUixNQUFBQSxNQUFGO0FBQVVTLE1BQUFBO0FBQVYsUUFBc0IsSUFBNUI7O0FBQ0EsUUFBSSxDQUFDQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUgsT0FBWixDQUFMLEVBQTJCO0FBQzFCRSxNQUFBQSxPQUFPLENBQUNFLEdBQVIsQ0FDQ0osT0FERCxFQUVDLElBQUlLLE9BQUosQ0FBWSxPQUFPQyxPQUFQLEVBQWdCQyxNQUFoQixLQUEyQjtBQUN0QyxZQUFJO0FBQ0gsY0FBSUMsR0FBRyxHQUFHZixNQUFNLENBQUNnQixVQUFQLENBQWtCVCxPQUFsQixFQUEyQkMsTUFBM0IsQ0FBVjtBQUNBLGNBQUlTLFFBQVEsR0FBR2pCLE1BQU0sQ0FBQ2EsT0FBUCxDQUFlTixPQUFmLEVBQXdCQyxNQUF4QixDQUFmO0FBQ0EsY0FBSVUsTUFBSjs7QUFFQSxjQUFJbEIsTUFBTSxDQUFDbUIsY0FBUCxDQUFzQkosR0FBdEIsQ0FBSixFQUFnQztBQUMvQkcsWUFBQUEsTUFBTSxHQUFHbEIsTUFBTSxDQUFDb0IsUUFBUCxDQUFnQjtBQUFFQyxjQUFBQSxPQUFPLEVBQUUsT0FBWDtBQUFvQmpCLGNBQUFBLEVBQUUsRUFBRWEsUUFBeEI7QUFBa0NGLGNBQUFBLEdBQWxDO0FBQXVDUCxjQUFBQTtBQUF2QyxhQUFoQixDQUFUO0FBQ0EsV0FGRCxNQUVPO0FBQ04sa0JBQU1jLEdBQUcsR0FBR3RCLE1BQU0sQ0FBQ3VCLFVBQVAsQ0FBa0JoQixPQUFsQixFQUEyQkMsTUFBM0IsQ0FBWjtBQUNBLGtCQUFNZ0IsR0FBRyxHQUFHLE1BQU14QixNQUFNLENBQUN5QixLQUFQLENBQWFILEdBQWIsQ0FBbEI7O0FBQ0EsZ0JBQUlFLEdBQUcsQ0FBQ0UsRUFBUixFQUFZO0FBQ1hULGNBQUFBLFFBQVEsR0FBR08sR0FBRyxDQUFDRyxPQUFKLENBQVksYUFBWixDQUFYO0FBQ0FaLGNBQUFBLEdBQUcsR0FBR2EsTUFBTSxDQUFDSixHQUFHLENBQUNHLE9BQUosQ0FBWSxjQUFaLENBQUQsQ0FBWjtBQUNBVCxjQUFBQSxNQUFNLEdBQUdsQixNQUFNLENBQUNvQixRQUFQLENBQWdCO0FBQUVDLGdCQUFBQSxPQUFPLEVBQUUsTUFBTUcsR0FBRyxDQUFDSyxJQUFKLEVBQWpCO0FBQTZCekIsZ0JBQUFBLEVBQUUsRUFBRWEsUUFBakM7QUFBMkNGLGdCQUFBQSxHQUEzQztBQUFnRFAsZ0JBQUFBO0FBQWhELGVBQWhCLENBQVQ7QUFDQSxhQUpELE1BSU87QUFDTiwyQkFBOEIsTUFBTWdCLEdBQUcsQ0FBQ00sSUFBSixFQUFwQztBQUFBLG9CQUFNO0FBQUVDLGdCQUFBQTtBQUFGLGVBQU47QUFBQSxvQkFBb0JDLEtBQXBCOztBQUNBLG9CQUFNQyxrQkFBa0IsR0FBR3pCLE1BQU0sR0FBSSxHQUFFdUIsT0FBUSxHQUFFdkIsTUFBTSxDQUFDMEIsS0FBUCxFQUFlLEVBQS9CLEdBQW1DSCxPQUFwRTtBQUNBLG9CQUFNSSxNQUFNLENBQUNDLE1BQVAsQ0FBYyxJQUFJQyxLQUFKLENBQVVKLGtCQUFWLENBQWQsRUFBNkNELEtBQTdDLENBQU47QUFDQTtBQUNEOztBQUVEbkIsVUFBQUEsT0FBTyxDQUFDSyxNQUFELENBQVA7QUFDQSxTQXRCRCxDQXNCRSxPQUFPb0IsR0FBUCxFQUFZO0FBQ2J4QixVQUFBQSxNQUFNLENBQUN3QixHQUFELENBQU47QUFDQTtBQUNELE9BMUJELENBRkQ7QUE4QkE3QixNQUFBQSxPQUFPLENBQ0w4QixHQURGLENBQ01oQyxPQUROLEVBRUVpQyxLQUZGLENBRVFDLGFBRlIsRUFHRUMsSUFIRixDQUdPLE1BQU07QUFDWGpDLFFBQUFBLE9BQU8sQ0FBQ2tDLE1BQVIsQ0FBZXBDLE9BQWY7QUFDQSxPQUxGO0FBTUE7O0FBQ0QsV0FBT0UsT0FBTyxDQUFDOEIsR0FBUixDQUFZaEMsT0FBWixDQUFQO0FBQ0E7O0FBekRtQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBub29wIGZyb20gJy4uLy4uL2xpYi9oZWxwZXJzL25vb3AnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2R1bGVUcmFuc3BvcnQge1xuXHRjb25zdHJ1Y3Rvcihsb2FkZXIpIHtcblx0XHR0aGlzLmxvYWRlciA9IGxvYWRlcjtcblx0fVxuXG5cdHBlbmRpbmcgPSBuZXcgTWFwKCk7XG5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcblx0Z2V0UmVzZXRQcmVkaWNhdGUoKSB7XG5cdFx0Ly8gbm9vcFxuXHR9XG5cblx0Z2V0TWFuaWZlc3RKU09OKGlkKSB7XG5cdFx0cmV0dXJuIHRoaXMubG9hZGVyLmZldGNoTWFuaWZlc3RKU09OKGlkKTtcblx0fVxuXG5cdGluaXRpYWxpemUocmVxdWVzdCwgcGFyZW50KSB7XG5cdFx0Y29uc3QgeyBsb2FkZXIsIHBlbmRpbmcgfSA9IHRoaXM7XG5cdFx0aWYgKCFwZW5kaW5nLmhhcyhyZXF1ZXN0KSkge1xuXHRcdFx0cGVuZGluZy5zZXQoXG5cdFx0XHRcdHJlcXVlc3QsXG5cdFx0XHRcdG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0bGV0IHBpZCA9IGxvYWRlci5yZXNvbHZlUGlkKHJlcXVlc3QsIHBhcmVudCk7XG5cdFx0XHRcdFx0XHRsZXQgbW9kdWxlSWQgPSBsb2FkZXIucmVzb2x2ZShyZXF1ZXN0LCBwYXJlbnQpO1xuXHRcdFx0XHRcdFx0bGV0IG1vZHVsZTtcblxuXHRcdFx0XHRcdFx0aWYgKGxvYWRlci5nZXRGcm9tQ29udGV4dChwaWQpKSB7XG5cdFx0XHRcdFx0XHRcdG1vZHVsZSA9IGxvYWRlci5yZWdpc3Rlcih7IGNvbnRlbnQ6ICd0aGlzOycsIGlkOiBtb2R1bGVJZCwgcGlkLCBwYXJlbnQgfSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjb25zdCB1cmwgPSBsb2FkZXIucmVzb2x2ZVVSTChyZXF1ZXN0LCBwYXJlbnQpO1xuXHRcdFx0XHRcdFx0XHRjb25zdCByZXMgPSBhd2FpdCBsb2FkZXIuZmV0Y2godXJsKTtcblx0XHRcdFx0XHRcdFx0aWYgKHJlcy5vaykge1xuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkID0gcmVzLmhlYWRlcnNbJ3gtbW9kdWxlLWlkJ107XG5cdFx0XHRcdFx0XHRcdFx0cGlkID0gTnVtYmVyKHJlcy5oZWFkZXJzWyd4LXBvaW50ZXItaWQnXSk7XG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlID0gbG9hZGVyLnJlZ2lzdGVyKHsgY29udGVudDogYXdhaXQgcmVzLnRleHQoKSwgaWQ6IG1vZHVsZUlkLCBwaWQsIHBhcmVudCB9KTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb25zdCB7IG1lc3NhZ2UsIC4uLm90aGVyIH0gPSBhd2FpdCByZXMuanNvbigpO1xuXHRcdFx0XHRcdFx0XHRcdGNvbnN0IG1lc3NhZ2VXaXRoQ29udGV4dCA9IHBhcmVudCA/IGAke21lc3NhZ2V9JHtwYXJlbnQudHJhY2UoKX1gIDogbWVzc2FnZTtcblx0XHRcdFx0XHRcdFx0XHR0aHJvdyBPYmplY3QuYXNzaWduKG5ldyBFcnJvcihtZXNzYWdlV2l0aENvbnRleHQpLCBvdGhlcik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0cmVzb2x2ZShtb2R1bGUpO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRcdFx0cmVqZWN0KGVycik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KVxuXHRcdFx0KTtcblx0XHRcdHBlbmRpbmdcblx0XHRcdFx0LmdldChyZXF1ZXN0KVxuXHRcdFx0XHQuY2F0Y2gobm9vcClcblx0XHRcdFx0LnRoZW4oKCkgPT4ge1xuXHRcdFx0XHRcdHBlbmRpbmcuZGVsZXRlKHJlcXVlc3QpO1xuXHRcdFx0XHR9KTtcblx0XHR9XG5cdFx0cmV0dXJuIHBlbmRpbmcuZ2V0KHJlcXVlc3QpO1xuXHR9XG59XG4iXX0=