"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Request;

var _deferred = _interopRequireDefault(require("../../lib/helpers/deferred"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const {
  XMLHttpRequest
} = global;

function parseHeaders(xhr) {
  return xhr.getAllResponseHeaders().split('\n').filter(Boolean).reduce((acc, line) => {
    const [, key, value] = line.match(/^([^:]+):\s(.+)/);
    acc[key.toLowerCase()] = value;
    return acc;
  }, {});
}

function Request() {
  return (url, {
    method = 'GET',
    headers = {}
  }) => new Promise((resolve, reject) => {
    const deferred = (0, _deferred.default)();
    const xhr = new XMLHttpRequest();
    const res = {
      get status() {
        return xhr.status;
      },

      get body() {
        return xhr.response;
      },

      get ok() {
        return res.status < 400;
      },

      json: async () => {
        await deferred.promise;
        return JSON.parse(res.body);
      },
      text: async () => {
        await deferred.promise;
        return res.body;
      }
    };
    xhr.addEventListener('readystatechange', () => {
      switch (xhr.readyState) {
        case xhr.HEADERS_RECEIVED:
          res.headers = parseHeaders(xhr);
          resolve(res);
          break;

        case xhr.DONE:
          deferred.resolve();
          break;

        default:
          // noop
          break;
      }
    });
    xhr.addEventListener('error', reject);
    xhr.open(method, url);
    Object.entries(headers).forEach(([key, value]) => {
      xhr.setRequestHeader(key, value);
    });
    xhr.send();
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbGllbnQvcmVxdWVzdC9icm93c2VyLmpzIl0sIm5hbWVzIjpbIlhNTEh0dHBSZXF1ZXN0IiwiZ2xvYmFsIiwicGFyc2VIZWFkZXJzIiwieGhyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic3BsaXQiLCJmaWx0ZXIiLCJCb29sZWFuIiwicmVkdWNlIiwiYWNjIiwibGluZSIsImtleSIsInZhbHVlIiwibWF0Y2giLCJ0b0xvd2VyQ2FzZSIsIlJlcXVlc3QiLCJ1cmwiLCJtZXRob2QiLCJoZWFkZXJzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJkZWZlcnJlZCIsInJlcyIsInN0YXR1cyIsImJvZHkiLCJyZXNwb25zZSIsIm9rIiwianNvbiIsInByb21pc2UiLCJKU09OIiwicGFyc2UiLCJ0ZXh0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlYWR5U3RhdGUiLCJIRUFERVJTX1JFQ0VJVkVEIiwiRE9ORSIsIm9wZW4iLCJPYmplY3QiLCJlbnRyaWVzIiwiZm9yRWFjaCIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7QUFFQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBcUJDLE1BQTNCOztBQUVBLFNBQVNDLFlBQVQsQ0FBc0JDLEdBQXRCLEVBQTJCO0FBQzFCLFNBQU9BLEdBQUcsQ0FDUkMscUJBREssR0FFTEMsS0FGSyxDQUVDLElBRkQsRUFHTEMsTUFISyxDQUdFQyxPQUhGLEVBSUxDLE1BSkssQ0FJRSxDQUFDQyxHQUFELEVBQU1DLElBQU4sS0FBZTtBQUN0QixVQUFNLEdBQUdDLEdBQUgsRUFBUUMsS0FBUixJQUFpQkYsSUFBSSxDQUFDRyxLQUFMLENBQVcsaUJBQVgsQ0FBdkI7QUFDQUosSUFBQUEsR0FBRyxDQUFDRSxHQUFHLENBQUNHLFdBQUosRUFBRCxDQUFILEdBQXlCRixLQUF6QjtBQUNBLFdBQU9ILEdBQVA7QUFDQSxHQVJLLEVBUUgsRUFSRyxDQUFQO0FBU0E7O0FBRWMsU0FBU00sT0FBVCxHQUFtQjtBQUNqQyxTQUFPLENBQUNDLEdBQUQsRUFBTTtBQUFFQyxJQUFBQSxNQUFNLEdBQUcsS0FBWDtBQUFrQkMsSUFBQUEsT0FBTyxHQUFHO0FBQTVCLEdBQU4sS0FDTixJQUFJQyxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ2hDLFVBQU1DLFFBQVEsR0FBRyx3QkFBakI7QUFDQSxVQUFNbkIsR0FBRyxHQUFHLElBQUlILGNBQUosRUFBWjtBQUNBLFVBQU11QixHQUFHLEdBQUc7QUFDWCxVQUFJQyxNQUFKLEdBQWE7QUFDWixlQUFPckIsR0FBRyxDQUFDcUIsTUFBWDtBQUNBLE9BSFU7O0FBSVgsVUFBSUMsSUFBSixHQUFXO0FBQ1YsZUFBT3RCLEdBQUcsQ0FBQ3VCLFFBQVg7QUFDQSxPQU5VOztBQU9YLFVBQUlDLEVBQUosR0FBUztBQUNSLGVBQU9KLEdBQUcsQ0FBQ0MsTUFBSixHQUFhLEdBQXBCO0FBQ0EsT0FUVTs7QUFVWEksTUFBQUEsSUFBSSxFQUFFLFlBQVk7QUFDakIsY0FBTU4sUUFBUSxDQUFDTyxPQUFmO0FBQ0EsZUFBT0MsSUFBSSxDQUFDQyxLQUFMLENBQVdSLEdBQUcsQ0FBQ0UsSUFBZixDQUFQO0FBQ0EsT0FiVTtBQWNYTyxNQUFBQSxJQUFJLEVBQUUsWUFBWTtBQUNqQixjQUFNVixRQUFRLENBQUNPLE9BQWY7QUFDQSxlQUFPTixHQUFHLENBQUNFLElBQVg7QUFDQTtBQWpCVSxLQUFaO0FBb0JBdEIsSUFBQUEsR0FBRyxDQUFDOEIsZ0JBQUosQ0FBcUIsa0JBQXJCLEVBQXlDLE1BQU07QUFDOUMsY0FBUTlCLEdBQUcsQ0FBQytCLFVBQVo7QUFDQyxhQUFLL0IsR0FBRyxDQUFDZ0MsZ0JBQVQ7QUFDQ1osVUFBQUEsR0FBRyxDQUFDTCxPQUFKLEdBQWNoQixZQUFZLENBQUNDLEdBQUQsQ0FBMUI7QUFDQWlCLFVBQUFBLE9BQU8sQ0FBQ0csR0FBRCxDQUFQO0FBQ0E7O0FBRUQsYUFBS3BCLEdBQUcsQ0FBQ2lDLElBQVQ7QUFDQ2QsVUFBQUEsUUFBUSxDQUFDRixPQUFUO0FBQ0E7O0FBRUQ7QUFDQztBQUNBO0FBWkY7QUFjQSxLQWZEO0FBaUJBakIsSUFBQUEsR0FBRyxDQUFDOEIsZ0JBQUosQ0FBcUIsT0FBckIsRUFBOEJaLE1BQTlCO0FBRUFsQixJQUFBQSxHQUFHLENBQUNrQyxJQUFKLENBQVNwQixNQUFULEVBQWlCRCxHQUFqQjtBQUVBc0IsSUFBQUEsTUFBTSxDQUFDQyxPQUFQLENBQWVyQixPQUFmLEVBQXdCc0IsT0FBeEIsQ0FBZ0MsQ0FBQyxDQUFDN0IsR0FBRCxFQUFNQyxLQUFOLENBQUQsS0FBa0I7QUFDakRULE1BQUFBLEdBQUcsQ0FBQ3NDLGdCQUFKLENBQXFCOUIsR0FBckIsRUFBMEJDLEtBQTFCO0FBQ0EsS0FGRDtBQUlBVCxJQUFBQSxHQUFHLENBQUN1QyxJQUFKO0FBQ0EsR0FqREQsQ0FERDtBQW1EQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEZWZlcnJlZCBmcm9tICcuLi8uLi9saWIvaGVscGVycy9kZWZlcnJlZCc7XG5cbmNvbnN0IHsgWE1MSHR0cFJlcXVlc3QgfSA9IGdsb2JhbDtcblxuZnVuY3Rpb24gcGFyc2VIZWFkZXJzKHhocikge1xuXHRyZXR1cm4geGhyXG5cdFx0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0LnNwbGl0KCdcXG4nKVxuXHRcdC5maWx0ZXIoQm9vbGVhbilcblx0XHQucmVkdWNlKChhY2MsIGxpbmUpID0+IHtcblx0XHRcdGNvbnN0IFssIGtleSwgdmFsdWVdID0gbGluZS5tYXRjaCgvXihbXjpdKyk6XFxzKC4rKS8pO1xuXHRcdFx0YWNjW2tleS50b0xvd2VyQ2FzZSgpXSA9IHZhbHVlO1xuXHRcdFx0cmV0dXJuIGFjYztcblx0XHR9LCB7fSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFJlcXVlc3QoKSB7XG5cdHJldHVybiAodXJsLCB7IG1ldGhvZCA9ICdHRVQnLCBoZWFkZXJzID0ge30gfSkgPT5cblx0XHRuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRjb25zdCBkZWZlcnJlZCA9IERlZmVycmVkKCk7XG5cdFx0XHRjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblx0XHRcdGNvbnN0IHJlcyA9IHtcblx0XHRcdFx0Z2V0IHN0YXR1cygpIHtcblx0XHRcdFx0XHRyZXR1cm4geGhyLnN0YXR1cztcblx0XHRcdFx0fSxcblx0XHRcdFx0Z2V0IGJvZHkoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHhoci5yZXNwb25zZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0Z2V0IG9rKCkge1xuXHRcdFx0XHRcdHJldHVybiByZXMuc3RhdHVzIDwgNDAwO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRqc29uOiBhc3luYyAoKSA9PiB7XG5cdFx0XHRcdFx0YXdhaXQgZGVmZXJyZWQucHJvbWlzZTtcblx0XHRcdFx0XHRyZXR1cm4gSlNPTi5wYXJzZShyZXMuYm9keSk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRleHQ6IGFzeW5jICgpID0+IHtcblx0XHRcdFx0XHRhd2FpdCBkZWZlcnJlZC5wcm9taXNlO1xuXHRcdFx0XHRcdHJldHVybiByZXMuYm9keTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdFx0eGhyLmFkZEV2ZW50TGlzdGVuZXIoJ3JlYWR5c3RhdGVjaGFuZ2UnLCAoKSA9PiB7XG5cdFx0XHRcdHN3aXRjaCAoeGhyLnJlYWR5U3RhdGUpIHtcblx0XHRcdFx0XHRjYXNlIHhoci5IRUFERVJTX1JFQ0VJVkVEOlxuXHRcdFx0XHRcdFx0cmVzLmhlYWRlcnMgPSBwYXJzZUhlYWRlcnMoeGhyKTtcblx0XHRcdFx0XHRcdHJlc29sdmUocmVzKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSB4aHIuRE9ORTpcblx0XHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmUoKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdC8vIG5vb3Bcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0eGhyLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgcmVqZWN0KTtcblxuXHRcdFx0eGhyLm9wZW4obWV0aG9kLCB1cmwpO1xuXG5cdFx0XHRPYmplY3QuZW50cmllcyhoZWFkZXJzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcblx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWx1ZSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0eGhyLnNlbmQoKTtcblx0XHR9KTtcbn1cbiJdfQ==