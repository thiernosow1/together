"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Request;

var _url = _interopRequireDefault(require("url"));

var _http = _interopRequireDefault(require("http"));

var _https = _interopRequireDefault(require("https"));

var _agentkeepalive = _interopRequireWildcard(require("agentkeepalive"));

var _deferred = _interopRequireDefault(require("../../lib/helpers/deferred"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function Request(_ref) {
  let {
    protocol
  } = _ref,
      other = _objectWithoutProperties(_ref, ["protocol"]);

  const provider = protocol === 'https:' ? _https.default : _http.default;
  const Agent = protocol === 'https:' ? _agentkeepalive.HttpsAgent : _agentkeepalive.default;
  const agent = new Agent(_objectSpread({
    maxSockets: 100,
    maxFreeSockets: 10,
    timeout: 60000,
    freeSocketKeepAliveTimeout: 30000
  }, other));
  return (url, opts) => new Promise((resolve, reject) => {
    const req = provider.request(_objectSpread({
      agent
    }, _url.default.parse(url), opts), res => {
      const status = res.statusCode;
      const deferred = (0, _deferred.default)();
      let body = '';
      res.on('data', chunk => {
        body += chunk;
      });
      res.on('error', deferred.reject);
      res.on('end', deferred.resolve);
      resolve(Object.assign(res, {
        status,
        ok: status < 400,
        body: res,
        json: async () => {
          await deferred.promise;
          return JSON.parse(body);
        },
        text: async () => {
          await deferred.promise;
          return body;
        }
      }));
    });
    req.on('error', reject);
    req.end();
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbGllbnQvcmVxdWVzdC9ub2RlLmpzIl0sIm5hbWVzIjpbIlJlcXVlc3QiLCJwcm90b2NvbCIsIm90aGVyIiwicHJvdmlkZXIiLCJodHRwcyIsImh0dHAiLCJBZ2VudCIsIkh0dHBzQWdlbnQiLCJIdHRwQWdlbnQiLCJhZ2VudCIsIm1heFNvY2tldHMiLCJtYXhGcmVlU29ja2V0cyIsInRpbWVvdXQiLCJmcmVlU29ja2V0S2VlcEFsaXZlVGltZW91dCIsInVybCIsIm9wdHMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlcSIsInJlcXVlc3QiLCJVcmwiLCJwYXJzZSIsInJlcyIsInN0YXR1cyIsInN0YXR1c0NvZGUiLCJkZWZlcnJlZCIsImJvZHkiLCJvbiIsImNodW5rIiwiT2JqZWN0IiwiYXNzaWduIiwib2siLCJqc29uIiwicHJvbWlzZSIsIkpTT04iLCJ0ZXh0IiwiZW5kIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBRUE7Ozs7Ozs7Ozs7Ozs7O0FBRWUsU0FBU0EsT0FBVCxPQUF5QztBQUFBLE1BQXhCO0FBQUVDLElBQUFBO0FBQUYsR0FBd0I7QUFBQSxNQUFUQyxLQUFTOztBQUN2RCxRQUFNQyxRQUFRLEdBQUdGLFFBQVEsS0FBSyxRQUFiLEdBQXdCRyxjQUF4QixHQUFnQ0MsYUFBakQ7QUFDQSxRQUFNQyxLQUFLLEdBQUdMLFFBQVEsS0FBSyxRQUFiLEdBQXdCTSwwQkFBeEIsR0FBcUNDLHVCQUFuRDtBQUNBLFFBQU1DLEtBQUssR0FBRyxJQUFJSCxLQUFKO0FBQ2JJLElBQUFBLFVBQVUsRUFBRSxHQURDO0FBRWJDLElBQUFBLGNBQWMsRUFBRSxFQUZIO0FBR2JDLElBQUFBLE9BQU8sRUFBRSxLQUhJO0FBSWJDLElBQUFBLDBCQUEwQixFQUFFO0FBSmYsS0FLVlgsS0FMVSxFQUFkO0FBUUEsU0FBTyxDQUFDWSxHQUFELEVBQU1DLElBQU4sS0FDTixJQUFJQyxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ2hDLFVBQU1DLEdBQUcsR0FBR2hCLFFBQVEsQ0FBQ2lCLE9BQVQ7QUFBbUJYLE1BQUFBO0FBQW5CLE9BQTZCWSxhQUFJQyxLQUFKLENBQVVSLEdBQVYsQ0FBN0IsRUFBZ0RDLElBQWhELEdBQXdEUSxHQUFHLElBQUk7QUFDMUUsWUFBTUMsTUFBTSxHQUFHRCxHQUFHLENBQUNFLFVBQW5CO0FBQ0EsWUFBTUMsUUFBUSxHQUFHLHdCQUFqQjtBQUNBLFVBQUlDLElBQUksR0FBRyxFQUFYO0FBQ0FKLE1BQUFBLEdBQUcsQ0FBQ0ssRUFBSixDQUFPLE1BQVAsRUFBZUMsS0FBSyxJQUFJO0FBQ3ZCRixRQUFBQSxJQUFJLElBQUlFLEtBQVI7QUFDQSxPQUZEO0FBR0FOLE1BQUFBLEdBQUcsQ0FBQ0ssRUFBSixDQUFPLE9BQVAsRUFBZ0JGLFFBQVEsQ0FBQ1IsTUFBekI7QUFDQUssTUFBQUEsR0FBRyxDQUFDSyxFQUFKLENBQU8sS0FBUCxFQUFjRixRQUFRLENBQUNULE9BQXZCO0FBQ0FBLE1BQUFBLE9BQU8sQ0FDTmEsTUFBTSxDQUFDQyxNQUFQLENBQWNSLEdBQWQsRUFBbUI7QUFDbEJDLFFBQUFBLE1BRGtCO0FBRWxCUSxRQUFBQSxFQUFFLEVBQUVSLE1BQU0sR0FBRyxHQUZLO0FBR2xCRyxRQUFBQSxJQUFJLEVBQUVKLEdBSFk7QUFJbEJVLFFBQUFBLElBQUksRUFBRSxZQUFZO0FBQ2pCLGdCQUFNUCxRQUFRLENBQUNRLE9BQWY7QUFDQSxpQkFBT0MsSUFBSSxDQUFDYixLQUFMLENBQVdLLElBQVgsQ0FBUDtBQUNBLFNBUGlCO0FBUWxCUyxRQUFBQSxJQUFJLEVBQUUsWUFBWTtBQUNqQixnQkFBTVYsUUFBUSxDQUFDUSxPQUFmO0FBQ0EsaUJBQU9QLElBQVA7QUFDQTtBQVhpQixPQUFuQixDQURNLENBQVA7QUFlQSxLQXhCVyxDQUFaO0FBeUJBUixJQUFBQSxHQUFHLENBQUNTLEVBQUosQ0FBTyxPQUFQLEVBQWdCVixNQUFoQjtBQUNBQyxJQUFBQSxHQUFHLENBQUNrQixHQUFKO0FBQ0EsR0E1QkQsQ0FERDtBQThCQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBVcmwgZnJvbSAndXJsJztcbmltcG9ydCBodHRwIGZyb20gJ2h0dHAnO1xuaW1wb3J0IGh0dHBzIGZyb20gJ2h0dHBzJztcblxuaW1wb3J0IEh0dHBBZ2VudCwgeyBIdHRwc0FnZW50IH0gZnJvbSAnYWdlbnRrZWVwYWxpdmUnO1xuXG5pbXBvcnQgRGVmZXJyZWQgZnJvbSAnLi4vLi4vbGliL2hlbHBlcnMvZGVmZXJyZWQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBSZXF1ZXN0KHsgcHJvdG9jb2wsIC4uLm90aGVyIH0pIHtcblx0Y29uc3QgcHJvdmlkZXIgPSBwcm90b2NvbCA9PT0gJ2h0dHBzOicgPyBodHRwcyA6IGh0dHA7XG5cdGNvbnN0IEFnZW50ID0gcHJvdG9jb2wgPT09ICdodHRwczonID8gSHR0cHNBZ2VudCA6IEh0dHBBZ2VudDtcblx0Y29uc3QgYWdlbnQgPSBuZXcgQWdlbnQoe1xuXHRcdG1heFNvY2tldHM6IDEwMCxcblx0XHRtYXhGcmVlU29ja2V0czogMTAsXG5cdFx0dGltZW91dDogNjAwMDAsXG5cdFx0ZnJlZVNvY2tldEtlZXBBbGl2ZVRpbWVvdXQ6IDMwMDAwLFxuXHRcdC4uLm90aGVyXG5cdH0pO1xuXG5cdHJldHVybiAodXJsLCBvcHRzKSA9PlxuXHRcdG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdGNvbnN0IHJlcSA9IHByb3ZpZGVyLnJlcXVlc3QoeyBhZ2VudCwgLi4uVXJsLnBhcnNlKHVybCksIC4uLm9wdHMgfSwgcmVzID0+IHtcblx0XHRcdFx0Y29uc3Qgc3RhdHVzID0gcmVzLnN0YXR1c0NvZGU7XG5cdFx0XHRcdGNvbnN0IGRlZmVycmVkID0gRGVmZXJyZWQoKTtcblx0XHRcdFx0bGV0IGJvZHkgPSAnJztcblx0XHRcdFx0cmVzLm9uKCdkYXRhJywgY2h1bmsgPT4ge1xuXHRcdFx0XHRcdGJvZHkgKz0gY2h1bms7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRyZXMub24oJ2Vycm9yJywgZGVmZXJyZWQucmVqZWN0KTtcblx0XHRcdFx0cmVzLm9uKCdlbmQnLCBkZWZlcnJlZC5yZXNvbHZlKTtcblx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRPYmplY3QuYXNzaWduKHJlcywge1xuXHRcdFx0XHRcdFx0c3RhdHVzLFxuXHRcdFx0XHRcdFx0b2s6IHN0YXR1cyA8IDQwMCxcblx0XHRcdFx0XHRcdGJvZHk6IHJlcyxcblx0XHRcdFx0XHRcdGpzb246IGFzeW5jICgpID0+IHtcblx0XHRcdFx0XHRcdFx0YXdhaXQgZGVmZXJyZWQucHJvbWlzZTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIEpTT04ucGFyc2UoYm9keSk7XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0dGV4dDogYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRhd2FpdCBkZWZlcnJlZC5wcm9taXNlO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gYm9keTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KVxuXHRcdFx0XHQpO1xuXHRcdFx0fSk7XG5cdFx0XHRyZXEub24oJ2Vycm9yJywgcmVqZWN0KTtcblx0XHRcdHJlcS5lbmQoKTtcblx0XHR9KTtcbn1cbiJdfQ==