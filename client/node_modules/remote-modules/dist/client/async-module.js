"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _vm = require("vm");

var _manifest = _interopRequireDefault(require("../lib/manifest"));

var _defineProperties = _interopRequireDefault(require("../lib/helpers/defineProperties"));

var _once = _interopRequireDefault(require("../lib/helpers/once"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class AsyncModule {
  static formatError(err) {
    const stack = err.stack.split('\n').filter(line => !/AsyncModule|RemoteLoader/.test(line)).join('\n');
    return Object.assign(err, {
      stack
    });
  }

  constructor(loader, _ref) {
    let {
      id,
      pid,
      content,
      parent = null
    } = _ref,
        other = _objectWithoutProperties(_ref, ["id", "pid", "content", "parent"]);

    _defineProperty(this, "load", (0, _once.default)(async () => {
      if (this.manifest) {
        if (this.isMain) {
          await this.loader.ensure(this);
        }
      } else {
        const {
          context,
          script,
          filename,
          dirname
        } = this;
        const namespace = context !== global ? script.runInContext(context) : script.runInThisContext();
        const wrapper = namespace[`pid:${this.pid}`];
        await wrapper(this.exports, this.require, this, filename, dirname);
      }

      this.loaded = true;
      return this;
    }));

    _defineProperty(this, "require", request => this.loader.require(request, this));

    if (!_path.default.extname(id)) {
      throw new Error(`Expected AsyncModule '${id}' to have extension`);
    }

    if (typeof pid !== 'number') {
      throw new Error(`Expected AsyncModule '${id}' to have numeric pid`);
    }

    const _filename = _path.default.join('/', id);

    const _dirname = _path.default.dirname(_filename);

    const _script = new _vm.Script(content, {
      // this has no effect on runtime, only stack traces
      filename: loader.getResourceURLFromID(id)
    });

    const main = parent && parent.main || parent || this;
    (0, _defineProperties.default)(this, {
      loader,
      manifest: {
        value: null,
        writable: true
      },
      isMain: {
        get: () => main === this
      },
      context: {
        get: () => loader.context
      },
      registry: {
        get: () => loader.registry
      },
      require: {
        writable: true
      }
    });
    Object.assign(this, {
      id,
      pid,
      script: _script,
      filename: _filename,
      dirname: _dirname,
      parent,
      main,
      external: false,
      loaded: false,
      definition: null,
      exports: {}
    }, other);
  }

  _throwNotFound(request) {
    // eslint-disable-next-line no-underscore-dangle
    return this.loader._throwNotFound(request);
  }

  import(request) {
    return this.loader.import(request, this);
  }

  resolveDynamic(request) {
    return this.loader.resolveDynamic(request, this);
  }

  resolveURL(request) {
    return this.loader.resolveURL(request, this);
  }

  async define(meta, definition) {
    this.definition = definition;

    if (this.isMain) {
      const json = await this.loader.getManifest(this.id);
      this.manifest = _manifest.default.load(json);
      await this.loader.ensure(this);
    } else {
      this.manifest = _manifest.default.derive(this.main.manifest, meta);
    }
  }

  exec() {
    if (!this.loaded) {
      throw new Error(`Attempted to initialize module ${this.id} before it was loaded`);
    }

    const {
      definition
    } = this;

    if (definition) {
      try {
        delete this.definition;
        definition();
      } catch (err) {
        const error = AsyncModule.formatError(err);

        this.definition = () => {
          throw error;
        };

        this.definition();
      }
    }

    return this.exports;
  }

  reset() {
    this.loaded = false;
    this.load.clear();
  }

  trace() {
    const route = new Set();
    let parent = this;

    while (parent && !route.has(parent.id)) {
      route.add(parent.id);
      ({
        parent
      } = parent);
    }

    const indent = ' '.repeat(4);
    return Array.from(route).reduce((acc, id) => `${acc}\n${indent}<AsyncModule (${id})>`, '');
  }

}

exports.default = AsyncModule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,