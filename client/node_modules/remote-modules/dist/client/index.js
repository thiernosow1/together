"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _url = _interopRequireDefault(require("url"));

var _vm = require("vm");

var _helpers = require("../lib/helpers");

var _defineProperties = _interopRequireDefault(require("../lib/helpers/defineProperties"));

var _escapeRegExp = _interopRequireDefault(require("../lib/helpers/escapeRegExp"));

var _loader = _interopRequireDefault(require("./loader"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Client {
  static hasScope(namespace) {
    return /(?:^|.+\/)@.+$/.test(namespace);
  } // Matches ^(<(namespace/)?@scope>)?


  static getNamespace(string = '') {
    return (0, _helpers.stripBounding)(string.match(/^(?:<((?:.*\/)?@[^>]+)>)?.*$/)[1] || '', '/');
  } // Removes ^(<(namespace/)?@scope>)?


  static transformArgs(ns, [string, ...args]) {
    return [string && string.replace(new RegExp(`^<${(0, _escapeRegExp.default)(ns)}>`), ''), ...args];
  }

  constructor(_ref) {
    let {
      context
    } = _ref,
        other = _objectWithoutProperties(_ref, ["context"]);

    _defineProperty(this, "loaders", new Map());

    (0, _defineProperties.default)(this, {
      lastActiveLoader: {
        value: undefined,
        writable: true
      }
    });
    Object.assign(this, {
      options: _objectSpread({
        context: context && ((0, _vm.isContext)(context) ? context : (0, _vm.createContext)(context))
      }, other)
    });
  }

  async reset(fn, nextNamespace) {
    const {
      loaders,
      lastActiveLoader
    } = this;
    let result;

    if (lastActiveLoader && lastActiveLoader !== loaders.get(nextNamespace)) {
      this.lastActiveLoader = null;
      result = await lastActiveLoader.reset(fn);
    } else if (fn) {
      result = await fn();
    }

    return result;
  }

  async renderStatic(request, type) {
    const ns = this.getNamespace(request);
    const [moduleId = ''] = Client.transformArgs(ns, [request]);
    const loader = this.use(ns);

    const pathname = _path.default.join(loader.baseURL.pathname, 'render', moduleId);

    const search = type ? `type=${type}` : '';

    const url = _url.default.format(_objectSpread({}, loader.baseURL, {
      pathname,
      search
    }));

    const res = await loader.fetch(url);

    if (!res.ok) {
      throw Object.assign(new Error(), (await res.json()));
    }

    return res.text();
  }

  getNamespace(string) {
    const ns = Client.getNamespace(string);
    const needsScope = !(Client.hasScope(ns) || Client.hasScope(this.options.uri));
    return needsScope ? (0, _helpers.stripBounding)(`${ns}/${Client.defaultScope}`, '/') : ns;
  }

  use(ns) {
    const {
      loaders,
      options
    } = this;
    let loader;

    if (loaders.has(ns)) {
      loader = loaders.get(ns);
    } else {
      const {
        uri
      } = options,
            other = _objectWithoutProperties(options, ["uri"]);

      loader = new _loader.default(_objectSpread({
        uri: `${uri.replace(/\/$/, '')}/${ns}`
      }, other));
      loaders.set(ns, loader);
    }

    this.lastActiveLoader = loader;
    return loader;
  }

  import(...args) {
    const ns = this.getNamespace(args[0]);
    const xargs = Client.transformArgs(ns, args);
    return this.reset(() => {
      const loader = this.use(ns);
      return loader.import(...xargs);
    }, ns);
  }

}

exports.default = Client;

_defineProperty(Client, "defaultScope", '@default');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,