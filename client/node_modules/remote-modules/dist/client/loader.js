"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _url = _interopRequireDefault(require("url"));

var _vm = require("vm");

var _asyncModule = _interopRequireDefault(require("./async-module"));

var _moduleTransport = _interopRequireDefault(require("./module-transport"));

var _request2 = _interopRequireDefault(require("./request"));

var _registry = _interopRequireDefault(require("./registry"));

var _pid = _interopRequireDefault(require("../lib/helpers/pid"));

var _defineProperties = _interopRequireDefault(require("../lib/helpers/defineProperties"));

var _get = _interopRequireDefault(require("../lib/helpers/get"));

var _once = _interopRequireDefault(require("../lib/helpers/once"));

var _helpers = require("../lib/helpers");

var _urlBuilder = require("../lib/url-builder");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const ENV = (0, _get.default)(process, ['env', 'BUILD_ENV']) || (0, _get.default)(process, ['env', 'NODE_ENV']);

function getDefaultExternalRequire(loader) {
  return process.browser ? // eslint-disable-next-line no-underscore-dangle
  request => loader._throwNotFound(request) : require;
}

class RemoteLoader {
  static isExternal(request, parent) {
    return Boolean(parent) && typeof request === 'string' && !parent.manifest.exists(request);
  }

  constructor({
    uri,
    context = (0, _vm.createContext)(global),
    externalRequire = getDefaultExternalRequire(this),
    forceLoad = ENV === 'development',
    // eslint-disable-next-line no-nested-ternary
    ttl = process.browser ? Infinity : forceLoad ? 0 : 3e5
    /* 5m */
    ,
    registry = new _registry.default(ttl)
  }) {
    _defineProperty(this, "_throwNotFound", request => {
      const err = new Error(`Cannot find module '${request}'`);
      throw Object.assign(err, {
        code: 'MODULE_NOT_FOUND'
      });
    });

    if (!uri) {
      throw new Error('uri is required');
    }

    const {
      host,
      protocol,
      pathname
    } = _url.default.parse(uri);

    const _request = new _request2.default({
      protocol
    });

    const transport = new _moduleTransport.default(this);
    const baseURL = (0, _defineProperties.default)({
      host,
      protocol,
      pathname: pathname.replace(/\/$/, '')
    }, {
      toString: {
        enumerable: false,
        value: (0, _once.default)(() => _url.default.format(this.baseURL))
      }
    }, {
      enumerable: true,
      writable: false
    });
    Object.assign(this, {
      baseURL
    });
    (0, _defineProperties.default)(this, {
      context,
      externalRequire,
      registry,
      transport,
      request: _request
    });
  }

  getResourceURLFromID(id, query) {
    return (0, _urlBuilder.assembleResourceURL)(this.baseURL, id, query);
  }

  resolveURL(request, parent, query) {
    const moduleId = this.resolve(request, parent);
    return this.getResourceURLFromID(moduleId, query);
  }

  async fetchManifestJSON(id, query) {
    const pathname = _path.default.join(this.baseURL.pathname, 'manifest', id);

    const url = _url.default.format(_objectSpread({}, this.baseURL, {
      pathname,
      query
    }));

    const res = await this.fetch(url);

    if (!res.ok) {
      throw Object.assign(new Error(), (await res.json()));
    } // Link the requested id to the resolved pid


    this.registry.ln(id, Number(res.headers['x-pointer-id']));
    return res.json();
  }

  getManifest(id) {
    return this.transport.getManifestJSON(id);
  }

  async fetch(url, _ref = {}) {
    let {
      method = 'GET'
    } = _ref,
        other = _objectWithoutProperties(_ref, ["method"]);

    const res = await this.request(url, _objectSpread({
      method
    }, other));
    const moduleId = res.headers['x-module-id'];
    const pid = Number(res.headers['x-pointer-id']);

    if (res.ok && moduleId) {
      this.registry.ln(moduleId, pid);
    }

    return res;
  }

  getFromContext(pid) {
    return this.context[`pid:${pid}`];
  }

  async reset(fn) {
    const predicate = this.transport.getResetPredicate();
    let result;

    if (predicate) {
      // Browser only
      this.registry.forEach(module => {
        if (!module.external) {
          module.reset();
        }
      });
      result = fn && (await fn());
      predicate();
    } else if (fn) {
      result = await fn();
    }

    return result;
  }

  register(_ref2) {
    let {
      id,
      pid
    } = _ref2,
        other = _objectWithoutProperties(_ref2, ["id", "pid"]);

    const {
      registry
    } = this;
    let module = registry.get(pid);

    if (!module) {
      module = new _asyncModule.default(this, _objectSpread({
        id,
        pid
      }, other));
      registry.set(pid, module);
      registry.ln(id, pid);
      /**
       * Link main modules to the default request if it doesn't already exist
       */

      if (module.isMain && !registry.hasLink('')) {
        registry.ln('', pid);
      }
    }

    return module;
  } // eslint-disable-next-line class-methods-use-this


  resolve(request = '', parent) {
    let resolved;

    if (typeof request === 'string') {
      resolved = request.replace(/^\/?:?/, '');
    }

    if (parent) {
      resolved = parent.manifest.getModuleId(request) || request;
    }

    return resolved;
  }

  resolvePid(request, parent) {
    const {
      registry
    } = this;
    let resolved;

    if (RemoteLoader.isExternal(request, parent)) {
      if (registry.hasLink(request)) {
        resolved = registry.lookup(request);
      } else {
        resolved = (0, _pid.default)(request);
        registry.ln(request, resolved);
      }
    } else {
      resolved = this.resolve(request, parent);

      if (typeof resolved !== 'number') {
        if (parent) {
          resolved = parent.manifest.getPid(resolved);
        } else {
          resolved = registry.lookup(resolved);
        }
      }
    }

    return typeof resolved === 'number' ? resolved : undefined;
  } // eslint-disable-next-line class-methods-use-this


  resolveDynamic(request, parent) {
    return (0, _helpers.isRelativePath)(request) ? `./${_path.default.normalize(`${parent ? _path.default.dirname(parent.id) : ''}/${request}`)}` : request;
  }

  async ensure(entryModule) {
    const {
      manifest
    } = entryModule;
    const moduleIds = Array.from(manifest.list().reduce((acc, moduleId) => {
      const assetId = manifest.getAssetId(moduleId);

      if (!acc.has(assetId) && !RemoteLoader.isExternal(moduleId, entryModule)) {
        acc.set(assetId, moduleId);
      }

      return acc;
    }, new Map([[manifest.meta('assetId'), manifest.meta('moduleId')]])).values());
    await Promise.all(moduleIds.map(id => this.load(id, entryModule)));
    return Promise.all(manifest.list().reduce((acc, id) => {
      if (manifest.getType(id) === 'js') {
        acc.push(this.load(id, entryModule));
      }

      return acc;
    }, []));
  }

  async import(request, parent) {
    /**
     * Sweep the registry cache on entrypoint requests
     */
    if (!parent && !this.transport.pending.size) {
      this.registry.sweep();
    }

    const module = await this.load(request);

    if (!module.loaded) {
      await module.load();
    }

    return module.exec();
  }

  async resolveAsync(request, parent) {
    const url = this.resolveURL(request, parent);
    const res = await this.fetch(url, {
      method: 'HEAD'
    });

    if (!res.ok) {
      this._throwNotFound(request);
    }

    return {
      moduleId: res.headers['x-module-id'],
      pid: Number(res.headers['x-pointer-id'])
    };
  }

  require(pid, parent) {
    // eslint-disable-next-line no-sync
    const module = this.loadSync(pid, parent);

    if (!module && (!parent || parent.manifest.getType(pid) === 'js')) {
      this._throwNotFound(this.resolve(pid, parent));
    }

    return module && module.exec();
  }

  loadSync(request, parent) {
    const {
      externalRequire,
      registry
    } = this;
    const moduleId = this.resolve(request, parent);
    const pid = this.resolvePid(request, parent);
    let module;

    if (registry.has(pid)) {
      module = registry.get(pid);
    } else if (RemoteLoader.isExternal(moduleId, parent)) {
      module = {
        id: moduleId,
        external: true,
        exec: () => {
          module.exports = externalRequire(moduleId);
          return module.exports;
        }
      };
      registry.set(pid, module);
    }

    return module;
  }

  async load(request = '', parent) {
    /**
     * IMPORTANT: There is no guarantee that the request will be
     * resolved to the canonical moduleId if parent is undefined
     */
    // eslint-disable-next-line no-sync
    let module = this.loadSync(request, parent);

    if (!module) {
      module = await this.transport.initialize(request, parent);

      if (!parent) {
        this.registry.ln(request, module.pid);
      }

      await module.load();
    }

    return module;
  }

}

exports.default = RemoteLoader;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,