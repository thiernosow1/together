"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContextMiddleware = ContextMiddleware;
exports.ExternalMiddleware = ExternalMiddleware;
exports.RewriteMiddleware = RewriteMiddleware;
exports.NullMiddleware = NullMiddleware;
exports.ResourceMiddleware = ResourceMiddleware;
exports.UnionMiddleware = void 0;

var _interpolator = _interopRequireDefault(require("../interpolator"));

var _defineProperties = _interopRequireDefault(require("../helpers/defineProperties"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Middleware {
  static parseArgs(args) {
    const apply = args.pop();
    let test = args.pop() || /.*/;

    if (test instanceof RegExp) {
      const regexp = test;

      test = ({
        moduleId,
        request = moduleId
      }) => regexp.test(request);
    }

    if (typeof apply !== 'function' || typeof test !== 'function') {
      throw new TypeError('middleware signature is ([RegExp|Function], Function)');
    }

    return {
      test,
      apply
    };
  }

  constructor(descriptors) {
    _defineProperty(this, "fn", (...args) => this.test(...args) ? this.apply(...args) : undefined);

    if (!descriptors.type) {
      throw new Error('Middleware type is required');
    }

    (0, _defineProperties.default)(this, descriptors, {
      enumerable: true
    });
  }

}

function ContextMiddleware(...args) {
  return new Middleware(_objectSpread({
    type: 'context',
    name: 'ContextMiddleware'
  }, Middleware.parseArgs(args)));
}

function ExternalMiddleware(test) {
  return new Middleware(_objectSpread({
    type: 'context',
    name: 'ExternalMiddleware'
  }, Middleware.parseArgs([test, ctx => {
    ctx.external = true;
    ctx.force = ctx.request;
  }])));
}

function RewriteMiddleware(...args) {
  const {
    test,
    apply
  } = Middleware.parseArgs(args);
  return new Middleware({
    type: 'context',
    name: 'RewriteMiddleware',
    apply: ctx => {
      const result = apply(ctx);

      if (result !== undefined) {
        ctx.request = result;
      }
    },
    test
  });
}

function NullMiddleware(test) {
  return RewriteMiddleware(test, () => null);
}

function ResourceMiddleware(...args) {
  const {
    test,
    apply
  } = Middleware.parseArgs(args);
  return new Middleware({
    type: 'resource',
    name: 'ResourceMiddleware',
    test: (resource, ctx) => resource.isNormal() && resource.adapter.outputType !== 'raw' && test(resource, ctx),
    apply
  });
}

const UnionMiddleware = (() => {
  const interpolator = new _interpolator.default();
  let privateInstanceCounter = 0; // eslint-disable-next-line no-shadow

  return function UnionMiddleware(_ref = {}) {
    let {
      template,
      test
    } = _ref,
        options = _objectWithoutProperties(_ref, ["template", "test"]);

    const instanceId = privateInstanceCounter;
    privateInstanceCounter += 1;

    function getUnionId(resource) {
      return interpolator([instanceId, template, '{async}', '{adapter.outputType}'].filter(v => v !== undefined).join('_'), resource);
    }

    const {
      test: testFn,
      apply
    } = Middleware.parseArgs([test, resource => {
      resource.addToUnion(getUnionId(resource), options);
    }]);
    return new Middleware({
      type: 'resource',
      name: 'UnionMiddleware',
      test: (resource, ctx) => resource.isNormal() && resource.adapter.outputType !== 'raw' && testFn(resource, ctx),
      apply
    });
  };
})();

exports.UnionMiddleware = UnionMiddleware;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,