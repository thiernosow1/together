"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _url = _interopRequireDefault(require("url"));

var _fs = _interopRequireDefault(require("fs"));

var _glob = _interopRequireDefault(require("glob"));

var _nodeLibsBrowser = _interopRequireDefault(require("node-libs-browser"));

var _cloneDeep = _interopRequireDefault(require("clone-deep"));

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _babelMerge = _interopRequireDefault(require("babel-merge"));

var _resolver = require("../resolver");

var _helpers = require("../helpers");

var _get = _interopRequireDefault(require("../helpers/get"));

var _once = _interopRequireDefault(require("../helpers/once"));

var _pick = _interopRequireDefault(require("../helpers/pick"));

var _defineProperties = _interopRequireDefault(require("../helpers/defineProperties"));

var _calculated = _interopRequireDefault(require("./calculated"));

var _defaults = _interopRequireDefault(require("./defaults"));

var _presets = _interopRequireDefault(require("./presets"));

var middleware = _interopRequireWildcard(require("./middleware"));

var _default = _interopRequireDefault(require("../../server/installer/resource/adapters/default"));

var _json = _interopRequireDefault(require("../../server/installer/resource/adapters/json"));

var _less = _interopRequireDefault(require("../../server/installer/resource/adapters/less"));

var _sass = _interopRequireDefault(require("../../server/installer/resource/adapters/sass"));

var _css = _interopRequireDefault(require("../../server/installer/resource/adapters/css"));

var _raw = _interopRequireDefault(require("../../server/installer/resource/adapters/raw"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ConfigStore {
  static symbolFor(value = ConfigStore.defaultScope) {
    return typeof value === 'symbol' ? value : Symbol.for(`@${value.replace(/^@/, '')}`);
  }

  static symbolOf(value = ConfigStore.defaultScope) {
    return typeof value === 'symbol' ? Symbol.keyFor(value) : value.replace(/^@/, '');
  }

  static from(target = {}) {
    let C;

    if (target instanceof ConfigStore) {
      C = target;
    } else {
      C = new ConfigStore(target);
    }

    return C;
  }

  static getModulerc(path) {
    // eslint-disable-next-line global-require, import/no-dynamic-require
    const modulerc = require(path);

    const result = (0, _get.default)(modulerc, ['default']) || modulerc;
    return typeof result === 'function' ? result(_objectSpread({}, middleware, ConfigStore.adapters, {
      Scope: ConfigStore.symbolFor,
      Shim: key => {
        if (!Object.hasOwnProperty.call(ConfigStore.shims, key)) {
          throw new Error(`Missing shim '${key}'`);
        }

        return ConfigStore.shims[key];
      }
    })) : result;
  }

  static loadrcFile(opts) {
    let result = {};

    if (typeof opts.root === 'string' && typeof opts.config === 'string') {
      try {
        const rcpath = (0, _resolver.resolveSync)(opts.config, {
          baseDir: opts.root,
          extensions: ['.js', '.mjs', '.es', '.es6', '.babel.js', '.json']
        });

        if (rcpath) {
          result = Object.assign(ConfigStore.getModulerc(rcpath), {
            rcpath
          });
        }
      } catch (err) {
        if (err.code !== 'MODULE_NOT_FOUND') {
          throw err;
        }
      }
    }

    return result;
  }

  static getEntryDir(rootDir, entry) {
    let result = _path.default.resolve(rootDir, entry);

    try {
      // eslint-disable-next-line no-sync
      const stats = _fs.default.statSync(result);

      if (!stats.isDirectory()) {
        result = _path.default.dirname(result);
      }
    } catch (err) {
      if (err.code !== 'ENOENT') {
        throw err;
      }

      result = ConfigStore.getEntryDir(rootDir, _path.default.dirname(entry));
    }

    return result;
  }

  static getMergedOpts(inputOpts = {}, scopeOpts = {}) {
    const defaults = (0, _defaults.default)();
    const modulerc = ConfigStore.loadrcFile(_objectSpread({}, defaults, inputOpts));
    const presetOpts = (0, _presets.default)(inputOpts.preset || scopeOpts.preset || modulerc.preset);
    const mergeValues = [defaults, presetOpts, modulerc, scopeOpts, inputOpts, (0, _get.default)(modulerc, [scopeOpts.scope]), (0, _get.default)(inputOpts, [scopeOpts.scope])].filter(Boolean);

    const mergedOpts = _deepmerge.default.all(mergeValues.map(obj => (0, _helpers.pickDefined)((0, _helpers.omit)(obj, ['babel']))), {
      arrayMerge: (prev, next) => Array.from(new Set([...Array.from(next || []), ...Array.from(prev || [])])),
      isMergeableObject: value => (0, _helpers.isPlainObject)(value) || Array.isArray(value)
    });

    if (mergedOpts.scope) {
      const scopeKey = ConfigStore.symbolOf(mergedOpts.scope);
      const {
        output,
        server: {
          uri
        }
      } = mergedOpts;

      const _Url$parse = _url.default.parse(uri),
            {
        host,
        protocol
      } = _Url$parse,
            other = _objectWithoutProperties(_Url$parse, ["host", "protocol"]);

      const pathname = _path.default.join(other.pathname, scopeKey);

      Object.assign(mergedOpts, {
        output: _path.default.join(output, scopeKey),
        server: _objectSpread({}, mergedOpts.server, {
          uri: _url.default.format({
            host,
            protocol,
            pathname
          })
        })
      });
    } else {
      let scopes = [...Object.getOwnPropertySymbols(inputOpts), ...Object.getOwnPropertySymbols(modulerc)];

      if (!scopes.length) {
        scopes = [ConfigStore.defaultScope];
      }

      scopes.forEach(scope => {
        mergedOpts[scope] = _objectSpread({}, modulerc[scope], inputOpts[scope], {
          scope
        });
      });
    }

    const root = _path.default.normalize(mergedOpts.root);

    const output = _path.default.normalize(mergedOpts.output);

    const entry = _path.default.normalize(mergedOpts.entry);

    const rootDir = _path.default.resolve(root);

    const outputDir = _path.default.resolve(output);

    const entryDir = ConfigStore.getEntryDir(rootDir, entry);
    Object.assign(mergedOpts, {
      root,
      output,
      entry,
      rootDir,
      outputDir,
      entryDir
    }); // Babel config

    mergedOpts.babel = _babelMerge.default.all(mergeValues.map(({
      babel
    }) => babel)); // include globs

    mergedOpts.include = mergedOpts.include.reduce((acc, include) => {
      if (_glob.default.hasMagic(include)) {
        acc.push(..._glob.default.sync(include, {
          cwd: mergedOpts.rootDir
        }).map(path => _path.default.resolve(mergedOpts.rootDir, path)));
      } else {
        acc.push(include);
      }

      return acc;
    }, []); // server.static globs

    mergedOpts.server.static = new Set(Array.from(mergedOpts.server.static).reduce((acc, pattern) => [...acc, ...(_glob.default.hasMagic(pattern) ? _glob.default.sync(pattern) : [pattern])], [])); // Remove falsy middleware values

    mergedOpts.middleware = mergedOpts.middleware.filter(Boolean); // Calculated properties

    return Object.assign(mergedOpts, (0, _calculated.default)(mergedOpts));
  }

  constructor(opts, configRoot) {
    ConfigStore.getEnv.clear();
    (0, _defineProperties.default)(this, {
      defaults: (0, _defaults.default)(),
      scopeKey: {
        get: () => this.scope && ConfigStore.symbolOf(this.scope),
        set: () => {},
        enumerable: true
      }
    });

    if (opts) {
      if (configRoot && opts.scope) {
        this.initScope(opts, configRoot);
      } else {
        this.init(opts);
      }
    }
  }

  init(opts) {
    Object.assign(this, ConfigStore.getMergedOpts(opts));
    this.scopes().forEach(scope => {
      Object.assign(this[scope], ConfigStore.getMergedOpts(opts, this[scope]));
    });
    return this;
  }

  initScope(opts, configRoot) {
    Object.assign(this, (0, _cloneDeep.default)(opts));
    return (0, _defineProperties.default)(this, {
      configRoot
    });
  }

  scopes() {
    return this.scope ? [this.scope] : Object.getOwnPropertySymbols(this);
  }

  use(_scope = ConfigStore.defaultScope) {
    const scope = ConfigStore.symbolFor(_scope);
    const scopeObject = scope === this.scope ? this : this[scope];

    if (!scopeObject) {
      throw new Error(`Scope '${ConfigStore.symbolOf(scope)}' does not exist`);
    }

    return new ConfigStore(scopeObject, this.getRoot());
  }

  runMiddleware(type, args) {
    for (const _ref of this.middleware.filter(m => m.type === type)) {
      const {
        fn
      } = _ref;
      // eslint-disable-next-line prefer-spread
      fn.apply(null, args);
    }
  }

  getRoot() {
    return this.configRoot || this;
  }

  get(path) {
    return (0, _get.default)(this, path);
  }

  pick(keys) {
    return (0, _pick.default)(this, keys);
  }

}

exports.default = ConfigStore;

_defineProperty(ConfigStore, "getCalculated", _calculated.default);

_defineProperty(ConfigStore, "getDefaults", _defaults.default);

_defineProperty(ConfigStore, "getPreset", _presets.default);

_defineProperty(ConfigStore, "middleware", middleware);

_defineProperty(ConfigStore, "defaultScope", ConfigStore.symbolFor('default'));

_defineProperty(ConfigStore, "getEnv", (0, _once.default)(() => {
  const {
    env: {
      BUILD_ENV,
      NODE_ENV
    }
  } = process;
  return BUILD_ENV || NODE_ENV || 'development';
}));

_defineProperty(ConfigStore, "adapters", {
  ScriptAdapter: _default.default,
  JSONAdapter: _json.default,
  SASSAdapter: _sass.default,
  LESSAdapter: _less.default,
  CSSAdapter: _css.default,
  RawAdapter: _raw.default
});

_defineProperty(ConfigStore, "shims", (0, _helpers.mapObject)(_nodeLibsBrowser.default, path => path ? _path.default.relative(_path.default.resolve('node_modules'), path) : null));

_defineProperty(ConfigStore, "mocks", {
  buffer: 'node-libs-browser/mock/buffer.js'
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,