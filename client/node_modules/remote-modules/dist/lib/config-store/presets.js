"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _escapeRegExp = _interopRequireDefault(require("../helpers/escapeRegExp"));

var _helpers = require("../helpers");

var _resolver = require("../resolver");

var _middleware = require("./middleware");

var _ = _interopRequireDefault(require("./"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = preset => {
  switch (preset) {
    case 'node':
      return {
        define: {
          'process.browser': false,
          'typeof window': 'undefined',
          'typeof document': 'undefined',
          'typeof XMLHttpRequest': 'undefined'
        },
        sourceMaps: 'inline'
      };

    case 'browser':
      return {
        core: (0, _helpers.mapObject)(_resolver.defaultCore, () => false),
        mainFields: ['browser'],
        define: {
          'process.browser': true,
          'typeof window': 'object',
          'typeof document': 'object',
          'typeof XMLHttpRequest': 'function'
        },
        provide: {
          global: 'window',
          process: `import process from '${_.default.shims.process}'`,
          Buffer: `import { Buffer } from '${_.default.mocks.buffer}'`
        },
        middleware: [// Rewrite requests for node core modules to browser shims
        (0, _middleware.RewriteMiddleware)(new RegExp(`^(${Object.keys(_.default.shims).map(_escapeRegExp.default).join('|')})$`), ctx => _.default.shims[ctx.request])]
      };

    default:
      return {};
  }
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvY29uZmlnLXN0b3JlL3ByZXNldHMuanMiXSwibmFtZXMiOlsicHJlc2V0IiwiZGVmaW5lIiwic291cmNlTWFwcyIsImNvcmUiLCJkZWZhdWx0Q29yZSIsIm1haW5GaWVsZHMiLCJwcm92aWRlIiwiZ2xvYmFsIiwicHJvY2VzcyIsIkNvbmZpZ1N0b3JlIiwic2hpbXMiLCJCdWZmZXIiLCJtb2NrcyIsImJ1ZmZlciIsIm1pZGRsZXdhcmUiLCJSZWdFeHAiLCJPYmplY3QiLCJrZXlzIiwibWFwIiwiZXNjYXBlUmVnRXhwIiwiam9pbiIsImN0eCIsInJlcXVlc3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztlQUVlQSxNQUFNLElBQUk7QUFDeEIsVUFBUUEsTUFBUjtBQUNDLFNBQUssTUFBTDtBQUNDLGFBQU87QUFDTkMsUUFBQUEsTUFBTSxFQUFFO0FBQ1AsNkJBQW1CLEtBRFo7QUFFUCwyQkFBaUIsV0FGVjtBQUdQLDZCQUFtQixXQUhaO0FBSVAsbUNBQXlCO0FBSmxCLFNBREY7QUFPTkMsUUFBQUEsVUFBVSxFQUFFO0FBUE4sT0FBUDs7QUFTRCxTQUFLLFNBQUw7QUFDQyxhQUFPO0FBQ05DLFFBQUFBLElBQUksRUFBRSx3QkFBVUMscUJBQVYsRUFBdUIsTUFBTSxLQUE3QixDQURBO0FBRU5DLFFBQUFBLFVBQVUsRUFBRSxDQUFDLFNBQUQsQ0FGTjtBQUdOSixRQUFBQSxNQUFNLEVBQUU7QUFDUCw2QkFBbUIsSUFEWjtBQUVQLDJCQUFpQixRQUZWO0FBR1AsNkJBQW1CLFFBSFo7QUFJUCxtQ0FBeUI7QUFKbEIsU0FIRjtBQVNOSyxRQUFBQSxPQUFPLEVBQUU7QUFDUkMsVUFBQUEsTUFBTSxFQUFFLFFBREE7QUFFUkMsVUFBQUEsT0FBTyxFQUFHLHdCQUF1QkMsVUFBWUMsS0FBWixDQUFrQkYsT0FBUSxHQUZuRDtBQUdSRyxVQUFBQSxNQUFNLEVBQUcsMkJBQTBCRixVQUFZRyxLQUFaLENBQWtCQyxNQUFPO0FBSHBELFNBVEg7QUFjTkMsUUFBQUEsVUFBVSxFQUFFLENBQ1g7QUFDQSwyQ0FDQyxJQUFJQyxNQUFKLENBQ0UsS0FBSUMsTUFBTSxDQUFDQyxJQUFQLENBQVlSLFVBQVlDLEtBQXhCLEVBQ0hRLEdBREcsQ0FDQ0MscUJBREQsRUFFSEMsSUFGRyxDQUVFLEdBRkYsQ0FFTyxJQUhiLENBREQsRUFNQ0MsR0FBRyxJQUFJWixVQUFZQyxLQUFaLENBQWtCVyxHQUFHLENBQUNDLE9BQXRCLENBTlIsQ0FGVztBQWROLE9BQVA7O0FBMEJEO0FBQ0MsYUFBTyxFQUFQO0FBdkNGO0FBeUNBLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXNjYXBlUmVnRXhwIGZyb20gJy4uL2hlbHBlcnMvZXNjYXBlUmVnRXhwJztcbmltcG9ydCB7IG1hcE9iamVjdCB9IGZyb20gJy4uL2hlbHBlcnMnO1xuaW1wb3J0IHsgZGVmYXVsdENvcmUgfSBmcm9tICcuLi9yZXNvbHZlcic7XG5pbXBvcnQgeyBSZXdyaXRlTWlkZGxld2FyZSB9IGZyb20gJy4vbWlkZGxld2FyZSc7XG5pbXBvcnQgQ29uZmlnU3RvcmUgZnJvbSAnLi8nO1xuXG5leHBvcnQgZGVmYXVsdCBwcmVzZXQgPT4ge1xuXHRzd2l0Y2ggKHByZXNldCkge1xuXHRcdGNhc2UgJ25vZGUnOlxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0ZGVmaW5lOiB7XG5cdFx0XHRcdFx0J3Byb2Nlc3MuYnJvd3Nlcic6IGZhbHNlLFxuXHRcdFx0XHRcdCd0eXBlb2Ygd2luZG93JzogJ3VuZGVmaW5lZCcsXG5cdFx0XHRcdFx0J3R5cGVvZiBkb2N1bWVudCc6ICd1bmRlZmluZWQnLFxuXHRcdFx0XHRcdCd0eXBlb2YgWE1MSHR0cFJlcXVlc3QnOiAndW5kZWZpbmVkJ1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRzb3VyY2VNYXBzOiAnaW5saW5lJ1xuXHRcdFx0fTtcblx0XHRjYXNlICdicm93c2VyJzpcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGNvcmU6IG1hcE9iamVjdChkZWZhdWx0Q29yZSwgKCkgPT4gZmFsc2UpLFxuXHRcdFx0XHRtYWluRmllbGRzOiBbJ2Jyb3dzZXInXSxcblx0XHRcdFx0ZGVmaW5lOiB7XG5cdFx0XHRcdFx0J3Byb2Nlc3MuYnJvd3Nlcic6IHRydWUsXG5cdFx0XHRcdFx0J3R5cGVvZiB3aW5kb3cnOiAnb2JqZWN0Jyxcblx0XHRcdFx0XHQndHlwZW9mIGRvY3VtZW50JzogJ29iamVjdCcsXG5cdFx0XHRcdFx0J3R5cGVvZiBYTUxIdHRwUmVxdWVzdCc6ICdmdW5jdGlvbidcblx0XHRcdFx0fSxcblx0XHRcdFx0cHJvdmlkZToge1xuXHRcdFx0XHRcdGdsb2JhbDogJ3dpbmRvdycsXG5cdFx0XHRcdFx0cHJvY2VzczogYGltcG9ydCBwcm9jZXNzIGZyb20gJyR7Q29uZmlnU3RvcmUuc2hpbXMucHJvY2Vzc30nYCxcblx0XHRcdFx0XHRCdWZmZXI6IGBpbXBvcnQgeyBCdWZmZXIgfSBmcm9tICcke0NvbmZpZ1N0b3JlLm1vY2tzLmJ1ZmZlcn0nYFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRtaWRkbGV3YXJlOiBbXG5cdFx0XHRcdFx0Ly8gUmV3cml0ZSByZXF1ZXN0cyBmb3Igbm9kZSBjb3JlIG1vZHVsZXMgdG8gYnJvd3NlciBzaGltc1xuXHRcdFx0XHRcdFJld3JpdGVNaWRkbGV3YXJlKFxuXHRcdFx0XHRcdFx0bmV3IFJlZ0V4cChcblx0XHRcdFx0XHRcdFx0YF4oJHtPYmplY3Qua2V5cyhDb25maWdTdG9yZS5zaGltcylcblx0XHRcdFx0XHRcdFx0XHQubWFwKGVzY2FwZVJlZ0V4cClcblx0XHRcdFx0XHRcdFx0XHQuam9pbignfCcpfSkkYFxuXHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdGN0eCA9PiBDb25maWdTdG9yZS5zaGltc1tjdHgucmVxdWVzdF1cblx0XHRcdFx0XHQpXG5cdFx0XHRcdF1cblx0XHRcdH07XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiB7fTtcblx0fVxufTtcbiJdfQ==