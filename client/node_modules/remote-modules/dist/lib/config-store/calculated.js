"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _url = _interopRequireDefault(require("url"));

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _helpers = require("../helpers");

var _defaults = _interopRequireDefault(require("./defaults"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const {
  BABEL_ENV
} = process.env;

var _default = opts => {
  const babel = _objectSpread({
    envName: BABEL_ENV || opts.env
  }, (0, _helpers.pickDefined)(opts.babel));

  const define = _objectSpread({
    'process.env.NODE_ENV': opts.define['process.env.NODE_ENV'] || opts.define['process.env.BUILD_ENV'] || opts.env
  }, (0, _helpers.pickDefined)(opts.define));

  const optimize = (0, _helpers.isPlainObject)(opts.optimize) ? _objectSpread({
    constantFolding: opts.env === 'production'
  }, (0, _helpers.pickDefined)(opts.optimize)) : opts.optimize;

  const server = _objectSpread({
    publicPath: _url.default.parse(opts.server.uri).pathname,
    redirects: opts.env === 'development'
  }, (0, _helpers.pickDefined)(opts.server));

  const sourceMaps = // eslint-disable-next-line no-nested-ternary
  opts.sourceMaps !== undefined ? opts.sourceMaps : opts.env === 'production' ? true : 'inline';
  let uglify = opts.uglify !== undefined ? opts.uglify : opts.preset === 'browser' && opts.env === 'production';

  if (uglify === true) {
    uglify = (0, _defaults.default)('uglify');
  } else if ((0, _helpers.isPlainObject)(uglify)) {
    uglify = (0, _deepmerge.default)((0, _defaults.default)('uglify'), uglify);
  }
  /**
   * IMPORTANT: uglify.compress.expression MUST be true or the entire
   * module will be treated as dead code and removed.
   */


  if (uglify) {
    uglify = (0, _deepmerge.default)(uglify, {
      sourceMap: Boolean(sourceMaps)
    });

    if (uglify.compress === true) {
      uglify.compress = (0, _defaults.default)('uglify').compress;
    }

    if ((0, _helpers.isPlainObject)(uglify.compress)) {
      uglify.compress.expression = true;
    }
  }

  return {
    babel,
    define,
    optimize,
    server,
    sourceMaps,
    uglify
  };
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvY29uZmlnLXN0b3JlL2NhbGN1bGF0ZWQuanMiXSwibmFtZXMiOlsiQkFCRUxfRU5WIiwicHJvY2VzcyIsImVudiIsIm9wdHMiLCJiYWJlbCIsImVudk5hbWUiLCJkZWZpbmUiLCJvcHRpbWl6ZSIsImNvbnN0YW50Rm9sZGluZyIsInNlcnZlciIsInB1YmxpY1BhdGgiLCJVcmwiLCJwYXJzZSIsInVyaSIsInBhdGhuYW1lIiwicmVkaXJlY3RzIiwic291cmNlTWFwcyIsInVuZGVmaW5lZCIsInVnbGlmeSIsInByZXNldCIsInNvdXJjZU1hcCIsIkJvb2xlYW4iLCJjb21wcmVzcyIsImV4cHJlc3Npb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFFQTs7QUFDQTs7Ozs7Ozs7QUFFQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBZ0JDLE9BQU8sQ0FBQ0MsR0FBOUI7O2VBRWVDLElBQUksSUFBSTtBQUN0QixRQUFNQyxLQUFLO0FBQ1ZDLElBQUFBLE9BQU8sRUFBRUwsU0FBUyxJQUFJRyxJQUFJLENBQUNEO0FBRGpCLEtBRVAsMEJBQVlDLElBQUksQ0FBQ0MsS0FBakIsQ0FGTyxDQUFYOztBQUtBLFFBQU1FLE1BQU07QUFDWCw0QkFDQ0gsSUFBSSxDQUFDRyxNQUFMLENBQVksc0JBQVosS0FBdUNILElBQUksQ0FBQ0csTUFBTCxDQUFZLHVCQUFaLENBQXZDLElBQStFSCxJQUFJLENBQUNEO0FBRjFFLEtBR1IsMEJBQVlDLElBQUksQ0FBQ0csTUFBakIsQ0FIUSxDQUFaOztBQU1BLFFBQU1DLFFBQVEsR0FBRyw0QkFBY0osSUFBSSxDQUFDSSxRQUFuQjtBQUVkQyxJQUFBQSxlQUFlLEVBQUVMLElBQUksQ0FBQ0QsR0FBTCxLQUFhO0FBRmhCLEtBR1gsMEJBQVlDLElBQUksQ0FBQ0ksUUFBakIsQ0FIVyxJQUtkSixJQUFJLENBQUNJLFFBTFI7O0FBT0EsUUFBTUUsTUFBTTtBQUNYQyxJQUFBQSxVQUFVLEVBQUVDLGFBQUlDLEtBQUosQ0FBVVQsSUFBSSxDQUFDTSxNQUFMLENBQVlJLEdBQXRCLEVBQTJCQyxRQUQ1QjtBQUVYQyxJQUFBQSxTQUFTLEVBQUVaLElBQUksQ0FBQ0QsR0FBTCxLQUFhO0FBRmIsS0FHUiwwQkFBWUMsSUFBSSxDQUFDTSxNQUFqQixDQUhRLENBQVo7O0FBTUEsUUFBTU8sVUFBVSxHQUNmO0FBQ0FiLEVBQUFBLElBQUksQ0FBQ2EsVUFBTCxLQUFvQkMsU0FBcEIsR0FBZ0NkLElBQUksQ0FBQ2EsVUFBckMsR0FBa0RiLElBQUksQ0FBQ0QsR0FBTCxLQUFhLFlBQWIsR0FBNEIsSUFBNUIsR0FBbUMsUUFGdEY7QUFJQSxNQUFJZ0IsTUFBTSxHQUNUZixJQUFJLENBQUNlLE1BQUwsS0FBZ0JELFNBQWhCLEdBQ0dkLElBQUksQ0FBQ2UsTUFEUixHQUVHZixJQUFJLENBQUNnQixNQUFMLEtBQWdCLFNBQWhCLElBQTZCaEIsSUFBSSxDQUFDRCxHQUFMLEtBQWEsWUFIOUM7O0FBS0EsTUFBSWdCLE1BQU0sS0FBSyxJQUFmLEVBQXFCO0FBQ3BCQSxJQUFBQSxNQUFNLEdBQUcsdUJBQVksUUFBWixDQUFUO0FBQ0EsR0FGRCxNQUVPLElBQUksNEJBQWNBLE1BQWQsQ0FBSixFQUEyQjtBQUNqQ0EsSUFBQUEsTUFBTSxHQUFHLHdCQUFNLHVCQUFZLFFBQVosQ0FBTixFQUE2QkEsTUFBN0IsQ0FBVDtBQUNBO0FBRUQ7Ozs7OztBQUlBLE1BQUlBLE1BQUosRUFBWTtBQUNYQSxJQUFBQSxNQUFNLEdBQUcsd0JBQU1BLE1BQU4sRUFBYztBQUFFRSxNQUFBQSxTQUFTLEVBQUVDLE9BQU8sQ0FBQ0wsVUFBRDtBQUFwQixLQUFkLENBQVQ7O0FBQ0EsUUFBSUUsTUFBTSxDQUFDSSxRQUFQLEtBQW9CLElBQXhCLEVBQThCO0FBQzdCSixNQUFBQSxNQUFNLENBQUNJLFFBQVAsR0FBa0IsdUJBQVksUUFBWixFQUFzQkEsUUFBeEM7QUFDQTs7QUFDRCxRQUFJLDRCQUFjSixNQUFNLENBQUNJLFFBQXJCLENBQUosRUFBb0M7QUFDbkNKLE1BQUFBLE1BQU0sQ0FBQ0ksUUFBUCxDQUFnQkMsVUFBaEIsR0FBNkIsSUFBN0I7QUFDQTtBQUNEOztBQUVELFNBQU87QUFBRW5CLElBQUFBLEtBQUY7QUFBU0UsSUFBQUEsTUFBVDtBQUFpQkMsSUFBQUEsUUFBakI7QUFBMkJFLElBQUFBLE1BQTNCO0FBQW1DTyxJQUFBQSxVQUFuQztBQUErQ0UsSUFBQUE7QUFBL0MsR0FBUDtBQUNBLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVXJsIGZyb20gJ3VybCc7XG5cbmltcG9ydCBtZXJnZSBmcm9tICdkZWVwbWVyZ2UnO1xuXG5pbXBvcnQgeyBpc1BsYWluT2JqZWN0LCBwaWNrRGVmaW5lZCB9IGZyb20gJy4uL2hlbHBlcnMnO1xuaW1wb3J0IGdldERlZmF1bHRzIGZyb20gJy4vZGVmYXVsdHMnO1xuXG5jb25zdCB7IEJBQkVMX0VOViB9ID0gcHJvY2Vzcy5lbnY7XG5cbmV4cG9ydCBkZWZhdWx0IG9wdHMgPT4ge1xuXHRjb25zdCBiYWJlbCA9IHtcblx0XHRlbnZOYW1lOiBCQUJFTF9FTlYgfHwgb3B0cy5lbnYsXG5cdFx0Li4ucGlja0RlZmluZWQob3B0cy5iYWJlbClcblx0fTtcblxuXHRjb25zdCBkZWZpbmUgPSB7XG5cdFx0J3Byb2Nlc3MuZW52Lk5PREVfRU5WJzpcblx0XHRcdG9wdHMuZGVmaW5lWydwcm9jZXNzLmVudi5OT0RFX0VOViddIHx8IG9wdHMuZGVmaW5lWydwcm9jZXNzLmVudi5CVUlMRF9FTlYnXSB8fCBvcHRzLmVudixcblx0XHQuLi5waWNrRGVmaW5lZChvcHRzLmRlZmluZSlcblx0fTtcblxuXHRjb25zdCBvcHRpbWl6ZSA9IGlzUGxhaW5PYmplY3Qob3B0cy5vcHRpbWl6ZSlcblx0XHQ/IHtcblx0XHRcdFx0Y29uc3RhbnRGb2xkaW5nOiBvcHRzLmVudiA9PT0gJ3Byb2R1Y3Rpb24nLFxuXHRcdFx0XHQuLi5waWNrRGVmaW5lZChvcHRzLm9wdGltaXplKVxuXHRcdCAgfVxuXHRcdDogb3B0cy5vcHRpbWl6ZTtcblxuXHRjb25zdCBzZXJ2ZXIgPSB7XG5cdFx0cHVibGljUGF0aDogVXJsLnBhcnNlKG9wdHMuc2VydmVyLnVyaSkucGF0aG5hbWUsXG5cdFx0cmVkaXJlY3RzOiBvcHRzLmVudiA9PT0gJ2RldmVsb3BtZW50Jyxcblx0XHQuLi5waWNrRGVmaW5lZChvcHRzLnNlcnZlcilcblx0fTtcblxuXHRjb25zdCBzb3VyY2VNYXBzID1cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcblx0XHRvcHRzLnNvdXJjZU1hcHMgIT09IHVuZGVmaW5lZCA/IG9wdHMuc291cmNlTWFwcyA6IG9wdHMuZW52ID09PSAncHJvZHVjdGlvbicgPyB0cnVlIDogJ2lubGluZSc7XG5cblx0bGV0IHVnbGlmeSA9XG5cdFx0b3B0cy51Z2xpZnkgIT09IHVuZGVmaW5lZFxuXHRcdFx0PyBvcHRzLnVnbGlmeVxuXHRcdFx0OiBvcHRzLnByZXNldCA9PT0gJ2Jyb3dzZXInICYmIG9wdHMuZW52ID09PSAncHJvZHVjdGlvbic7XG5cblx0aWYgKHVnbGlmeSA9PT0gdHJ1ZSkge1xuXHRcdHVnbGlmeSA9IGdldERlZmF1bHRzKCd1Z2xpZnknKTtcblx0fSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHVnbGlmeSkpIHtcblx0XHR1Z2xpZnkgPSBtZXJnZShnZXREZWZhdWx0cygndWdsaWZ5JyksIHVnbGlmeSk7XG5cdH1cblxuXHQvKipcblx0ICogSU1QT1JUQU5UOiB1Z2xpZnkuY29tcHJlc3MuZXhwcmVzc2lvbiBNVVNUIGJlIHRydWUgb3IgdGhlIGVudGlyZVxuXHQgKiBtb2R1bGUgd2lsbCBiZSB0cmVhdGVkIGFzIGRlYWQgY29kZSBhbmQgcmVtb3ZlZC5cblx0ICovXG5cdGlmICh1Z2xpZnkpIHtcblx0XHR1Z2xpZnkgPSBtZXJnZSh1Z2xpZnksIHsgc291cmNlTWFwOiBCb29sZWFuKHNvdXJjZU1hcHMpIH0pO1xuXHRcdGlmICh1Z2xpZnkuY29tcHJlc3MgPT09IHRydWUpIHtcblx0XHRcdHVnbGlmeS5jb21wcmVzcyA9IGdldERlZmF1bHRzKCd1Z2xpZnknKS5jb21wcmVzcztcblx0XHR9XG5cdFx0aWYgKGlzUGxhaW5PYmplY3QodWdsaWZ5LmNvbXByZXNzKSkge1xuXHRcdFx0dWdsaWZ5LmNvbXByZXNzLmV4cHJlc3Npb24gPSB0cnVlO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IGJhYmVsLCBkZWZpbmUsIG9wdGltaXplLCBzZXJ2ZXIsIHNvdXJjZU1hcHMsIHVnbGlmeSB9O1xufTtcbiJdfQ==