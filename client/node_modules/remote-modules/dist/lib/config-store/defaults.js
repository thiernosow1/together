"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getDefaults;

var _noop = _interopRequireDefault(require("../helpers/noop"));

var _resolver = require("../resolver");

var _helpers = require("../helpers");

var _middleware = require("./middleware");

var _ = _interopRequireDefault(require("./"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getDefaults(key) {
  switch (key) {
    case 'adapters':
      {
        const {
          CSSAdapter,
          LESSAdapter,
          SASSAdapter,
          JSONAdapter,
          ScriptAdapter
        } = _.default.adapters;
        return [{
          test: ctx => ctx.extension === '.css',
          adapter: CSSAdapter
        }, {
          test: ctx => ctx.extension === '.less',
          adapter: LESSAdapter
        }, {
          test: ctx => ctx.extension === '.sass' || ctx.extension === '.scss',
          adapter: SASSAdapter
        }, {
          test: ctx => ctx.extension === '.json',
          adapter: JSONAdapter
        }, {
          test: ctx => _resolver.defaultExtensions.includes(ctx.extension),
          adapter: ScriptAdapter
        }];
      }

    case 'babylon':
      return {
        sourceType: 'module',
        plugins: ['asyncGenerators', 'classProperties', 'dynamicImport', 'exportDefaultFrom', 'exportNamespaceFrom', 'jsx', 'objectRestSpread']
      };

    case 'optimize':
      return {
        constantFolding: (0, _noop.default)(),
        deadCode: true,
        unreferenced: true
      };

    case 'uglify':
      return {
        compress: {
          // https://github.com/mishoo/UglifyJS2/issues/2874
          inline: false
        },
        output: {
          comments: false
        }
      };

    default:
      return {
        root: '.',
        entry: '.',
        output: '.remote',
        config: '.modulerc',
        env: _.default.getEnv(),
        define: {
          'process.env.NODE_ENV': (0, _noop.default)(),
          'typeof process': 'object'
        },
        provide: {},
        optimize: getDefaults('optimize'),
        include: [],
        strict: false,
        core: _resolver.defaultCore,
        extensions: _resolver.defaultExtensions,
        mainFields: _resolver.defaultMainFields,
        moduleDirs: _resolver.defaultModuleDirs,
        outputTarget: 'module',
        babel: {
          envName: (0, _noop.default)()
        },
        babylon: getDefaults('babylon'),
        preset: undefined,
        uglify: (0, _noop.default)(),
        sourceMaps: (0, _noop.default)(),
        adapters: getDefaults('adapters'),
        middleware: [// Treat absolute URIs as external resources
        (0, _middleware.ExternalMiddleware)(ctx => (0, _helpers.isAbsoluteURL)(ctx.request)), // Treat data URIs as external resources
        (0, _middleware.ExternalMiddleware)(ctx => (0, _helpers.isDataURL)(ctx.request))],
        server: {
          port: 3000,
          uri: 'http://localhost:3000',
          static: [],
          redirects: (0, _noop.default)(),
          publicPath: (0, _noop.default)()
        },
        watch: false
      };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,