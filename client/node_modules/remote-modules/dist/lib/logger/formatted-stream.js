"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = FormattedStream;

var _util = require("util");

var _safe = _interopRequireDefault(require("colors/safe"));

var _escapeRegExp = _interopRequireDefault(require("../helpers/escapeRegExp"));

var _2 = require("./");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

_safe.default.setTheme({
  trace: 'magenta',
  debug: 'cyan',
  info: 'green',
  warn: 'yellow',
  error: 'red',
  fatal: 'rainbow'
});

function formatSrc({
  file,
  line
}) {
  const pattern = new RegExp(`^${(0, _escapeRegExp.default)(process.cwd())}/(node_modules/)?`);
  const location = file.replace(pattern, '');
  return _safe.default.gray(`${location}:${line}`);
}

function format(_ref) {
  let {
    err,
    level,
    msg,
    name,
    src,
    time
  } = _ref,
      other = _objectWithoutProperties(_ref, ["err", "level", "msg", "name", "src", "time"]);

  const levelName = _2.Logger.nameFromLevel[level];
  return [time.toISOString(), `${_safe.default[levelName](levelName)}:`, `[${name}${src ? ` ${formatSrc(src)}` : ''}]`, err ? err.stack || err.message || err : null, err ? null : msg, !msg && !err ? `\n${(0, _util.inspect)(other, {
    colors: true
  })}` : null].filter(Boolean).join(' ');
}

function write(_ref2) {
  let {
    v: _
  } = _ref2,
      rec = _objectWithoutProperties(_ref2, ["v"]);

  switch (true) {
    case rec.level === _2.Logger.WARN:
      // eslint-disable-next-line no-console
      console.warn(format(rec));
      break;

    case rec.level >= _2.Logger.ERROR:
      // eslint-disable-next-line no-console
      console.error(format(rec));
      break;

    default:
      // eslint-disable-next-line no-console
      console.log(format(rec));
      break;
  }
}

function FormattedStream() {
  return {
    write
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvbG9nZ2VyL2Zvcm1hdHRlZC1zdHJlYW0uanMiXSwibmFtZXMiOlsiY29sb3JzIiwic2V0VGhlbWUiLCJ0cmFjZSIsImRlYnVnIiwiaW5mbyIsIndhcm4iLCJlcnJvciIsImZhdGFsIiwiZm9ybWF0U3JjIiwiZmlsZSIsImxpbmUiLCJwYXR0ZXJuIiwiUmVnRXhwIiwicHJvY2VzcyIsImN3ZCIsImxvY2F0aW9uIiwicmVwbGFjZSIsImdyYXkiLCJmb3JtYXQiLCJlcnIiLCJsZXZlbCIsIm1zZyIsIm5hbWUiLCJzcmMiLCJ0aW1lIiwib3RoZXIiLCJsZXZlbE5hbWUiLCJMb2dnZXIiLCJuYW1lRnJvbUxldmVsIiwidG9JU09TdHJpbmciLCJzdGFjayIsIm1lc3NhZ2UiLCJmaWx0ZXIiLCJCb29sZWFuIiwiam9pbiIsIndyaXRlIiwidiIsIl8iLCJyZWMiLCJXQVJOIiwiY29uc29sZSIsIkVSUk9SIiwibG9nIiwiRm9ybWF0dGVkU3RyZWFtIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRUE7O0FBRUE7O0FBQ0E7Ozs7Ozs7O0FBRUFBLGNBQU9DLFFBQVAsQ0FBZ0I7QUFDZkMsRUFBQUEsS0FBSyxFQUFFLFNBRFE7QUFFZkMsRUFBQUEsS0FBSyxFQUFFLE1BRlE7QUFHZkMsRUFBQUEsSUFBSSxFQUFFLE9BSFM7QUFJZkMsRUFBQUEsSUFBSSxFQUFFLFFBSlM7QUFLZkMsRUFBQUEsS0FBSyxFQUFFLEtBTFE7QUFNZkMsRUFBQUEsS0FBSyxFQUFFO0FBTlEsQ0FBaEI7O0FBU0EsU0FBU0MsU0FBVCxDQUFtQjtBQUFFQyxFQUFBQSxJQUFGO0FBQVFDLEVBQUFBO0FBQVIsQ0FBbkIsRUFBbUM7QUFDbEMsUUFBTUMsT0FBTyxHQUFHLElBQUlDLE1BQUosQ0FBWSxJQUFHLDJCQUFhQyxPQUFPLENBQUNDLEdBQVIsRUFBYixDQUE0QixtQkFBM0MsQ0FBaEI7QUFDQSxRQUFNQyxRQUFRLEdBQUdOLElBQUksQ0FBQ08sT0FBTCxDQUFhTCxPQUFiLEVBQXNCLEVBQXRCLENBQWpCO0FBQ0EsU0FBT1gsY0FBT2lCLElBQVAsQ0FBYSxHQUFFRixRQUFTLElBQUdMLElBQUssRUFBaEMsQ0FBUDtBQUNBOztBQUVELFNBQVNRLE1BQVQsT0FBZ0U7QUFBQSxNQUFoRDtBQUFFQyxJQUFBQSxHQUFGO0FBQU9DLElBQUFBLEtBQVA7QUFBY0MsSUFBQUEsR0FBZDtBQUFtQkMsSUFBQUEsSUFBbkI7QUFBeUJDLElBQUFBLEdBQXpCO0FBQThCQyxJQUFBQTtBQUE5QixHQUFnRDtBQUFBLE1BQVRDLEtBQVM7O0FBQy9ELFFBQU1DLFNBQVMsR0FBR0MsVUFBT0MsYUFBUCxDQUFxQlIsS0FBckIsQ0FBbEI7QUFDQSxTQUFPLENBQ05JLElBQUksQ0FBQ0ssV0FBTCxFQURNLEVBRUwsR0FBRTdCLGNBQU8wQixTQUFQLEVBQWtCQSxTQUFsQixDQUE2QixHQUYxQixFQUdMLElBQUdKLElBQUssR0FBRUMsR0FBRyxHQUFJLElBQUdmLFNBQVMsQ0FBQ2UsR0FBRCxDQUFNLEVBQXRCLEdBQTBCLEVBQUcsR0FIckMsRUFJTkosR0FBRyxHQUFHQSxHQUFHLENBQUNXLEtBQUosSUFBYVgsR0FBRyxDQUFDWSxPQUFqQixJQUE0QlosR0FBL0IsR0FBcUMsSUFKbEMsRUFLTkEsR0FBRyxHQUFHLElBQUgsR0FBVUUsR0FMUCxFQU1OLENBQUNBLEdBQUQsSUFBUSxDQUFDRixHQUFULEdBQWdCLEtBQUksbUJBQVFNLEtBQVIsRUFBZTtBQUFFekIsSUFBQUEsTUFBTSxFQUFFO0FBQVYsR0FBZixDQUFpQyxFQUFyRCxHQUF5RCxJQU5uRCxFQVFMZ0MsTUFSSyxDQVFFQyxPQVJGLEVBU0xDLElBVEssQ0FTQSxHQVRBLENBQVA7QUFVQTs7QUFFRCxTQUFTQyxLQUFULFFBQWlDO0FBQUEsTUFBbEI7QUFBRUMsSUFBQUEsQ0FBQyxFQUFFQztBQUFMLEdBQWtCO0FBQUEsTUFBUEMsR0FBTzs7QUFDaEMsVUFBUSxJQUFSO0FBQ0MsU0FBS0EsR0FBRyxDQUFDbEIsS0FBSixLQUFjTyxVQUFPWSxJQUExQjtBQUNDO0FBQ0FDLE1BQUFBLE9BQU8sQ0FBQ25DLElBQVIsQ0FBYWEsTUFBTSxDQUFDb0IsR0FBRCxDQUFuQjtBQUNBOztBQUNELFNBQUtBLEdBQUcsQ0FBQ2xCLEtBQUosSUFBYU8sVUFBT2MsS0FBekI7QUFDQztBQUNBRCxNQUFBQSxPQUFPLENBQUNsQyxLQUFSLENBQWNZLE1BQU0sQ0FBQ29CLEdBQUQsQ0FBcEI7QUFDQTs7QUFDRDtBQUNDO0FBQ0FFLE1BQUFBLE9BQU8sQ0FBQ0UsR0FBUixDQUFZeEIsTUFBTSxDQUFDb0IsR0FBRCxDQUFsQjtBQUNBO0FBWkY7QUFjQTs7QUFFYyxTQUFTSyxlQUFULEdBQTJCO0FBQ3pDLFNBQU87QUFBRVIsSUFBQUE7QUFBRixHQUFQO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSAndXRpbCc7XG5cbmltcG9ydCBjb2xvcnMgZnJvbSAnY29sb3JzL3NhZmUnO1xuXG5pbXBvcnQgZXNjYXBlUmVnRXhwIGZyb20gJy4uL2hlbHBlcnMvZXNjYXBlUmVnRXhwJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4vJztcblxuY29sb3JzLnNldFRoZW1lKHtcblx0dHJhY2U6ICdtYWdlbnRhJyxcblx0ZGVidWc6ICdjeWFuJyxcblx0aW5mbzogJ2dyZWVuJyxcblx0d2FybjogJ3llbGxvdycsXG5cdGVycm9yOiAncmVkJyxcblx0ZmF0YWw6ICdyYWluYm93J1xufSk7XG5cbmZ1bmN0aW9uIGZvcm1hdFNyYyh7IGZpbGUsIGxpbmUgfSkge1xuXHRjb25zdCBwYXR0ZXJuID0gbmV3IFJlZ0V4cChgXiR7ZXNjYXBlUmVnRXhwKHByb2Nlc3MuY3dkKCkpfS8obm9kZV9tb2R1bGVzLyk/YCk7XG5cdGNvbnN0IGxvY2F0aW9uID0gZmlsZS5yZXBsYWNlKHBhdHRlcm4sICcnKTtcblx0cmV0dXJuIGNvbG9ycy5ncmF5KGAke2xvY2F0aW9ufToke2xpbmV9YCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdCh7IGVyciwgbGV2ZWwsIG1zZywgbmFtZSwgc3JjLCB0aW1lLCAuLi5vdGhlciB9KSB7XG5cdGNvbnN0IGxldmVsTmFtZSA9IExvZ2dlci5uYW1lRnJvbUxldmVsW2xldmVsXTtcblx0cmV0dXJuIFtcblx0XHR0aW1lLnRvSVNPU3RyaW5nKCksXG5cdFx0YCR7Y29sb3JzW2xldmVsTmFtZV0obGV2ZWxOYW1lKX06YCxcblx0XHRgWyR7bmFtZX0ke3NyYyA/IGAgJHtmb3JtYXRTcmMoc3JjKX1gIDogJyd9XWAsXG5cdFx0ZXJyID8gZXJyLnN0YWNrIHx8IGVyci5tZXNzYWdlIHx8IGVyciA6IG51bGwsXG5cdFx0ZXJyID8gbnVsbCA6IG1zZyxcblx0XHQhbXNnICYmICFlcnIgPyBgXFxuJHtpbnNwZWN0KG90aGVyLCB7IGNvbG9yczogdHJ1ZSB9KX1gIDogbnVsbFxuXHRdXG5cdFx0LmZpbHRlcihCb29sZWFuKVxuXHRcdC5qb2luKCcgJyk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlKHsgdjogXywgLi4ucmVjIH0pIHtcblx0c3dpdGNoICh0cnVlKSB7XG5cdFx0Y2FzZSByZWMubGV2ZWwgPT09IExvZ2dlci5XQVJOOlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcblx0XHRcdGNvbnNvbGUud2Fybihmb3JtYXQocmVjKSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIHJlYy5sZXZlbCA+PSBMb2dnZXIuRVJST1I6XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuXHRcdFx0Y29uc29sZS5lcnJvcihmb3JtYXQocmVjKSk7XG5cdFx0XHRicmVhaztcblx0XHRkZWZhdWx0OlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcblx0XHRcdGNvbnNvbGUubG9nKGZvcm1hdChyZWMpKTtcblx0XHRcdGJyZWFrO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEZvcm1hdHRlZFN0cmVhbSgpIHtcblx0cmV0dXJuIHsgd3JpdGUgfTtcbn1cbiJdfQ==