"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Logger = void 0;

var _bunyan = _interopRequireDefault(require("bunyan"));

var _formattedStream = _interopRequireDefault(require("./formatted-stream"));

var _package = _interopRequireDefault(require("../../../package.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Logger extends _bunyan.default {
  constructor(options) {
    super(_objectSpread({
      name: _package.default.name,
      level: process.env.LOG_LVL,
      streams: [{
        type: 'raw',
        stream: new _formattedStream.default()
      }]
    }, options));
  }

  child(options) {
    return new this.constructor(_objectSpread({
      level: this.level(),
      streams: [...this.streams]
    }, options));
  }

  profile() {
    const start = process.hrtime();
    return label => {
      const [s, ns] = process.hrtime(start);
      const ms = s * 1e3 + ns * 1e-6;
      const message = label.message || label;
      const level = label.level || 'info';
      this[level](`${message} duration=${ms.toFixed(3)}ms`);
    };
  }

}

exports.Logger = Logger;

var _default = new Logger();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvbG9nZ2VyL2luZGV4LmpzIl0sIm5hbWVzIjpbIkxvZ2dlciIsIkJ1bnlhbiIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsIm5hbWUiLCJwa2ciLCJsZXZlbCIsInByb2Nlc3MiLCJlbnYiLCJMT0dfTFZMIiwic3RyZWFtcyIsInR5cGUiLCJzdHJlYW0iLCJGb3JtYXR0ZWRTdHJlYW0iLCJjaGlsZCIsInByb2ZpbGUiLCJzdGFydCIsImhydGltZSIsImxhYmVsIiwicyIsIm5zIiwibXMiLCJtZXNzYWdlIiwidG9GaXhlZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBOztBQUVBOzs7Ozs7OztBQUVPLE1BQU1BLE1BQU4sU0FBcUJDLGVBQXJCLENBQTRCO0FBQ2xDQyxFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBVTtBQUNwQjtBQUNDQyxNQUFBQSxJQUFJLEVBQUVDLGlCQUFJRCxJQURYO0FBRUNFLE1BQUFBLEtBQUssRUFBRUMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLE9BRnBCO0FBR0NDLE1BQUFBLE9BQU8sRUFBRSxDQUNSO0FBQ0NDLFFBQUFBLElBQUksRUFBRSxLQURQO0FBRUNDLFFBQUFBLE1BQU0sRUFBRSxJQUFJQyx3QkFBSjtBQUZULE9BRFE7QUFIVixPQVNJVixPQVRKO0FBV0E7O0FBRURXLEVBQUFBLEtBQUssQ0FBQ1gsT0FBRCxFQUFVO0FBQ2QsV0FBTyxJQUFJLEtBQUtELFdBQVQ7QUFDTkksTUFBQUEsS0FBSyxFQUFFLEtBQUtBLEtBQUwsRUFERDtBQUVOSSxNQUFBQSxPQUFPLEVBQUUsQ0FBQyxHQUFHLEtBQUtBLE9BQVQ7QUFGSCxPQUdIUCxPQUhHLEVBQVA7QUFLQTs7QUFFRFksRUFBQUEsT0FBTyxHQUFHO0FBQ1QsVUFBTUMsS0FBSyxHQUFHVCxPQUFPLENBQUNVLE1BQVIsRUFBZDtBQUNBLFdBQU9DLEtBQUssSUFBSTtBQUNmLFlBQU0sQ0FBQ0MsQ0FBRCxFQUFJQyxFQUFKLElBQVViLE9BQU8sQ0FBQ1UsTUFBUixDQUFlRCxLQUFmLENBQWhCO0FBQ0EsWUFBTUssRUFBRSxHQUFHRixDQUFDLEdBQUcsR0FBSixHQUFVQyxFQUFFLEdBQUcsSUFBMUI7QUFDQSxZQUFNRSxPQUFPLEdBQUdKLEtBQUssQ0FBQ0ksT0FBTixJQUFpQkosS0FBakM7QUFDQSxZQUFNWixLQUFLLEdBQUdZLEtBQUssQ0FBQ1osS0FBTixJQUFlLE1BQTdCO0FBQ0EsV0FBS0EsS0FBTCxFQUFhLEdBQUVnQixPQUFRLGFBQVlELEVBQUUsQ0FBQ0UsT0FBSCxDQUFXLENBQVgsQ0FBYyxJQUFqRDtBQUNBLEtBTkQ7QUFPQTs7QUFoQ2lDOzs7O2VBbUNwQixJQUFJdkIsTUFBSixFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJ1bnlhbiBmcm9tICdidW55YW4nO1xuXG5pbXBvcnQgRm9ybWF0dGVkU3RyZWFtIGZyb20gJy4vZm9ybWF0dGVkLXN0cmVhbSc7XG5cbmltcG9ydCBwa2cgZnJvbSAnLi4vLi4vLi4vcGFja2FnZS5qc29uJztcblxuZXhwb3J0IGNsYXNzIExvZ2dlciBleHRlbmRzIEJ1bnlhbiB7XG5cdGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcblx0XHRzdXBlcih7XG5cdFx0XHRuYW1lOiBwa2cubmFtZSxcblx0XHRcdGxldmVsOiBwcm9jZXNzLmVudi5MT0dfTFZMLFxuXHRcdFx0c3RyZWFtczogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dHlwZTogJ3JhdycsXG5cdFx0XHRcdFx0c3RyZWFtOiBuZXcgRm9ybWF0dGVkU3RyZWFtKClcblx0XHRcdFx0fVxuXHRcdFx0XSxcblx0XHRcdC4uLm9wdGlvbnNcblx0XHR9KTtcblx0fVxuXG5cdGNoaWxkKG9wdGlvbnMpIHtcblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3Ioe1xuXHRcdFx0bGV2ZWw6IHRoaXMubGV2ZWwoKSxcblx0XHRcdHN0cmVhbXM6IFsuLi50aGlzLnN0cmVhbXNdLFxuXHRcdFx0Li4ub3B0aW9uc1xuXHRcdH0pO1xuXHR9XG5cblx0cHJvZmlsZSgpIHtcblx0XHRjb25zdCBzdGFydCA9IHByb2Nlc3MuaHJ0aW1lKCk7XG5cdFx0cmV0dXJuIGxhYmVsID0+IHtcblx0XHRcdGNvbnN0IFtzLCBuc10gPSBwcm9jZXNzLmhydGltZShzdGFydCk7XG5cdFx0XHRjb25zdCBtcyA9IHMgKiAxZTMgKyBucyAqIDFlLTY7XG5cdFx0XHRjb25zdCBtZXNzYWdlID0gbGFiZWwubWVzc2FnZSB8fCBsYWJlbDtcblx0XHRcdGNvbnN0IGxldmVsID0gbGFiZWwubGV2ZWwgfHwgJ2luZm8nO1xuXHRcdFx0dGhpc1tsZXZlbF0oYCR7bWVzc2FnZX0gZHVyYXRpb249JHttcy50b0ZpeGVkKDMpfW1zYCk7XG5cdFx0fTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgTG9nZ2VyKCk7XG4iXX0=