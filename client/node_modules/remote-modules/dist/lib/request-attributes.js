"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatAttributes = formatAttributes;
exports.parseAttributes = parseAttributes;
exports.stripAttributes = stripAttributes;

var _helpers = require("./helpers");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getAttributesRegExp() {
  return /(?:<([^>]+)>)/;
}

function formatAttributes(attributes) {
  const keys = Object.keys((0, _helpers.pickBy)(attributes, Boolean));
  return keys.length ? `<${keys.join(',')}>` : undefined;
}

function parseAttributes(requestValue) {
  const attributes = {};
  const [, attributesList] = requestValue.match(getAttributesRegExp()) || [];

  if (attributesList) {
    attributesList.split(',').forEach(attribute => {
      const [, key, value = true] = attribute.match(/^([^=]+)(?:=(.+)|$)/);
      attributes[key] = value;
    });
  }

  return {
    list: attributesList,
    attributes: _objectSpread({}, attributes, {
      href: attributes.href === undefined && attributes.static || attributes.href
    })
  };
}

function stripAttributes(requestValue) {
  return requestValue.replace(getAttributesRegExp(), '');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcmVxdWVzdC1hdHRyaWJ1dGVzLmpzIl0sIm5hbWVzIjpbImdldEF0dHJpYnV0ZXNSZWdFeHAiLCJmb3JtYXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsImtleXMiLCJPYmplY3QiLCJCb29sZWFuIiwibGVuZ3RoIiwiam9pbiIsInVuZGVmaW5lZCIsInBhcnNlQXR0cmlidXRlcyIsInJlcXVlc3RWYWx1ZSIsImF0dHJpYnV0ZXNMaXN0IiwibWF0Y2giLCJzcGxpdCIsImZvckVhY2giLCJhdHRyaWJ1dGUiLCJrZXkiLCJ2YWx1ZSIsImxpc3QiLCJocmVmIiwic3RhdGljIiwic3RyaXBBdHRyaWJ1dGVzIiwicmVwbGFjZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7Ozs7OztBQUVBLFNBQVNBLG1CQUFULEdBQStCO0FBQzlCLFNBQU8sZUFBUDtBQUNBOztBQUVNLFNBQVNDLGdCQUFULENBQTBCQyxVQUExQixFQUFzQztBQUM1QyxRQUFNQyxJQUFJLEdBQUdDLE1BQU0sQ0FBQ0QsSUFBUCxDQUFZLHFCQUFPRCxVQUFQLEVBQW1CRyxPQUFuQixDQUFaLENBQWI7QUFDQSxTQUFPRixJQUFJLENBQUNHLE1BQUwsR0FBZSxJQUFHSCxJQUFJLENBQUNJLElBQUwsQ0FBVSxHQUFWLENBQWUsR0FBakMsR0FBc0NDLFNBQTdDO0FBQ0E7O0FBRU0sU0FBU0MsZUFBVCxDQUF5QkMsWUFBekIsRUFBdUM7QUFDN0MsUUFBTVIsVUFBVSxHQUFHLEVBQW5CO0FBQ0EsUUFBTSxHQUFHUyxjQUFILElBQXFCRCxZQUFZLENBQUNFLEtBQWIsQ0FBbUJaLG1CQUFtQixFQUF0QyxLQUE2QyxFQUF4RTs7QUFDQSxNQUFJVyxjQUFKLEVBQW9CO0FBQ25CQSxJQUFBQSxjQUFjLENBQUNFLEtBQWYsQ0FBcUIsR0FBckIsRUFBMEJDLE9BQTFCLENBQWtDQyxTQUFTLElBQUk7QUFDOUMsWUFBTSxHQUFHQyxHQUFILEVBQVFDLEtBQUssR0FBRyxJQUFoQixJQUF3QkYsU0FBUyxDQUFDSCxLQUFWLENBQWdCLHFCQUFoQixDQUE5QjtBQUNBVixNQUFBQSxVQUFVLENBQUNjLEdBQUQsQ0FBVixHQUFrQkMsS0FBbEI7QUFDQSxLQUhEO0FBSUE7O0FBQ0QsU0FBTztBQUNOQyxJQUFBQSxJQUFJLEVBQUVQLGNBREE7QUFFTlQsSUFBQUEsVUFBVSxvQkFDTkEsVUFETTtBQUVUaUIsTUFBQUEsSUFBSSxFQUFHakIsVUFBVSxDQUFDaUIsSUFBWCxLQUFvQlgsU0FBcEIsSUFBaUNOLFVBQVUsQ0FBQ2tCLE1BQTdDLElBQXdEbEIsVUFBVSxDQUFDaUI7QUFGaEU7QUFGSixHQUFQO0FBT0E7O0FBRU0sU0FBU0UsZUFBVCxDQUF5QlgsWUFBekIsRUFBdUM7QUFDN0MsU0FBT0EsWUFBWSxDQUFDWSxPQUFiLENBQXFCdEIsbUJBQW1CLEVBQXhDLEVBQTRDLEVBQTVDLENBQVA7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBpY2tCeSB9IGZyb20gJy4vaGVscGVycyc7XG5cbmZ1bmN0aW9uIGdldEF0dHJpYnV0ZXNSZWdFeHAoKSB7XG5cdHJldHVybiAvKD86PChbXj5dKyk+KS87XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpIHtcblx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHBpY2tCeShhdHRyaWJ1dGVzLCBCb29sZWFuKSk7XG5cdHJldHVybiBrZXlzLmxlbmd0aCA/IGA8JHtrZXlzLmpvaW4oJywnKX0+YCA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQXR0cmlidXRlcyhyZXF1ZXN0VmFsdWUpIHtcblx0Y29uc3QgYXR0cmlidXRlcyA9IHt9O1xuXHRjb25zdCBbLCBhdHRyaWJ1dGVzTGlzdF0gPSByZXF1ZXN0VmFsdWUubWF0Y2goZ2V0QXR0cmlidXRlc1JlZ0V4cCgpKSB8fCBbXTtcblx0aWYgKGF0dHJpYnV0ZXNMaXN0KSB7XG5cdFx0YXR0cmlidXRlc0xpc3Quc3BsaXQoJywnKS5mb3JFYWNoKGF0dHJpYnV0ZSA9PiB7XG5cdFx0XHRjb25zdCBbLCBrZXksIHZhbHVlID0gdHJ1ZV0gPSBhdHRyaWJ1dGUubWF0Y2goL14oW149XSspKD86PSguKyl8JCkvKTtcblx0XHRcdGF0dHJpYnV0ZXNba2V5XSA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHJldHVybiB7XG5cdFx0bGlzdDogYXR0cmlidXRlc0xpc3QsXG5cdFx0YXR0cmlidXRlczoge1xuXHRcdFx0Li4uYXR0cmlidXRlcyxcblx0XHRcdGhyZWY6IChhdHRyaWJ1dGVzLmhyZWYgPT09IHVuZGVmaW5lZCAmJiBhdHRyaWJ1dGVzLnN0YXRpYykgfHwgYXR0cmlidXRlcy5ocmVmXG5cdFx0fVxuXHR9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RyaXBBdHRyaWJ1dGVzKHJlcXVlc3RWYWx1ZSkge1xuXHRyZXR1cm4gcmVxdWVzdFZhbHVlLnJlcGxhY2UoZ2V0QXR0cmlidXRlc1JlZ0V4cCgpLCAnJyk7XG59XG4iXX0=