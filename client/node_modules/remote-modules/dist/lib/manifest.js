"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Manifest {
  static load(internals) {
    return new Manifest(internals.dependencies, internals);
  }

  static derive(parent, meta) {
    const internals = parent.internals();
    return new Manifest(internals.dependencies, _objectSpread({}, internals, {
      meta
    }));
  }

  constructor(dependencies, internals = {}) {
    Object.defineProperty(this, Manifest.internals, {
      value: Object.freeze(_objectSpread({}, internals, {
        dependencies
      })),
      writable: false,
      enumerable: false
    });
    const lookupTable = new Map();
    const meta = this.meta();
    dependencies.forEach(value => {
      lookupTable.set(value.pid, value);
      lookupTable.set(value.moduleId, value);
    });
    lookupTable.set(meta.pid, meta);
    lookupTable.set(meta.moduleId, meta);
    this.lookupTable = lookupTable;
  }

  lookup(key) {
    return this.lookupTable.get(key);
  }

  exists(key) {
    return this.lookupTable.has(key);
  }

  getModuleId(key) {
    return this.exists(key) && this.lookup(key).moduleId || undefined;
  }

  getPid(key) {
    return this.exists(key) && this.lookup(key).pid || undefined;
  }

  getType(key) {
    return this.exists(key) && this.lookup(key).type || undefined;
  }

  getAssetId(key) {
    return this.exists(key) && this.lookup(key).assetId || undefined;
  }

  internals(key) {
    const internals = this[Manifest.internals];
    return key ? internals[key] : internals;
  }

  meta(key) {
    const meta = this.internals('meta');
    return key ? meta[key] : meta;
  }

  list() {
    return this.internals('dependencies').map(({
      moduleId
    }) => moduleId);
  }

  package(key) {
    return this.internals('packages')[key];
  }

  toJSON() {
    return this.internals();
  }

}

exports.default = Manifest;

_defineProperty(Manifest, "internals", Symbol('internals'));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvbWFuaWZlc3QuanMiXSwibmFtZXMiOlsiTWFuaWZlc3QiLCJsb2FkIiwiaW50ZXJuYWxzIiwiZGVwZW5kZW5jaWVzIiwiZGVyaXZlIiwicGFyZW50IiwibWV0YSIsImNvbnN0cnVjdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImZyZWV6ZSIsIndyaXRhYmxlIiwiZW51bWVyYWJsZSIsImxvb2t1cFRhYmxlIiwiTWFwIiwiZm9yRWFjaCIsInNldCIsInBpZCIsIm1vZHVsZUlkIiwibG9va3VwIiwia2V5IiwiZ2V0IiwiZXhpc3RzIiwiaGFzIiwiZ2V0TW9kdWxlSWQiLCJ1bmRlZmluZWQiLCJnZXRQaWQiLCJnZXRUeXBlIiwidHlwZSIsImdldEFzc2V0SWQiLCJhc3NldElkIiwibGlzdCIsIm1hcCIsInBhY2thZ2UiLCJ0b0pTT04iLCJTeW1ib2wiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQWUsTUFBTUEsUUFBTixDQUFlO0FBRzdCLFNBQU9DLElBQVAsQ0FBWUMsU0FBWixFQUF1QjtBQUN0QixXQUFPLElBQUlGLFFBQUosQ0FBYUUsU0FBUyxDQUFDQyxZQUF2QixFQUFxQ0QsU0FBckMsQ0FBUDtBQUNBOztBQUVELFNBQU9FLE1BQVAsQ0FBY0MsTUFBZCxFQUFzQkMsSUFBdEIsRUFBNEI7QUFDM0IsVUFBTUosU0FBUyxHQUFHRyxNQUFNLENBQUNILFNBQVAsRUFBbEI7QUFDQSxXQUFPLElBQUlGLFFBQUosQ0FBYUUsU0FBUyxDQUFDQyxZQUF2QixvQkFBMENELFNBQTFDO0FBQXFESSxNQUFBQTtBQUFyRCxPQUFQO0FBQ0E7O0FBRURDLEVBQUFBLFdBQVcsQ0FBQ0osWUFBRCxFQUFlRCxTQUFTLEdBQUcsRUFBM0IsRUFBK0I7QUFDekNNLElBQUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQixJQUF0QixFQUE0QlQsUUFBUSxDQUFDRSxTQUFyQyxFQUFnRDtBQUMvQ1EsTUFBQUEsS0FBSyxFQUFFRixNQUFN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QUFURixRLGVBQ0RvQyxNQUFNLENBQUMsV0FBRCxDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFuaWZlc3Qge1xuXHRzdGF0aWMgaW50ZXJuYWxzID0gU3ltYm9sKCdpbnRlcm5hbHMnKTtcblxuXHRzdGF0aWMgbG9hZChpbnRlcm5hbHMpIHtcblx0XHRyZXR1cm4gbmV3IE1hbmlmZXN0KGludGVybmFscy5kZXBlbmRlbmNpZXMsIGludGVybmFscyk7XG5cdH1cblxuXHRzdGF0aWMgZGVyaXZlKHBhcmVudCwgbWV0YSkge1xuXHRcdGNvbnN0IGludGVybmFscyA9IHBhcmVudC5pbnRlcm5hbHMoKTtcblx0XHRyZXR1cm4gbmV3IE1hbmlmZXN0KGludGVybmFscy5kZXBlbmRlbmNpZXMsIHsgLi4uaW50ZXJuYWxzLCBtZXRhIH0pO1xuXHR9XG5cblx0Y29uc3RydWN0b3IoZGVwZW5kZW5jaWVzLCBpbnRlcm5hbHMgPSB7fSkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBNYW5pZmVzdC5pbnRlcm5hbHMsIHtcblx0XHRcdHZhbHVlOiBPYmplY3QuZnJlZXplKHsgLi4uaW50ZXJuYWxzLCBkZXBlbmRlbmNpZXMgfSksXG5cdFx0XHR3cml0YWJsZTogZmFsc2UsXG5cdFx0XHRlbnVtZXJhYmxlOiBmYWxzZVxuXHRcdH0pO1xuXG5cdFx0Y29uc3QgbG9va3VwVGFibGUgPSBuZXcgTWFwKCk7XG5cdFx0Y29uc3QgbWV0YSA9IHRoaXMubWV0YSgpO1xuXG5cdFx0ZGVwZW5kZW5jaWVzLmZvckVhY2godmFsdWUgPT4ge1xuXHRcdFx0bG9va3VwVGFibGUuc2V0KHZhbHVlLnBpZCwgdmFsdWUpO1xuXHRcdFx0bG9va3VwVGFibGUuc2V0KHZhbHVlLm1vZHVsZUlkLCB2YWx1ZSk7XG5cdFx0fSk7XG5cblx0XHRsb29rdXBUYWJsZS5zZXQobWV0YS5waWQsIG1ldGEpO1xuXHRcdGxvb2t1cFRhYmxlLnNldChtZXRhLm1vZHVsZUlkLCBtZXRhKTtcblxuXHRcdHRoaXMubG9va3VwVGFibGUgPSBsb29rdXBUYWJsZTtcblx0fVxuXG5cdGxvb2t1cChrZXkpIHtcblx0XHRyZXR1cm4gdGhpcy5sb29rdXBUYWJsZS5nZXQoa2V5KTtcblx0fVxuXG5cdGV4aXN0cyhrZXkpIHtcblx0XHRyZXR1cm4gdGhpcy5sb29rdXBUYWJsZS5oYXMoa2V5KTtcblx0fVxuXG5cdGdldE1vZHVsZUlkKGtleSkge1xuXHRcdHJldHVybiAodGhpcy5leGlzdHMoa2V5KSAmJiB0aGlzLmxvb2t1cChrZXkpLm1vZHVsZUlkKSB8fCB1bmRlZmluZWQ7XG5cdH1cblxuXHRnZXRQaWQoa2V5KSB7XG5cdFx0cmV0dXJuICh0aGlzLmV4aXN0cyhrZXkpICYmIHRoaXMubG9va3VwKGtleSkucGlkKSB8fCB1bmRlZmluZWQ7XG5cdH1cblxuXHRnZXRUeXBlKGtleSkge1xuXHRcdHJldHVybiAodGhpcy5leGlzdHMoa2V5KSAmJiB0aGlzLmxvb2t1cChrZXkpLnR5cGUpIHx8IHVuZGVmaW5lZDtcblx0fVxuXG5cdGdldEFzc2V0SWQoa2V5KSB7XG5cdFx0cmV0dXJuICh0aGlzLmV4aXN0cyhrZXkpICYmIHRoaXMubG9va3VwKGtleSkuYXNzZXRJZCkgfHwgdW5kZWZpbmVkO1xuXHR9XG5cblx0aW50ZXJuYWxzKGtleSkge1xuXHRcdGNvbnN0IGludGVybmFscyA9IHRoaXNbTWFuaWZlc3QuaW50ZXJuYWxzXTtcblx0XHRyZXR1cm4ga2V5ID8gaW50ZXJuYWxzW2tleV0gOiBpbnRlcm5hbHM7XG5cdH1cblxuXHRtZXRhKGtleSkge1xuXHRcdGNvbnN0IG1ldGEgPSB0aGlzLmludGVybmFscygnbWV0YScpO1xuXHRcdHJldHVybiBrZXkgPyBtZXRhW2tleV0gOiBtZXRhO1xuXHR9XG5cblx0bGlzdCgpIHtcblx0XHRyZXR1cm4gdGhpcy5pbnRlcm5hbHMoJ2RlcGVuZGVuY2llcycpLm1hcCgoeyBtb2R1bGVJZCB9KSA9PiBtb2R1bGVJZCk7XG5cdH1cblxuXHRwYWNrYWdlKGtleSkge1xuXHRcdHJldHVybiB0aGlzLmludGVybmFscygncGFja2FnZXMnKVtrZXldO1xuXHR9XG5cblx0dG9KU09OKCkge1xuXHRcdHJldHVybiB0aGlzLmludGVybmFscygpO1xuXHR9XG59XG4iXX0=