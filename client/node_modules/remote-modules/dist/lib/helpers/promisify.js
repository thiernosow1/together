"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = promisify;

var _identity = _interopRequireDefault(require("./identity"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Wraps a function that accepts a callback with signature {@code (err, result)}
 * {@br}
 * {@bold Note:} This is not the same as [asyncify]{@link module:asyncify}
 * @since 0.1.0
 * @see [Bluebird.promisify]{@link http://bluebirdjs.com/docs/api/promise.promisify.html}
 * @see [util.promisify]{@link https://nodejs.org/api/util.html#util_util_promisify_original}
 *
 * @param {function} fn - The function to wrap
 * @param {object} [context] - The function context
 * @param {object} [options]
 * @param {object} [options.defaults={}] - Default arguments to be passed to {@code fn}
 * @param {object} [options.xargs=[identity]{@link module:identity}] - A function to transform result args
 * @return {function}
 *
 * @example
 * const writeFileAsync = promisify(fs.writeFile, fs);
 *
 * const readFileAsync = promisify(fs.readFile, fs, {
 * 	defaults: { 1: 'utf8' }
 * });
 *
 * const existsAsync = promisify(fs.exists, fs, {
 * 	xargs: ([result]) => [null, result]
 * });
 */
function promisify(fn, context, {
  defaults = {},
  xargs = _identity.default
} = {}) {
  return (...inputArgs) => new Promise((resolve, reject) => {
    const argsWithDefaults = Object.assign([], defaults, inputArgs);
    fn.call(context, ...argsWithDefaults, (...args) => {
      const [err, result] = xargs(args);
      return err ? reject(err) : resolve(result);
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvaGVscGVycy9wcm9taXNpZnkuanMiXSwibmFtZXMiOlsicHJvbWlzaWZ5IiwiZm4iLCJjb250ZXh0IiwiZGVmYXVsdHMiLCJ4YXJncyIsImlkZW50aXR5IiwiaW5wdXRBcmdzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJhcmdzV2l0aERlZmF1bHRzIiwiT2JqZWN0IiwiYXNzaWduIiwiY2FsbCIsImFyZ3MiLCJlcnIiLCJyZXN1bHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBCZSxTQUFTQSxTQUFULENBQW1CQyxFQUFuQixFQUF1QkMsT0FBdkIsRUFBZ0M7QUFBRUMsRUFBQUEsUUFBUSxHQUFHLEVBQWI7QUFBaUJDLEVBQUFBLEtBQUssR0FBR0M7QUFBekIsSUFBc0MsRUFBdEUsRUFBMEU7QUFDeEYsU0FBTyxDQUFDLEdBQUdDLFNBQUosS0FDTixJQUFJQyxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ2hDLFVBQU1DLGdCQUFnQixHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCVCxRQUFsQixFQUE0QkcsU0FBNUIsQ0FBekI7QUFDQUwsSUFBQUEsRUFBRSxDQUFDWSxJQUFILENBQVFYLE9BQVIsRUFBaUIsR0FBR1EsZ0JBQXBCLEVBQXNDLENBQUMsR0FBR0ksSUFBSixLQUFhO0FBQ2xELFlBQU0sQ0FBQ0MsR0FBRCxFQUFNQyxNQUFOLElBQWdCWixLQUFLLENBQUNVLElBQUQsQ0FBM0I7QUFDQSxhQUFPQyxHQUFHLEdBQUdOLE1BQU0sQ0FBQ00sR0FBRCxDQUFULEdBQWlCUCxPQUFPLENBQUNRLE1BQUQsQ0FBbEM7QUFDQSxLQUhEO0FBSUEsR0FORCxDQUREO0FBUUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaWRlbnRpdHkgZnJvbSAnLi9pZGVudGl0eSc7XG5cbi8qKlxuICogV3JhcHMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYSBjYWxsYmFjayB3aXRoIHNpZ25hdHVyZSB7QGNvZGUgKGVyciwgcmVzdWx0KX1cbiAqIHtAYnJ9XG4gKiB7QGJvbGQgTm90ZTp9IFRoaXMgaXMgbm90IHRoZSBzYW1lIGFzIFthc3luY2lmeV17QGxpbmsgbW9kdWxlOmFzeW5jaWZ5fVxuICogQHNpbmNlIDAuMS4wXG4gKiBAc2VlIFtCbHVlYmlyZC5wcm9taXNpZnlde0BsaW5rIGh0dHA6Ly9ibHVlYmlyZGpzLmNvbS9kb2NzL2FwaS9wcm9taXNlLnByb21pc2lmeS5odG1sfVxuICogQHNlZSBbdXRpbC5wcm9taXNpZnlde0BsaW5rIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvdXRpbC5odG1sI3V0aWxfdXRpbF9wcm9taXNpZnlfb3JpZ2luYWx9XG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gZm4gLSBUaGUgZnVuY3Rpb24gdG8gd3JhcFxuICogQHBhcmFtIHtvYmplY3R9IFtjb250ZXh0XSAtIFRoZSBmdW5jdGlvbiBjb250ZXh0XG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMuZGVmYXVsdHM9e31dIC0gRGVmYXVsdCBhcmd1bWVudHMgdG8gYmUgcGFzc2VkIHRvIHtAY29kZSBmbn1cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy54YXJncz1baWRlbnRpdHlde0BsaW5rIG1vZHVsZTppZGVudGl0eX1dIC0gQSBmdW5jdGlvbiB0byB0cmFuc2Zvcm0gcmVzdWx0IGFyZ3NcbiAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCB3cml0ZUZpbGVBc3luYyA9IHByb21pc2lmeShmcy53cml0ZUZpbGUsIGZzKTtcbiAqXG4gKiBjb25zdCByZWFkRmlsZUFzeW5jID0gcHJvbWlzaWZ5KGZzLnJlYWRGaWxlLCBmcywge1xuICogXHRkZWZhdWx0czogeyAxOiAndXRmOCcgfVxuICogfSk7XG4gKlxuICogY29uc3QgZXhpc3RzQXN5bmMgPSBwcm9taXNpZnkoZnMuZXhpc3RzLCBmcywge1xuICogXHR4YXJnczogKFtyZXN1bHRdKSA9PiBbbnVsbCwgcmVzdWx0XVxuICogfSk7XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByb21pc2lmeShmbiwgY29udGV4dCwgeyBkZWZhdWx0cyA9IHt9LCB4YXJncyA9IGlkZW50aXR5IH0gPSB7fSkge1xuXHRyZXR1cm4gKC4uLmlucHV0QXJncykgPT5cblx0XHRuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRjb25zdCBhcmdzV2l0aERlZmF1bHRzID0gT2JqZWN0LmFzc2lnbihbXSwgZGVmYXVsdHMsIGlucHV0QXJncyk7XG5cdFx0XHRmbi5jYWxsKGNvbnRleHQsIC4uLmFyZ3NXaXRoRGVmYXVsdHMsICguLi5hcmdzKSA9PiB7XG5cdFx0XHRcdGNvbnN0IFtlcnIsIHJlc3VsdF0gPSB4YXJncyhhcmdzKTtcblx0XHRcdFx0cmV0dXJuIGVyciA/IHJlamVjdChlcnIpIDogcmVzb2x2ZShyZXN1bHQpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG59XG4iXX0=