"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.matches = matches;
exports.isPrimitive = isPrimitive;
exports.isPlainObject = isPlainObject;
exports.mapObject = mapObject;
exports.pickBy = pickBy;
exports.pickDefined = pickDefined;
exports.omit = omit;
exports.stripBounding = stripBounding;
exports.isAbsoluteURL = isAbsoluteURL;
exports.isDataURL = isDataURL;
exports.isAbsolutePath = isAbsolutePath;
exports.isRelativePath = isRelativePath;

function matches(target, query) {
  let result = true;

  for (const [key, value] of Object.entries(query)) {
    if (target[key] !== value) {
      result = false;
      break;
    }
  }

  return result;
}

function isPrimitive(value) {
  return value === null || typeof value !== 'object' && typeof value !== 'function';
}

function isPlainObject(value) {
  return Boolean(value && (Object(value).constructor === Object || Object.getPrototypeOf(value) === null));
}

function mapObject(target, fn) {
  return target && Object.entries(target).reduce((acc, [key, value]) => {
    acc[key] = fn(value, key);
    return acc;
  }, Array.isArray(target) ? [] : {});
}

function pickBy(target, fn) {
  return target && Object.entries(target).reduce((acc, [key, value]) => {
    if (fn(value, key)) {
      acc[key] = value;
    }

    return acc;
  }, Array.isArray(target) ? [] : {});
}

function pickDefined(target) {
  return pickBy(target, value => value !== undefined);
}

function omit(target, keys) {
  return pickBy(target, (value, key) => !keys.includes(key));
}

function stripBounding(value, pattern) {
  return value && value.replace(new RegExp(`^${pattern}|${pattern}$`), '');
}

function isAbsoluteURL(path) {
  return Boolean(path && /^(\w+:)?\/\//.test(path));
}

function isDataURL(path) {
  return Boolean(path && /^data:\w+/i.test(path));
}

function isAbsolutePath(path) {
  return Boolean(path && /^\/([^/]|$)/.test(path));
}

function isRelativePath(path) {
  return Boolean(path && /^\.{1,2}(?:\/|$)/.test(path));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvaGVscGVycy9pbmRleC5qcyJdLCJuYW1lcyI6WyJtYXRjaGVzIiwidGFyZ2V0IiwicXVlcnkiLCJyZXN1bHQiLCJrZXkiLCJ2YWx1ZSIsIk9iamVjdCIsImVudHJpZXMiLCJpc1ByaW1pdGl2ZSIsImlzUGxhaW5PYmplY3QiLCJCb29sZWFuIiwiY29uc3RydWN0b3IiLCJnZXRQcm90b3R5cGVPZiIsIm1hcE9iamVjdCIsImZuIiwicmVkdWNlIiwiYWNjIiwiQXJyYXkiLCJpc0FycmF5IiwicGlja0J5IiwicGlja0RlZmluZWQiLCJ1bmRlZmluZWQiLCJvbWl0Iiwia2V5cyIsImluY2x1ZGVzIiwic3RyaXBCb3VuZGluZyIsInBhdHRlcm4iLCJyZXBsYWNlIiwiUmVnRXhwIiwiaXNBYnNvbHV0ZVVSTCIsInBhdGgiLCJ0ZXN0IiwiaXNEYXRhVVJMIiwiaXNBYnNvbHV0ZVBhdGgiLCJpc1JlbGF0aXZlUGF0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQU8sU0FBU0EsT0FBVCxDQUFpQkMsTUFBakIsRUFBeUJDLEtBQXpCLEVBQWdDO0FBQ3RDLE1BQUlDLE1BQU0sR0FBRyxJQUFiOztBQUNBLE9BQUssTUFBTSxDQUFDQyxHQUFELEVBQU1DLEtBQU4sQ0FBWCxJQUEyQkMsTUFBTSxDQUFDQyxPQUFQLENBQWVMLEtBQWYsQ0FBM0IsRUFBa0Q7QUFDakQsUUFBSUQsTUFBTSxDQUFDRyxHQUFELENBQU4sS0FBZ0JDLEtBQXBCLEVBQTJCO0FBQzFCRixNQUFBQSxNQUFNLEdBQUcsS0FBVDtBQUNBO0FBQ0E7QUFDRDs7QUFDRCxTQUFPQSxNQUFQO0FBQ0E7O0FBRU0sU0FBU0ssV0FBVCxDQUFxQkgsS0FBckIsRUFBNEI7QUFDbEMsU0FBT0EsS0FBSyxLQUFLLElBQVYsSUFBbUIsT0FBT0EsS0FBUCxLQUFpQixRQUFqQixJQUE2QixPQUFPQSxLQUFQLEtBQWlCLFVBQXhFO0FBQ0E7O0FBRU0sU0FBU0ksYUFBVCxDQUF1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IHtcblx0bGV0IHJlc3VsdCA9IHRydWU7XG5cdGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHF1ZXJ5KSkge1xuXHRcdGlmICh0YXJnZXRba2V5XSAhPT0gdmFsdWUpIHtcblx0XHRcdHJlc3VsdCA9IGZhbHNlO1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ByaW1pdGl2ZSh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcblx0cmV0dXJuIEJvb2xlYW4oXG5cdFx0dmFsdWUgJiYgKE9iamVjdCh2YWx1ZSkuY29uc3RydWN0b3IgPT09IE9iamVjdCB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpID09PSBudWxsKVxuXHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFwT2JqZWN0KHRhcmdldCwgZm4pIHtcblx0cmV0dXJuIChcblx0XHR0YXJnZXQgJiZcblx0XHRPYmplY3QuZW50cmllcyh0YXJnZXQpLnJlZHVjZSgoYWNjLCBba2V5LCB2YWx1ZV0pID0+IHtcblx0XHRcdGFjY1trZXldID0gZm4odmFsdWUsIGtleSk7XG5cdFx0XHRyZXR1cm4gYWNjO1xuXHRcdH0sIEFycmF5LmlzQXJyYXkodGFyZ2V0KSA/IFtdIDoge30pXG5cdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwaWNrQnkodGFyZ2V0LCBmbikge1xuXHRyZXR1cm4gKFxuXHRcdHRhcmdldCAmJlxuXHRcdE9iamVjdC5lbnRyaWVzKHRhcmdldCkucmVkdWNlKChhY2MsIFtrZXksIHZhbHVlXSkgPT4ge1xuXHRcdFx0aWYgKGZuKHZhbHVlLCBrZXkpKSB7XG5cdFx0XHRcdGFjY1trZXldID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gYWNjO1xuXHRcdH0sIEFycmF5LmlzQXJyYXkodGFyZ2V0KSA/IFtdIDoge30pXG5cdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwaWNrRGVmaW5lZCh0YXJnZXQpIHtcblx0cmV0dXJuIHBpY2tCeSh0YXJnZXQsIHZhbHVlID0+IHZhbHVlICE9PSB1bmRlZmluZWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb21pdCh0YXJnZXQsIGtleXMpIHtcblx0cmV0dXJuIHBpY2tCeSh0YXJnZXQsICh2YWx1ZSwga2V5KSA9PiAha2V5cy5pbmNsdWRlcyhrZXkpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cmlwQm91bmRpbmcodmFsdWUsIHBhdHRlcm4pIHtcblx0cmV0dXJuIHZhbHVlICYmIHZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChgXiR7cGF0dGVybn18JHtwYXR0ZXJufSRgKSwgJycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTChwYXRoKSB7XG5cdHJldHVybiBCb29sZWFuKHBhdGggJiYgL14oXFx3KzopP1xcL1xcLy8udGVzdChwYXRoKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RhdGFVUkwocGF0aCkge1xuXHRyZXR1cm4gQm9vbGVhbihwYXRoICYmIC9eZGF0YTpcXHcrL2kudGVzdChwYXRoKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Fic29sdXRlUGF0aChwYXRoKSB7XG5cdHJldHVybiBCb29sZWFuKHBhdGggJiYgL15cXC8oW14vXXwkKS8udGVzdChwYXRoKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1JlbGF0aXZlUGF0aChwYXRoKSB7XG5cdHJldHVybiBCb29sZWFuKHBhdGggJiYgL15cXC57MSwyfSg/OlxcL3wkKS8udGVzdChwYXRoKSk7XG59XG4iXX0=