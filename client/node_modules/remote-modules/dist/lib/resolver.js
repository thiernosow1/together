"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isCore = isCore;
exports.diffPaths = diffPaths;
exports.resolveSync = resolveSync;
exports.resolveAsync = resolveAsync;
exports.defaultModuleDirs = exports.defaultMainFields = exports.defaultExtensions = exports.defaultCore = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _resolve = _interopRequireDefault(require("resolve"));

var _asyncify = _interopRequireDefault(require("./helpers/asyncify"));

var _promisify = _interopRequireDefault(require("./helpers/promisify"));

var _noop = _interopRequireDefault(require("./helpers/noop"));

var _fs2 = require("./helpers/fs");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const wrappedAsyncResolver = (0, _promisify.default)(_resolve.default);
const defaultCore = _resolve.default.core;
exports.defaultCore = defaultCore;
const defaultExtensions = Object.freeze(['.js', '.jsx', '.mjs', '.es', '.es6', '.json']);
exports.defaultExtensions = defaultExtensions;
const defaultMainFields = Object.freeze(['module', 'main']);
exports.defaultMainFields = defaultMainFields;
const defaultModuleDirs = Object.freeze(['node_modules']);
exports.defaultModuleDirs = defaultModuleDirs;

function isCore(request) {
  return Boolean(_resolve.default.isCore(request));
}
/**
 * If start !== end, return the intermediate paths spanning [start...end] (inclusive)
 * If start === end, return [start]
 * @param {string} start
 * @param {string} [end = start]
 * @return {string[]}
 */


function diffPaths(start, end = start) {
  const paths = [];

  if (start === end) {
    paths[0] = start;
  } else {
    const relative = _path.default.relative(start, end);

    const diff = _path.default.join(relative && '/', relative);

    const segments = diff.split('/');
    const size = segments.length;

    for (let i = 0; i < size; i += 1) {
      paths[i] = _path.default.join(start, ...segments.slice(0, size - i));
    }
  }

  return paths;
}

function doResolve(resolveFn, args, checkFile) {
  const request = args.shift();
  const options = args.pop() || {};

  const {
    core = defaultCore,
    mainFields = defaultMainFields,
    moduleDirs = defaultModuleDirs,
    rootDir = process.cwd(),
    baseDir = rootDir,
    isFile = checkFile
  } = options,
        otherOpts = _objectWithoutProperties(options, ["core", "mainFields", "moduleDirs", "rootDir", "baseDir", "isFile"]);

  const resolverOpts = _objectSpread({
    extensions: defaultExtensions,
    paths: diffPaths(rootDir, baseDir),
    basedir: baseDir,
    moduleDirectory: moduleDirs,
    preserveSymlinks: false,
    packageFilter: pkg => {
      let result = pkg;

      for (const field of mainFields) {
        if (field && pkg[field]) {
          let main = pkg[field];

          if (pkg.main && typeof main === 'object') {
            const normalizedMain = Object.entries(main).reduce((acc, [key, value]) => _objectSpread({}, acc, {
              [_path.default.normalize(key)]: value
            }), {});
            main = normalizedMain[_path.default.normalize(pkg.main)];
          }

          if (typeof main === 'string') {
            result = _objectSpread({}, pkg, {
              main
            });
            break;
          }
        }
      }

      return result;
    },
    isFile: (file, cb = _noop.default) => {
      const constrainedFile = file.startsWith(rootDir) ? file : null;
      return constrainedFile ? isFile(constrainedFile, cb) : cb(null, false);
    }
  }, otherOpts);

  return core[request] ? request : resolveFn(request, resolverOpts);
}

function resolveSync(...args) {
  return doResolve(_resolve.default.sync, args, file => {
    let result = false;

    try {
      // eslint-disable-next-line no-sync
      result = _fs.default.statSync(file).isFile();
    } catch (err) {
      if (err.code !== 'ENOENT' && err.code !== 'ENOTDIR') {
        throw err;
      }
    }

    return result;
  });
}

function resolveAsync(...args) {
  return doResolve(wrappedAsyncResolver, args, (0, _asyncify.default)(async file => {
    let result = false;

    try {
      const stat = await (0, _fs2.statAsync)(file);
      result = stat.isFile();
    } catch (err) {
      if (err.code !== 'ENOENT' && err.code !== 'ENOTDIR') {
        throw err;
      }
    }

    return result;
  }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,