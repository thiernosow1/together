#!/usr/bin/env node
"use strict";

var _child_process = require("child_process");

var _util = require("util");

var _yargs = _interopRequireDefault(require("yargs"));

var _server = _interopRequireDefault(require("../server"));

var _installer = _interopRequireDefault(require("../server/installer"));

var _configStore = _interopRequireDefault(require("../lib/config-store"));

var _logger = _interopRequireDefault(require("../lib/logger"));

var _pick = _interopRequireDefault(require("../lib/helpers/pick"));

var _helpers = require("../lib/helpers");

var _helpers2 = require("./helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const C = new _configStore.default();

function commonOptionsBuilder(program) {
  return program.positional('entry', {
    describe: 'Install entrypoint',
    type: 'string',
    defaultDescription: C.defaults.entry
  }).option('define', {
    alias: 'd',
    describe: 'Variable definitions to be evaluated at install',
    type: 'array',
    default: []
  }).option('ext', {
    alias: 'e',
    describe: 'Extensions to resolve',
    type: 'array',
    defaultDescription: C.defaults.extensions
  }).option('force', {
    alias: 'f',
    describe: 'Skip cache and install directly from source',
    type: 'boolean',
    default: false
  }).option('include', {
    alias: 'i',
    describe: 'Include pattern',
    type: 'array',
    defaultDescription: C.defaults.include
  }).option('mainfields', {
    describe: 'Package entrypoints',
    type: 'array',
    defaultDescription: C.defaults.mainFields
  }).option('moduledirs', {
    describe: 'Module directories',
    type: 'array',
    defaultDescription: C.defaults.moduleDirs
  }).option('output', {
    alias: 'o',
    describe: 'Output directory',
    type: 'string',
    defaultDescription: C.defaults.output
  }).option('root', {
    alias: 'r',
    describe: 'Project root',
    type: 'string',
    defaultDescription: C.defaults.root
  }).option('strict', {
    describe: 'Fail on missing dependency',
    type: 'boolean',
    default: undefined,
    defaultDescription: C.defaults.strict
  }).option('target', {
    describe: 'Output target',
    type: 'string',
    defaultDescription: C.defaults.outputTarget
  }).option('uglify', {
    describe: 'Uglify output',
    type: 'boolean',
    default: undefined,
    defaultDescription: C.defaults.uglify
  }).option('verbose', {
    alias: 'v',
    describe: 'Verbose logging',
    type: 'boolean',
    default: true
  });
}

function commonOptionsParser(argv, extras = []) {
  const {
    define: _define,
    include,
    config,
    entry,
    ext,
    mainfields,
    moduledirs,
    output,
    preset,
    root,
    scope,
    strict,
    target: outputTarget,
    uglify,
    force,
    verbose
  } = argv,
        other = _objectWithoutProperties(argv, ["define", "include", "config", "entry", "ext", "mainfields", "moduledirs", "output", "preset", "root", "scope", "strict", "target", "uglify", "force", "verbose"]);

  if (verbose) {
    _logger.default.level('trace');
  }

  const define = (0, _helpers2.normalizeArrayOption)(_define).reduce((acc, pair) => {
    const [key, value] = pair.split('=');
    return _objectSpread({}, acc, {
      [key]: value
    });
  }, {});
  const extensions = (0, _helpers2.normalizeArrayOption)(ext);
  const mainFields = (0, _helpers2.normalizeArrayOption)(mainfields);
  const moduleDirs = (0, _helpers2.normalizeArrayOption)(moduledirs);
  return (0, _helpers.pickDefined)((0, _helpers2.toPrimitive)(_objectSpread({}, (0, _pick.default)(other, extras), {
    config,
    entry,
    define,
    extensions,
    mainFields,
    moduleDirs,
    output,
    outputTarget,
    preset,
    root,
    scope,
    strict,
    uglify,
    force,
    include
  })));
}

_yargs.default.usage('Usage: $0 <command> [options]').help().option('scope', {
  alias: 's',
  describe: 'Config scope',
  type: 'string',
  default: undefined
}).option('config', {
  alias: 'c',
  describe: 'Path to a .modulerc file',
  type: 'string',
  defaultDescription: C.defaults.config
}).option('preset', {
  alias: 'p',
  describe: 'Load target presets',
  type: 'string',
  defaultDescription: C.defaults.preset
}).command({
  command: 'print-config [options]',
  desc: 'Display the assembled config object(s)',
  handler: async argv => {
    const _commonOptionsParser = commonOptionsParser(argv),
          {
      scope
    } = _commonOptionsParser,
          options = _objectWithoutProperties(_commonOptionsParser, ["scope"]);

    C.init(options);
    (scope ? [scope] : C.scopes()).forEach(symbol => {
      _logger.default.info({
        name: _configStore.default.symbolOf(symbol)
      }, `\n${(0, _util.inspect)((0, _helpers.omit)(C.use(symbol), ['scopeKey', 'core']), {
        colors: true,
        depth: null
      })}\n`);
    });
  }
}).command({
  command: 'install [entry] [options]',
  desc: 'Prep the code you want to serve remotely',
  builder: program => commonOptionsBuilder(program).option('workers', {
    describe: 'Run multi-scope installs on worker processes',
    type: 'boolean',
    default: true
  }),
  handler: async argv => {
    const _commonOptionsParser2 = commonOptionsParser(argv, ['workers']),
          {
      force,
      scope,
      workers
    } = _commonOptionsParser2,
          options = _objectWithoutProperties(_commonOptionsParser2, ["force", "scope", "workers"]);

    try {
      C.init(options);

      if (scope || C.scopes().length === 1) {
        const install = new _installer.default(C.use(scope || C.scopes()[0]));
        await install(force);
      } else if (workers) {
        const [, ...args] = [...process.argv];

        if (!/\/dist\//.test(__filename)) {
          args.unshift('-r', '@babel/register');
        }

        await Promise.all(C.scopes().map(symbol => {
          const scopeKey = _configStore.default.symbolOf(symbol);

          const child = (0, _child_process.spawn)('node', [...args, '-s', scopeKey], {
            stdio: 'inherit'
          });
          process.once('exit', code => child.kill(code));
          return new Promise((resolve, reject) => {
            child.once('exit', code => {
              if (code) {
                reject(new Error(`Worker process for scope '${scopeKey}' exited with code ${code}`));
              } else {
                resolve();
              }
            });
          });
        }));
      } else {
        await Promise.all(C.scopes().map(symbol => {
          const install = new _installer.default(C.use(symbol));
          return install(force);
        }));
      }
    } catch (err) {
      _logger.default.error(err); // eslint-disable-next-line no-process-exit


      process.exit(1);
    }
  }
}).command({
  command: 'start [entry] [options]',
  desc: 'Start the server',
  builder: program => commonOptionsBuilder(program).option('production', {
    describe: 'Start in production mode',
    type: 'boolean',
    default: undefined,
    defaultDescription: false
  }).option('watch', {
    describe: 'Watch for changes',
    type: 'boolean',
    default: undefined,
    defaultDescription: false
  }),
  handler: async argv => {
    const _commonOptionsParser3 = commonOptionsParser(argv, ['production', 'watch']),
          {
      force,
      scope,
      production
    } = _commonOptionsParser3,
          options = _objectWithoutProperties(_commonOptionsParser3, ["force", "scope", "production"]);

    try {
      C.init(options);
      const server = new _server.default(scope ? C.use(scope) : C); // FIXME: this is a quick and dirty check to support production builds

      if (!production) {
        await server.install(force);
      }

      await server.listen();
    } catch (err) {
      _logger.default.error(err); // eslint-disable-next-line no-process-exit


      process.exit(1);
    }
  }
}).wrap(Math.min(100, _yargs.default.terminalWidth())).parse();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,